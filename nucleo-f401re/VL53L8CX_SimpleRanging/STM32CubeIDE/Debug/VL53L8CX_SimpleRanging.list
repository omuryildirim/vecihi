
VL53L8CX_SimpleRanging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c028  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e38  0800c1c8  0800c1c8  0000d1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022000  08022000  00024210  2**0
                  CONTENTS
  4 .ARM          00000008  08022000  08022000  00023000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022008  08022008  00024210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022008  08022008  00023008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802200c  0802200c  0002300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08022010  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  20000210  08022220  00024210  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001e08  08022220  00024e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024210  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001a6ae  00000000  00000000  00024240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007a  00000000  00000000  0003e8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00016176  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034ce  00000000  00000000  00054ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d0  00000000  00000000  00057fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096585  00000000  00000000  00059380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f6f  00000000  00000000  000ef905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001969e  00000000  00000000  000f0874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109f12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065f8  00000000  00000000  00109f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1b0 	.word	0x0800c1b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c1b0 	.word	0x0800c1b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f4c:	f004 ffa2 	bl	8005e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f008 fe9d 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f001 f8a9 	bl	80020d0 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8000f8c:	08022010 	.word	0x08022010
  ldr r2, =_sbss
 8000f90:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000f94:	20001e08 	.word	0x20001e08

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>

08000f9a <MPUXX50_Init>:
#include "MPUXX50.h"

// Constructor for MPUXX50 I2C
void MPUXX50_Init(MPUXX50 *mpuxx50, I2C_HandleTypeDef *pI2Cx, uint8_t addr) {
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71fb      	strb	r3, [r7, #7]
    mpuxx50->pI2Cx = pI2Cx;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	609a      	str	r2, [r3, #8]
    mpuxx50->addr = addr << 1;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	731a      	strb	r2, [r3, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <MPUXX50_Begin>:

// Boot up the IMU and ensure we have a valid connection
uint8_t MPUXX50_Begin(MPUXX50 *mpuxx50) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]
    uint8_t check, select;

    // Set attitude to zero conditions
    mpuxx50->attitude.r = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    mpuxx50->attitude.p = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
    mpuxx50->attitude.yaw = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
    mpuxx50->attitude.x = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
    mpuxx50->attitude.vx = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    mpuxx50->attitude.y = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    mpuxx50->attitude.vy = 0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34
    mpuxx50->attitude.z = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	@ 0x44
    mpuxx50->attitude.vz = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	@ 0x38

    // Confirm device
    HAL_I2C_Mem_Read(mpuxx50->pI2Cx, mpuxx50->addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6898      	ldr	r0, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7b1b      	ldrb	r3, [r3, #12]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f107 030f 	add.w	r3, r7, #15
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	2275      	movs	r2, #117	@ 0x75
 8001032:	f005 fe11 	bl	8006c58 <HAL_I2C_Mem_Read>

    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS)) {
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b71      	cmp	r3, #113	@ 0x71
 800103a:	d002      	beq.n	8001042 <MPUXX50_Begin+0x7e>
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b68      	cmp	r3, #104	@ 0x68
 8001040:	d120      	bne.n	8001084 <MPUXX50_Begin+0xc0>
        select = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(mpuxx50->pI2Cx, mpuxx50->addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6898      	ldr	r0, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7b1b      	ldrb	r3, [r3, #12]
 800104e:	4619      	mov	r1, r3
 8001050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	226b      	movs	r2, #107	@ 0x6b
 8001064:	f005 fcfe 	bl	8006a64 <HAL_I2C_Mem_Write>

        MPUXX50_WriteAccFullScaleRange(mpuxx50, mpuxx50->aFSR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b9b      	ldrb	r3, [r3, #14]
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f80e 	bl	8001090 <MPUXX50_WriteAccFullScaleRange>
        MPUXX50_WriteGyroFullScaleRange(mpuxx50, mpuxx50->gFSR);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b5b      	ldrb	r3, [r3, #13]
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f854 	bl	8001128 <MPUXX50_WriteGyroFullScaleRange>

        return 1;
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <MPUXX50_Begin+0xc2>
    } else {
        return 0;
 8001084:	2300      	movs	r3, #0
    }
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MPUXX50_WriteAccFullScaleRange>:

// Set the accelerometer full scale range
void MPUXX50_WriteAccFullScaleRange(MPUXX50 *mpuxx50, uint8_t aFSR) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
    uint8_t select;

    switch (aFSR) {
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d826      	bhi.n	80010f0 <MPUXX50_WriteAccFullScaleRange+0x60>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <MPUXX50_WriteAccFullScaleRange+0x18>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	080010c7 	.word	0x080010c7
 80010b0:	080010d5 	.word	0x080010d5
 80010b4:	080010e3 	.word	0x080010e3
        case AFSR_2G:
            mpuxx50->aScaleFactor = 16384.0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80010be:	601a      	str	r2, [r3, #0]
            select = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
            break;
 80010c4:	e01b      	b.n	80010fe <MPUXX50_WriteAccFullScaleRange+0x6e>
        case AFSR_4G:
            mpuxx50->aScaleFactor = 8192.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80010cc:	601a      	str	r2, [r3, #0]
            select = 0x08;
 80010ce:	2308      	movs	r3, #8
 80010d0:	73fb      	strb	r3, [r7, #15]
            break;
 80010d2:	e014      	b.n	80010fe <MPUXX50_WriteAccFullScaleRange+0x6e>
        case AFSR_8G:
            mpuxx50->aScaleFactor = 4096.0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80010da:	601a      	str	r2, [r3, #0]
            select = 0x10;
 80010dc:	2310      	movs	r3, #16
 80010de:	73fb      	strb	r3, [r7, #15]
            break;
 80010e0:	e00d      	b.n	80010fe <MPUXX50_WriteAccFullScaleRange+0x6e>
        case AFSR_16G:
            mpuxx50->aScaleFactor = 2048.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80010e8:	601a      	str	r2, [r3, #0]
            select = 0x18;
 80010ea:	2318      	movs	r3, #24
 80010ec:	73fb      	strb	r3, [r7, #15]
            break;
 80010ee:	e006      	b.n	80010fe <MPUXX50_WriteAccFullScaleRange+0x6e>
        default:
            mpuxx50->aScaleFactor = 8192.0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80010f6:	601a      	str	r2, [r3, #0]
            select = 0x08;
 80010f8:	2308      	movs	r3, #8
 80010fa:	73fb      	strb	r3, [r7, #15]
            break;
 80010fc:	bf00      	nop
    }

    HAL_I2C_Mem_Write(mpuxx50->pI2Cx, mpuxx50->addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6898      	ldr	r0, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b1b      	ldrb	r3, [r3, #12]
 8001106:	4619      	mov	r1, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	221c      	movs	r2, #28
 800111c:	f005 fca2 	bl	8006a64 <HAL_I2C_Mem_Write>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <MPUXX50_WriteGyroFullScaleRange>:

// Set the gyroscope full scale range
void MPUXX50_WriteGyroFullScaleRange(MPUXX50 *mpuxx50, uint8_t gFSR) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af04      	add	r7, sp, #16
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
    uint8_t select;

    switch (gFSR) {
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d822      	bhi.n	8001180 <MPUXX50_WriteGyroFullScaleRange+0x58>
 800113a:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <MPUXX50_WriteGyroFullScaleRange+0x18>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001151 	.word	0x08001151
 8001144:	0800115d 	.word	0x0800115d
 8001148:	08001169 	.word	0x08001169
 800114c:	08001175 	.word	0x08001175
        case GFSR_250DPS:
            mpuxx50->gScaleFactor = 131.0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <MPUXX50_WriteGyroFullScaleRange+0x90>)
 8001154:	605a      	str	r2, [r3, #4]
            select = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
            break;
 800115a:	e017      	b.n	800118c <MPUXX50_WriteGyroFullScaleRange+0x64>
        case GFSR_500DPS:
            mpuxx50->gScaleFactor = 65.5;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <MPUXX50_WriteGyroFullScaleRange+0x94>)
 8001160:	605a      	str	r2, [r3, #4]
            select = 0x08;
 8001162:	2308      	movs	r3, #8
 8001164:	73fb      	strb	r3, [r7, #15]
            break;
 8001166:	e011      	b.n	800118c <MPUXX50_WriteGyroFullScaleRange+0x64>
        case GFSR_1000DPS:
            mpuxx50->gScaleFactor = 32.8;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <MPUXX50_WriteGyroFullScaleRange+0x98>)
 800116c:	605a      	str	r2, [r3, #4]
            select = 0x10;
 800116e:	2310      	movs	r3, #16
 8001170:	73fb      	strb	r3, [r7, #15]
            break;
 8001172:	e00b      	b.n	800118c <MPUXX50_WriteGyroFullScaleRange+0x64>
        case GFSR_2000DPS:
            mpuxx50->gScaleFactor = 16.4;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <MPUXX50_WriteGyroFullScaleRange+0x9c>)
 8001178:	605a      	str	r2, [r3, #4]
            select = 0x18;
 800117a:	2318      	movs	r3, #24
 800117c:	73fb      	strb	r3, [r7, #15]
            break;
 800117e:	e005      	b.n	800118c <MPUXX50_WriteGyroFullScaleRange+0x64>
        default:
            mpuxx50->gScaleFactor = 65.5;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0e      	ldr	r2, [pc, #56]	@ (80011bc <MPUXX50_WriteGyroFullScaleRange+0x94>)
 8001184:	605a      	str	r2, [r3, #4]
            select = 0x08;
 8001186:	2308      	movs	r3, #8
 8001188:	73fb      	strb	r3, [r7, #15]
            break;
 800118a:	bf00      	nop
    }

    HAL_I2C_Mem_Write(mpuxx50->pI2Cx, mpuxx50->addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7b1b      	ldrb	r3, [r3, #12]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	f107 030f 	add.w	r3, r7, #15
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	221b      	movs	r2, #27
 80011aa:	f005 fc5b 	bl	8006a64 <HAL_I2C_Mem_Write>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	43030000 	.word	0x43030000
 80011bc:	42830000 	.word	0x42830000
 80011c0:	42033333 	.word	0x42033333
 80011c4:	41833333 	.word	0x41833333

080011c8 <MPUXX50_SetGyroFullScaleRange>:

// Set the gyroscope full scale range
void MPUXX50_SetGyroFullScaleRange(MPUXX50 *mpuxx50, uint8_t gFSR) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
    mpuxx50->gFSR = gFSR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	78fa      	ldrb	r2, [r7, #3]
 80011d8:	735a      	strb	r2, [r3, #13]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <MPUXX50_SetAccFullScaleRange>:

// Set the accelerometer full scale range
void MPUXX50_SetAccFullScaleRange(MPUXX50 *mpuxx50, uint8_t aFSR) {
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
    mpuxx50->aFSR = aFSR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	739a      	strb	r2, [r3, #14]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <MPUXX50_SetDeltaTime>:

// Set the sampling duration (delta time) in seconds
void MPUXX50_SetDeltaTime(MPUXX50 *mpuxx50, float dt) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	ed87 0a00 	vstr	s0, [r7]
    mpuxx50->dt = dt;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	615a      	str	r2, [r3, #20]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <MPUXX50_SetTau>:

// Set the time constant of the complementary filter
void MPUXX50_SetTau(MPUXX50 *mpuxx50, float tau) {
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	ed87 0a00 	vstr	s0, [r7]
    mpuxx50->tau = tau;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	611a      	str	r2, [r3, #16]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <MPUXX50_CalibrateGyro>:

// Find offsets for each axis of gyroscope
void MPUXX50_CalibrateGyro(MPUXX50 *mpuxx50, uint16_t numCalPoints) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
    RawData rawData;
    int32_t x = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t y = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
    int32_t z = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]

    if (numCalPoints == 0) {
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <MPUXX50_CalibrateGyro+0x22>
        numCalPoints = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	807b      	strh	r3, [r7, #2]
    }

    for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 8001262:	2300      	movs	r3, #0
 8001264:	837b      	strh	r3, [r7, #26]
 8001266:	e01d      	b.n	80012a4 <MPUXX50_CalibrateGyro+0x64>
        rawData = MPUXX50_ReadRawData(mpuxx50);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f84d 	bl	800130e <MPUXX50_ReadRawData>
        x += rawData.gx;
 8001274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001278:	461a      	mov	r2, r3
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	4413      	add	r3, r2
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
        y += rawData.gy;
 8001280:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001284:	461a      	mov	r2, r3
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	4413      	add	r3, r2
 800128a:	623b      	str	r3, [r7, #32]
        z += rawData.gz;
 800128c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001290:	461a      	mov	r2, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	61fb      	str	r3, [r7, #28]
        HAL_Delay(3);
 8001298:	2003      	movs	r0, #3
 800129a:	f004 fe7f 	bl	8005f9c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 800129e:	8b7b      	ldrh	r3, [r7, #26]
 80012a0:	3301      	adds	r3, #1
 80012a2:	837b      	strh	r3, [r7, #26]
 80012a4:	8b7a      	ldrh	r2, [r7, #26]
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3dd      	bcc.n	8001268 <MPUXX50_CalibrateGyro+0x28>
    }

    mpuxx50->gyroCal.x = (float)x / (float)numCalPoints;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a06 	vstr	s15, [r3, #24]
    mpuxx50->gyroCal.y = (float)y / (float)numCalPoints;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edc3 7a07 	vstr	s15, [r3, #28]
    mpuxx50->gyroCal.z = (float)z / (float)numCalPoints;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	@ 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <MPUXX50_ReadRawData>:

// Read raw data from IMU
RawData MPUXX50_ReadRawData(MPUXX50 *mpuxx50) {
 800130e:	b590      	push	{r4, r7, lr}
 8001310:	b08f      	sub	sp, #60	@ 0x3c
 8001312:	af04      	add	r7, sp, #16
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
    RawData rawData;
    uint8_t buf[14];

    HAL_I2C_Mem_Read(mpuxx50->pI2Cx, mpuxx50->addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6898      	ldr	r0, [r3, #8]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	7b1b      	ldrb	r3, [r3, #12]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	230e      	movs	r3, #14
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	223b      	movs	r2, #59	@ 0x3b
 8001336:	f005 fc8f 	bl	8006c58 <HAL_I2C_Mem_Read>

    rawData.ax = (int16_t)(buf[0] << 8 | buf[1]);
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7b7b      	ldrb	r3, [r7, #13]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21b      	sxth	r3, r3
 8001348:	83bb      	strh	r3, [r7, #28]
    rawData.ay = (int16_t)(buf[2] << 8 | buf[3]);
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	83fb      	strh	r3, [r7, #30]
    rawData.az = (int16_t)(buf[4] << 8 | buf[5]);
 800135a:	7c3b      	ldrb	r3, [r7, #16]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7c7b      	ldrb	r3, [r7, #17]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	843b      	strh	r3, [r7, #32]
    rawData.gx = (int16_t)(buf[8] << 8 | buf[9]);
 800136a:	7d3b      	ldrb	r3, [r7, #20]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7d7b      	ldrb	r3, [r7, #21]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	847b      	strh	r3, [r7, #34]	@ 0x22
    rawData.gy = (int16_t)(buf[10] << 8 | buf[11]);
 800137a:	7dbb      	ldrb	r3, [r7, #22]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	84bb      	strh	r3, [r7, #36]	@ 0x24
    rawData.gz = (int16_t)(buf[12] << 8 | buf[13]);
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7e7b      	ldrb	r3, [r7, #25]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return rawData;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	461c      	mov	r4, r3
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013a4:	6020      	str	r0, [r4, #0]
 80013a6:	6061      	str	r1, [r4, #4]
 80013a8:	60a2      	str	r2, [r4, #8]
}
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	372c      	adds	r7, #44	@ 0x2c
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}

080013b2 <MPUXX50_ProcessData>:

// Process the raw data into real-world sensor values
ProcessedData MPUXX50_ProcessData(MPUXX50 *mpuxx50) {
 80013b2:	b5b0      	push	{r4, r5, r7, lr}
 80013b4:	b08c      	sub	sp, #48	@ 0x30
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
    ProcessedData processedData;
    RawData rawData = MPUXX50_ReadRawData(mpuxx50);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffa3 	bl	800130e <MPUXX50_ReadRawData>

    processedData.ax = rawData.ax / mpuxx50->aScaleFactor;
 80013c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013de:	edc7 7a06 	vstr	s15, [r7, #24]
    processedData.ay = rawData.ay / mpuxx50->aScaleFactor;
 80013e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f8:	edc7 7a07 	vstr	s15, [r7, #28]
    processedData.az = rawData.az / mpuxx50->aScaleFactor;
 80013fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc7 7a08 	vstr	s15, [r7, #32]

    processedData.gx = (rawData.gx - mpuxx50->gyroCal.x) / mpuxx50->gScaleFactor;
 8001416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	edd3 7a06 	vldr	s15, [r3, #24]
 8001428:	ee77 6a67 	vsub.f32	s13, s14, s15
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001436:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    processedData.gy = (rawData.gy - mpuxx50->gyroCal.y) / mpuxx50->gScaleFactor;
 800143a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	edd3 7a07 	vldr	s15, [r3, #28]
 800144c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	ed93 7a01 	vldr	s14, [r3, #4]
 8001456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    processedData.gz = (rawData.gz - mpuxx50->gyroCal.z) / mpuxx50->gScaleFactor;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001470:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	ed93 7a01 	vldr	s14, [r3, #4]
 800147a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			rawData.gz,
			processedData.gx,
			processedData.gy,
			processedData.gz);
			*/
    return processedData;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	461d      	mov	r5, r3
 8001486:	f107 0418 	add.w	r4, r7, #24
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001492:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	3730      	adds	r7, #48	@ 0x30
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014a0 <MPUXX50_CalcAttitude>:

// Calculate the attitude of the sensor in degrees using a complementary filter
Attitude MPUXX50_CalcAttitude(MPUXX50 *mpuxx50) {
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    ProcessedData sensorData = MPUXX50_ProcessData(mpuxx50);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff7e 	bl	80013b2 <MPUXX50_ProcessData>

    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f84d 	bl	8000558 <__aeabi_f2d>
 80014be:	4604      	mov	r4, r0
 80014c0:	460d      	mov	r5, r1
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f847 	bl	8000558 <__aeabi_f2d>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	ec43 2b11 	vmov	d1, r2, r3
 80014d2:	ec45 4b10 	vmov	d0, r4, r5
 80014d6:	f00a fbff 	bl	800bcd8 <atan2>
 80014da:	ec51 0b10 	vmov	r0, r1, d0
 80014de:	a382      	add	r3, pc, #520	@ (adr r3, 80016e8 <MPUXX50_CalcAttitude+0x248>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f890 	bl	8000608 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb62 	bl	8000bb8 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	460d      	mov	r5, r1
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f826 	bl	8000558 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b11 	vmov	d1, r2, r3
 8001514:	ec45 4b10 	vmov	d0, r4, r5
 8001518:	f00a fbde 	bl	800bcd8 <atan2>
 800151c:	ec51 0b10 	vmov	r0, r1, d0
 8001520:	a371      	add	r3, pc, #452	@ (adr r3, 80016e8 <MPUXX50_CalcAttitude+0x248>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f86f 	bl	8000608 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fb41 	bl	8000bb8 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	623b      	str	r3, [r7, #32]

    mpuxx50->attitude.r = mpuxx50->tau * (mpuxx50->attitude.r - sensorData.gy * mpuxx50->dt) + (1 - mpuxx50->tau) * accelRoll;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001546:	ed97 6a06 	vldr	s12, [r7, #24]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001550:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001554:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001566:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800156a:	edd7 7a08 	vldr	s15, [r7, #32]
 800156e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    mpuxx50->attitude.p = mpuxx50->tau * (mpuxx50->attitude.p - sensorData.gx * mpuxx50->dt) + (1 - mpuxx50->tau) * accelPitch;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001588:	ed97 6a05 	vldr	s12, [r7, #20]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001592:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001596:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800159a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    mpuxx50->attitude.yaw += (sensorData.gz * mpuxx50->dt);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80015c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Update the attitude structure with velocity and position
    if (sensorData.gy > 0.15) {
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffba 	bl	8000558 <__aeabi_f2d>
 80015e4:	a342      	add	r3, pc, #264	@ (adr r3, 80016f0 <MPUXX50_CalcAttitude+0x250>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff fa9d 	bl	8000b28 <__aeabi_dcmpgt>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01e      	beq.n	8001632 <MPUXX50_CalcAttitude+0x192>
        mpuxx50->attitude.vy += sensorData.gy * mpuxx50->dt;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015fa:	edd7 6a06 	vldr	s13, [r7, #24]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	edd3 7a05 	vldr	s15, [r3, #20]
 8001604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        mpuxx50->attitude.y += mpuxx50->attitude.vy * mpuxx50->dt;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	edd3 7a05 	vldr	s15, [r3, #20]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    }

    if (sensorData.gz > 0.15) {
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff8f 	bl	8000558 <__aeabi_f2d>
 800163a:	a32d      	add	r3, pc, #180	@ (adr r3, 80016f0 <MPUXX50_CalcAttitude+0x250>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff fa72 	bl	8000b28 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01e      	beq.n	8001688 <MPUXX50_CalcAttitude+0x1e8>
        mpuxx50->attitude.vz += sensorData.gz * mpuxx50->dt;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001650:	edd7 6a07 	vldr	s13, [r7, #28]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	edd3 7a05 	vldr	s15, [r3, #20]
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        mpuxx50->attitude.z += mpuxx50->attitude.vz * mpuxx50->dt;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	edd3 7a05 	vldr	s15, [r3, #20]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    }
    mpuxx50->attitude.vx += sensorData.gx * mpuxx50->dt;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800168e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	edd3 7a05 	vldr	s15, [r3, #20]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    mpuxx50->attitude.x += mpuxx50->attitude.vx * mpuxx50->dt;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    return mpuxx50->attitude;
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4615      	mov	r5, r2
 80016cc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	602b      	str	r3, [r5, #0]
}
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	1a63cbb0 	.word	0x1a63cbb0
 80016ec:	404ca5dc 	.word	0x404ca5dc
 80016f0:	33333333 	.word	0x33333333
 80016f4:	3fc33333 	.word	0x3fc33333

080016f8 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_VL53L8CX_SimpleRanging_Init();
 80016fc:	f000 f808 	bl	8001710 <MX_VL53L8CX_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_VL53L8CX_SimpleRanging_Process();
 8001708:	f000 f826 	bl	8001758 <MX_VL53L8CX_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <MX_VL53L8CX_SimpleRanging_Init>:

static void MX_VL53L8CX_SimpleRanging_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8001714:	2000      	movs	r0, #0
 8001716:	f001 f859 	bl	80027cc <BSP_COM_Init>

  printf("\033[2H\033[2J");
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <MX_VL53L8CX_SimpleRanging_Init+0x38>)
 800171c:	f008 f902 	bl	8009924 <iprintf>
  printf("Sensor initialization...\n");
 8001720:	480a      	ldr	r0, [pc, #40]	@ (800174c <MX_VL53L8CX_SimpleRanging_Init+0x3c>)
 8001722:	f008 f96f 	bl	8009a04 <puts>

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L8CX);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 fb08 	bl	8001d3c <CUSTOM_RANGING_SENSOR_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <MX_VL53L8CX_SimpleRanging_Init+0x40>)
 8001730:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <MX_VL53L8CX_SimpleRanging_Init+0x40>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <MX_VL53L8CX_SimpleRanging_Init+0x34>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_VL53L8CX_SimpleRanging_Init+0x44>)
 800173c:	f008 f962 	bl	8009a04 <puts>
    while (1);
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MX_VL53L8CX_SimpleRanging_Init+0x30>
  }
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800c1c8 	.word	0x0800c1c8
 800174c:	0800c1d4 	.word	0x0800c1d4
 8001750:	20000250 	.word	0x20000250
 8001754:	0800c1f0 	.word	0x0800c1f0

08001758 <MX_VL53L8CX_SimpleRanging_Process>:
    HAL_Delay(POLLING_PERIOD);
  }
}
#else
static void MX_VL53L8CX_SimpleRanging_Process(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint32_t Id;
  static RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L8CX, &Id);
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fb10 	bl	8001d88 <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L8CX, &Cap);
 8001768:	491d      	ldr	r1, [pc, #116]	@ (80017e0 <MX_VL53L8CX_SimpleRanging_Process+0x88>)
 800176a:	2000      	movs	r0, #0
 800176c:	f000 fb36 	bl	8001ddc <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8001778:	221e      	movs	r2, #30
 800177a:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 800177e:	220a      	movs	r2, #10
 8001780:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 800178e:	4915      	ldr	r1, [pc, #84]	@ (80017e4 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fb4d 	bl	8001e30 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 8001796:	2101      	movs	r1, #1
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fb9d 	bl	8001ed8 <CUSTOM_RANGING_SENSOR_Start>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 80017a2:	6013      	str	r3, [r2, #0]

  while (1)
  {
    /* polling mode */
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 80017a4:	4911      	ldr	r1, [pc, #68]	@ (80017ec <MX_VL53L8CX_SimpleRanging_Process+0x94>)
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fb6c 	bl	8001e84 <CUSTOM_RANGING_SENSOR_GetDistance>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a0e      	ldr	r2, [pc, #56]	@ (80017e8 <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 80017b0:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <MX_VL53L8CX_SimpleRanging_Process+0x68>
    {
      print_result(&Result);
 80017ba:	480c      	ldr	r0, [pc, #48]	@ (80017ec <MX_VL53L8CX_SimpleRanging_Process+0x94>)
 80017bc:	f000 f818 	bl	80017f0 <print_result>
    }

    if (com_has_data())
 80017c0:	f000 fa94 	bl	8001cec <com_has_data>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <MX_VL53L8CX_SimpleRanging_Process+0x7e>
    {
      handle_cmd(get_key());
 80017ca:	f000 fa7b 	bl	8001cc4 <get_key>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fa57 	bl	8001c84 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f004 fbe0 	bl	8005f9c <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 80017dc:	e7e2      	b.n	80017a4 <MX_VL53L8CX_SimpleRanging_Process+0x4c>
 80017de:	bf00      	nop
 80017e0:	2000022c 	.word	0x2000022c
 80017e4:	2000023c 	.word	0x2000023c
 80017e8:	20000250 	.word	0x20000250
 80017ec:	20000258 	.word	0x20000258

080017f0 <print_result>:
  }
}
#endif /* USE_BARE_DRIVER */

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  int8_t j;
  int8_t k;
  int8_t l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80017f8:	4bb8      	ldr	r3, [pc, #736]	@ (8001adc <print_result+0x2ec>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d003      	beq.n	8001808 <print_result+0x18>
                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8001800:	4bb6      	ldr	r3, [pc, #728]	@ (8001adc <print_result+0x2ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8001804:	2b03      	cmp	r3, #3
 8001806:	d101      	bne.n	800180c <print_result+0x1c>
 8001808:	2308      	movs	r3, #8
 800180a:	e000      	b.n	800180e <print_result+0x1e>
 800180c:	2304      	movs	r3, #4
 800180e:	72fb      	strb	r3, [r7, #11]

  display_commands_banner();
 8001810:	f000 fa08 	bl	8001c24 <display_commands_banner>

  printf("Cell Format :\n\n");
 8001814:	48b2      	ldr	r0, [pc, #712]	@ (8001ae0 <print_result+0x2f0>)
 8001816:	f008 f8f5 	bl	8009a04 <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800181a:	2300      	movs	r3, #0
 800181c:	733b      	strb	r3, [r7, #12]
 800181e:	e017      	b.n	8001850 <print_result+0x60>
  {
    printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
 8001820:	4ab0      	ldr	r2, [pc, #704]	@ (8001ae4 <print_result+0x2f4>)
 8001822:	49b1      	ldr	r1, [pc, #708]	@ (8001ae8 <print_result+0x2f8>)
 8001824:	48b1      	ldr	r0, [pc, #708]	@ (8001aec <print_result+0x2fc>)
 8001826:	f008 f87d 	bl	8009924 <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 800182a:	4bac      	ldr	r3, [pc, #688]	@ (8001adc <print_result+0x2ec>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <print_result+0x4a>
 8001832:	4baa      	ldr	r3, [pc, #680]	@ (8001adc <print_result+0x2ec>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <print_result+0x54>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 800183a:	4aad      	ldr	r2, [pc, #692]	@ (8001af0 <print_result+0x300>)
 800183c:	49ad      	ldr	r1, [pc, #692]	@ (8001af4 <print_result+0x304>)
 800183e:	48ae      	ldr	r0, [pc, #696]	@ (8001af8 <print_result+0x308>)
 8001840:	f008 f870 	bl	8009924 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8001844:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	3301      	adds	r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	733b      	strb	r3, [r7, #12]
 8001850:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0e3      	beq.n	8001820 <print_result+0x30>
    }
  }

  printf("\n\n");
 8001858:	48a8      	ldr	r0, [pc, #672]	@ (8001afc <print_result+0x30c>)
 800185a:	f008 f8d3 	bl	8009a04 <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800185e:	2300      	movs	r3, #0
 8001860:	73bb      	strb	r3, [r7, #14]
 8001862:	e131      	b.n	8001ac8 <print_result+0x2d8>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e008      	b.n	800187c <print_result+0x8c>
    {
      printf(" -----------------");
 800186a:	48a5      	ldr	r0, [pc, #660]	@ (8001b00 <print_result+0x310>)
 800186c:	f008 f85a 	bl	8009924 <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbf1      	blt.n	800186a <print_result+0x7a>
    }
    printf("\n");
 8001886:	200a      	movs	r0, #10
 8001888:	f008 f85e 	bl	8009948 <putchar>

    for (i = 0; i < zones_per_line; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e008      	b.n	80018a4 <print_result+0xb4>
    {
      printf("|                 ");
 8001892:	489c      	ldr	r0, [pc, #624]	@ (8001b04 <print_result+0x314>)
 8001894:	f008 f846 	bl	8009924 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf1      	blt.n	8001892 <print_result+0xa2>
    }
    printf("|\n");
 80018ae:	4896      	ldr	r0, [pc, #600]	@ (8001b08 <print_result+0x318>)
 80018b0:	f008 f8a8 	bl	8009a04 <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	733b      	strb	r3, [r7, #12]
 80018b8:	e0fc      	b.n	8001ab4 <print_result+0x2c4>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	737b      	strb	r3, [r7, #13]
 80018c2:	e077      	b.n	80019b4 <print_result+0x1c4>
      {
        if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 80018c4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018cc:	441a      	add	r2, r3
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3304      	adds	r3, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05d      	beq.n	800199e <print_result+0x1ae>
        {
          if ((long)Result->ZoneResult[j + k].Distance[l] < 500)
 80018e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ea:	441a      	add	r2, r3
 80018ec:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	4403      	add	r3, r0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001904:	da25      	bge.n	8001952 <print_result+0x162>
          {
            printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
                   (long)Result->ZoneResult[j + k].Distance[l],
 8001906:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800190a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190e:	441a      	add	r2, r3
 8001910:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	4403      	add	r3, r0
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	689b      	ldr	r3, [r3, #8]
            printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
 8001924:	461c      	mov	r4, r3
                   (long)Result->ZoneResult[j + k].Status[l]);
 8001926:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800192a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800192e:	441a      	add	r2, r3
 8001930:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	4403      	add	r3, r0
 800193e:	3302      	adds	r3, #2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	685b      	ldr	r3, [r3, #4]
            printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
 8001946:	461a      	mov	r2, r3
 8001948:	4621      	mov	r1, r4
 800194a:	4870      	ldr	r0, [pc, #448]	@ (8001b0c <print_result+0x31c>)
 800194c:	f007 ffea 	bl	8009924 <iprintf>
 8001950:	e02a      	b.n	80019a8 <print_result+0x1b8>
          }
          else
          {
            printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
                   (long)Result->ZoneResult[j + k].Distance[l],
 8001952:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001956:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195a:	441a      	add	r2, r3
 800195c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	4403      	add	r3, r0
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	689b      	ldr	r3, [r3, #8]
            printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8001970:	461c      	mov	r4, r3
                   (long)Result->ZoneResult[j + k].Status[l]);
 8001972:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001976:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800197a:	441a      	add	r2, r3
 800197c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	4403      	add	r3, r0
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	685b      	ldr	r3, [r3, #4]
            printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8001992:	461a      	mov	r2, r3
 8001994:	4621      	mov	r1, r4
 8001996:	485e      	ldr	r0, [pc, #376]	@ (8001b10 <print_result+0x320>)
 8001998:	f007 ffc4 	bl	8009924 <iprintf>
 800199c:	e004      	b.n	80019a8 <print_result+0x1b8>
          }
        }
        else
          printf("| %5s  :  %5s ", "X", "X");
 800199e:	4a5d      	ldr	r2, [pc, #372]	@ (8001b14 <print_result+0x324>)
 80019a0:	495c      	ldr	r1, [pc, #368]	@ (8001b14 <print_result+0x324>)
 80019a2:	485d      	ldr	r0, [pc, #372]	@ (8001b18 <print_result+0x328>)
 80019a4:	f007 ffbe 	bl	8009924 <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 80019a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da83      	bge.n	80018c4 <print_result+0xd4>
      }
      printf("|\n");
 80019bc:	4852      	ldr	r0, [pc, #328]	@ (8001b08 <print_result+0x318>)
 80019be:	f008 f821 	bl	8009a04 <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <print_result+0x2ec>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <print_result+0x1e2>
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <print_result+0x2ec>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06a      	beq.n	8001aa8 <print_result+0x2b8>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	737b      	strb	r3, [r7, #13]
 80019da:	e05e      	b.n	8001a9a <print_result+0x2aa>
        {
          if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 80019dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019e4:	441a      	add	r2, r3
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d044      	beq.n	8001a84 <print_result+0x294>
          {
            if (Profile.EnableSignal != 0)
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <print_result+0x2ec>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <print_result+0x246>
            {
              printf("| %5ld  :  ", (long)Result->ZoneResult[j + k].Signal[l]);
 8001a02:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a0a:	441a      	add	r2, r3
 8001a0c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	4403      	add	r3, r0
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3304      	adds	r3, #4
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 1a90 	vmov	r1, s15
 8001a2e:	483b      	ldr	r0, [pc, #236]	@ (8001b1c <print_result+0x32c>)
 8001a30:	f007 ff78 	bl	8009924 <iprintf>
 8001a34:	e003      	b.n	8001a3e <print_result+0x24e>
            }
            else
              printf("| %5s  :  ", "X");
 8001a36:	4937      	ldr	r1, [pc, #220]	@ (8001b14 <print_result+0x324>)
 8001a38:	4839      	ldr	r0, [pc, #228]	@ (8001b20 <print_result+0x330>)
 8001a3a:	f007 ff73 	bl	8009924 <iprintf>

            if (Profile.EnableAmbient != 0)
 8001a3e:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <print_result+0x2ec>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <print_result+0x28a>
            {
              printf("%5ld ", (long)Result->ZoneResult[j + k].Ambient[l]);
 8001a46:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a4e:	441a      	add	r2, r3
 8001a50:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3302      	adds	r3, #2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 1a90 	vmov	r1, s15
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <print_result+0x334>)
 8001a74:	f007 ff56 	bl	8009924 <iprintf>
 8001a78:	e009      	b.n	8001a8e <print_result+0x29e>
            }
            else
              printf("%5s ", "X");
 8001a7a:	4926      	ldr	r1, [pc, #152]	@ (8001b14 <print_result+0x324>)
 8001a7c:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <print_result+0x338>)
 8001a7e:	f007 ff51 	bl	8009924 <iprintf>
 8001a82:	e004      	b.n	8001a8e <print_result+0x29e>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 8001a84:	4a23      	ldr	r2, [pc, #140]	@ (8001b14 <print_result+0x324>)
 8001a86:	4923      	ldr	r1, [pc, #140]	@ (8001b14 <print_result+0x324>)
 8001a88:	4823      	ldr	r0, [pc, #140]	@ (8001b18 <print_result+0x328>)
 8001a8a:	f007 ff4b 	bl	8009924 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 8001a8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	737b      	strb	r3, [r7, #13]
 8001a9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da9c      	bge.n	80019dc <print_result+0x1ec>
        }
        printf("|\n");
 8001aa2:	4819      	ldr	r0, [pc, #100]	@ (8001b08 <print_result+0x318>)
 8001aa4:	f007 ffae 	bl	8009a04 <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8001aa8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	733b      	strb	r3, [r7, #12]
 8001ab4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f43f aefe 	beq.w	80018ba <print_result+0xca>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8001abe:	7bba      	ldrb	r2, [r7, #14]
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	73bb      	strb	r3, [r7, #14]
 8001ac8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f4ff aec7 	bcc.w	8001864 <print_result+0x74>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e030      	b.n	8001b3e <print_result+0x34e>
 8001adc:	2000023c 	.word	0x2000023c
 8001ae0:	0800c214 	.word	0x0800c214
 8001ae4:	0800c224 	.word	0x0800c224
 8001ae8:	0800c22c 	.word	0x0800c22c
 8001aec:	0800c23c 	.word	0x0800c23c
 8001af0:	0800c258 	.word	0x0800c258
 8001af4:	0800c26c 	.word	0x0800c26c
 8001af8:	0800c280 	.word	0x0800c280
 8001afc:	0800c290 	.word	0x0800c290
 8001b00:	0800c294 	.word	0x0800c294
 8001b04:	0800c2a8 	.word	0x0800c2a8
 8001b08:	0800c2bc 	.word	0x0800c2bc
 8001b0c:	0800c2c0 	.word	0x0800c2c0
 8001b10:	0800c2e0 	.word	0x0800c2e0
 8001b14:	0800c300 	.word	0x0800c300
 8001b18:	0800c304 	.word	0x0800c304
 8001b1c:	0800c314 	.word	0x0800c314
 8001b20:	0800c320 	.word	0x0800c320
 8001b24:	0800c32c 	.word	0x0800c32c
 8001b28:	0800c334 	.word	0x0800c334
  {
    printf(" -----------------");
 8001b2c:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <print_result+0x368>)
 8001b2e:	f007 fef9 	bl	8009924 <iprintf>
  for (i = 0; i < zones_per_line; i++)
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <print_result+0x33c>
  }
  printf("\n");
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f007 fefd 	bl	8009948 <putchar>
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800c294 	.word	0x0800c294

08001b5c <toggle_resolution>:

static void toggle_resolution(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f9e5 	bl	8001f30 <CUSTOM_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <toggle_resolution+0x64>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d81b      	bhi.n	8001ba8 <toggle_resolution+0x4c>
 8001b70:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <toggle_resolution+0x1c>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001b89 	.word	0x08001b89
 8001b80:	08001ba1 	.word	0x08001ba1
 8001b84:	08001b99 	.word	0x08001b99
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <toggle_resolution+0x64>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	601a      	str	r2, [r3, #0]
      break;
 8001b8e:	e00c      	b.n	8001baa <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <toggle_resolution+0x64>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	601a      	str	r2, [r3, #0]
      break;
 8001b96:	e008      	b.n	8001baa <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <toggle_resolution+0x64>)
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
      break;
 8001b9e:	e004      	b.n	8001baa <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <toggle_resolution+0x64>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
      break;
 8001ba6:	e000      	b.n	8001baa <toggle_resolution+0x4e>

    default:
      break;
 8001ba8:	bf00      	nop
  }

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8001baa:	4905      	ldr	r1, [pc, #20]	@ (8001bc0 <toggle_resolution+0x64>)
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 f93f 	bl	8001e30 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f000 f98f 	bl	8001ed8 <CUSTOM_RANGING_SENSOR_Start>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000023c 	.word	0x2000023c

08001bc4 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 f9b1 	bl	8001f30 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <toggle_signal_and_ambient+0x48>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <toggle_signal_and_ambient+0x48>)
 8001be0:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <toggle_signal_and_ambient+0x48>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <toggle_signal_and_ambient+0x48>)
 8001bf4:	611a      	str	r2, [r3, #16]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8001bf6:	4905      	ldr	r1, [pc, #20]	@ (8001c0c <toggle_signal_and_ambient+0x48>)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 f919 	bl	8001e30 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 8001bfe:	2101      	movs	r1, #1
 8001c00:	2000      	movs	r0, #0
 8001c02:	f000 f969 	bl	8001ed8 <CUSTOM_RANGING_SENSOR_Start>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000023c 	.word	0x2000023c

08001c10 <clear_screen>:

static void clear_screen(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* clear Screen : 27 is ESC command */
  printf("%c[2J", 27);
 8001c14:	211b      	movs	r1, #27
 8001c16:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <clear_screen+0x10>)
 8001c18:	f007 fe84 	bl	8009924 <iprintf>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	0800c33c 	.word	0x0800c33c

08001c24 <display_commands_banner>:

static void display_commands_banner(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* clear screen */
  printf("%c[2H", 27);
 8001c28:	211b      	movs	r1, #27
 8001c2a:	480e      	ldr	r0, [pc, #56]	@ (8001c64 <display_commands_banner+0x40>)
 8001c2c:	f007 fe7a 	bl	8009924 <iprintf>

  printf("VL53L8CX Simple Ranging demo application\n");
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <display_commands_banner+0x44>)
 8001c32:	f007 fee7 	bl	8009a04 <puts>
#ifdef USE_BARE_DRIVER
  printf("Using direct calls to VL53L8CX bare driver API\n");
#endif
  printf("Polling mode\n");
 8001c36:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <display_commands_banner+0x48>)
 8001c38:	f007 fee4 	bl	8009a04 <puts>
  printf("----------------------------------------\n\n");
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <display_commands_banner+0x4c>)
 8001c3e:	f007 fee1 	bl	8009a04 <puts>

  printf("Use the following keys to control application\n");
 8001c42:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <display_commands_banner+0x50>)
 8001c44:	f007 fede 	bl	8009a04 <puts>
  printf(" 'r' : change resolution\n");
 8001c48:	480b      	ldr	r0, [pc, #44]	@ (8001c78 <display_commands_banner+0x54>)
 8001c4a:	f007 fedb 	bl	8009a04 <puts>
  printf(" 's' : enable signal and ambient\n");
 8001c4e:	480b      	ldr	r0, [pc, #44]	@ (8001c7c <display_commands_banner+0x58>)
 8001c50:	f007 fed8 	bl	8009a04 <puts>
  printf(" 'c' : clear screen\n");
 8001c54:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <display_commands_banner+0x5c>)
 8001c56:	f007 fed5 	bl	8009a04 <puts>
  printf("\n");
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f007 fe74 	bl	8009948 <putchar>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0800c344 	.word	0x0800c344
 8001c68:	0800c34c 	.word	0x0800c34c
 8001c6c:	0800c378 	.word	0x0800c378
 8001c70:	0800c388 	.word	0x0800c388
 8001c74:	0800c3b4 	.word	0x0800c3b4
 8001c78:	0800c3e4 	.word	0x0800c3e4
 8001c7c:	0800c400 	.word	0x0800c400
 8001c80:	0800c424 	.word	0x0800c424

08001c84 <handle_cmd>:

static void handle_cmd(uint8_t cmd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b73      	cmp	r3, #115	@ 0x73
 8001c92:	d00a      	beq.n	8001caa <handle_cmd+0x26>
 8001c94:	2b73      	cmp	r3, #115	@ 0x73
 8001c96:	dc10      	bgt.n	8001cba <handle_cmd+0x36>
 8001c98:	2b63      	cmp	r3, #99	@ 0x63
 8001c9a:	d00b      	beq.n	8001cb4 <handle_cmd+0x30>
 8001c9c:	2b72      	cmp	r3, #114	@ 0x72
 8001c9e:	d10c      	bne.n	8001cba <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8001ca0:	f7ff ff5c 	bl	8001b5c <toggle_resolution>
      clear_screen();
 8001ca4:	f7ff ffb4 	bl	8001c10 <clear_screen>
      break;
 8001ca8:	e008      	b.n	8001cbc <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8001caa:	f7ff ff8b 	bl	8001bc4 <toggle_signal_and_ambient>
      clear_screen();
 8001cae:	f7ff ffaf 	bl	8001c10 <clear_screen>
      break;
 8001cb2:	e003      	b.n	8001cbc <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8001cb4:	f7ff ffac 	bl	8001c10 <clear_screen>
      break;
 8001cb8:	e000      	b.n	8001cbc <handle_cmd+0x38>

    default:
      break;
 8001cba:	bf00      	nop
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <get_key>:

static uint8_t get_key(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8001cce:	1df9      	adds	r1, r7, #7
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <get_key+0x24>)
 8001cd8:	f006 fd43 	bl	8008762 <HAL_UART_Receive>

  return cmd;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200013c0 	.word	0x200013c0

08001cec <com_has_data>:

static uint32_t com_has_data(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <com_has_data+0x24>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200013c0 	.word	0x200013c0

08001d14 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d102      	bne.n	8001d2a <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000254 	.word	0x20000254

08001d3c <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d4a:	f06f 0301 	mvn.w	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e015      	b.n	8001d7e <CUSTOM_RANGING_SENSOR_Init+0x42>
  }
  else
  {
    reset_device();
 8001d52:	f000 f995 	bl	8002080 <reset_device>

    switch (Instance)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10c      	bne.n	8001d76 <CUSTOM_RANGING_SENSOR_Init+0x3a>
    {
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
      case CUSTOM_VL53L8CX:
        if (VL53L8CX_Probe(Instance) != BSP_ERROR_NONE)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f90f 	bl	8001f80 <VL53L8CX_Probe>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <CUSTOM_RANGING_SENSOR_Init+0x34>
        {
          ret = BSP_ERROR_NO_INIT;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          ret = BSP_ERROR_NONE;
        }
        break;
 8001d6e:	e006      	b.n	8001d7e <CUSTOM_RANGING_SENSOR_Init+0x42>
          ret = BSP_ERROR_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
        break;
 8001d74:	e003      	b.n	8001d7e <CUSTOM_RANGING_SENSOR_Init+0x42>
#endif /* Use custom ranging */
      default:
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001d76:	f06f 0306 	mvn.w	r3, #6
 8001d7a:	60fb      	str	r3, [r7, #12]
        break;
 8001d7c:	bf00      	nop
    }
  }

  return ret;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d98:	f06f 0301 	mvn.w	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e014      	b.n	8001dca <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	490b      	ldr	r1, [pc, #44]	@ (8001dd8 <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	4610      	mov	r0, r2
 8001db6:	4798      	blx	r3
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da03      	bge.n	8001dc6 <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001dbe:	f06f 0304 	mvn.w	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e001      	b.n	8001dca <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000760 	.word	0x20000760
 8001dd8:	2000075c 	.word	0x2000075c

08001ddc <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dec:	f06f 0301 	mvn.w	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e014      	b.n	8001e1e <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 8001df4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	490b      	ldr	r1, [pc, #44]	@ (8001e2c <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4798      	blx	r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da03      	bge.n	8001e1a <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e12:	f06f 0304 	mvn.w	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e001      	b.n	8001e1e <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000760 	.word	0x20000760
 8001e2c:	2000075c 	.word	0x2000075c

08001e30 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e40:	f06f 0301 	mvn.w	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e014      	b.n	8001e72 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8001e48:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	490b      	ldr	r1, [pc, #44]	@ (8001e80 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4798      	blx	r3
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da03      	bge.n	8001e6e <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e66:	f06f 0304 	mvn.w	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e001      	b.n	8001e72 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000760 	.word	0x20000760
 8001e80:	2000075c 	.word	0x2000075c

08001e84 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e94:	f06f 0301 	mvn.w	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e014      	b.n	8001ec6 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	490b      	ldr	r1, [pc, #44]	@ (8001ed4 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4798      	blx	r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da03      	bge.n	8001ec2 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001eba:	f06f 0304 	mvn.w	r3, #4
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e001      	b.n	8001ec6 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000760 	.word	0x20000760
 8001ed4:	2000075c 	.word	0x2000075c

08001ed8 <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001eea:	f06f 0301 	mvn.w	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e014      	b.n	8001f1c <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <CUSTOM_RANGING_SENSOR_Start+0x50>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	490b      	ldr	r1, [pc, #44]	@ (8001f2c <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f04:	78f9      	ldrb	r1, [r7, #3]
 8001f06:	4610      	mov	r0, r2
 8001f08:	4798      	blx	r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da03      	bge.n	8001f18 <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f10:	f06f 0304 	mvn.w	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e001      	b.n	8001f1c <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000760 	.word	0x20000760
 8001f2c:	2000075c 	.word	0x2000075c

08001f30 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f3e:	f06f 0301 	mvn.w	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e013      	b.n	8001f6e <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 8001f46:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	490a      	ldr	r1, [pc, #40]	@ (8001f7c <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4798      	blx	r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da03      	bge.n	8001f6a <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f62:	f06f 0304 	mvn.w	r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e001      	b.n	8001f6e <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000760 	.word	0x20000760
 8001f7c:	2000075c 	.word	0x2000075c

08001f80 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8001f88:	2352      	movs	r3, #82	@ 0x52
 8001f8a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L8CX_I2C_INIT;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <VL53L8CX_Probe+0xd8>)
 8001f8e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L8CX_I2C_DEINIT;
 8001f90:	4b32      	ldr	r3, [pc, #200]	@ (800205c <VL53L8CX_Probe+0xdc>)
 8001f92:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L8CX_I2C_WRITEREG;
 8001f94:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <VL53L8CX_Probe+0xe0>)
 8001f96:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L8CX_I2C_READREG;
 8001f98:	4b32      	ldr	r3, [pc, #200]	@ (8002064 <VL53L8CX_Probe+0xe4>)
 8001f9a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8001f9c:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <VL53L8CX_Probe+0xe8>)
 8001f9e:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&VL53L8CXObj, &IOCtx) != VL53L8CX_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4831      	ldr	r0, [pc, #196]	@ (800206c <VL53L8CX_Probe+0xec>)
 8001fa8:	f000 ffaf 	bl	8002f0a <VL53L8CX_RegisterBusIO>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <VL53L8CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001fb2:	f06f 0304 	mvn.w	r3, #4
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb8:	e049      	b.n	800204e <VL53L8CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8001fba:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <VL53L8CX_Probe+0xf0>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	492d      	ldr	r1, [pc, #180]	@ (8002074 <VL53L8CX_Probe+0xf4>)
 8001fc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L8CXObj;
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <VL53L8CX_Probe+0xf8>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4928      	ldr	r1, [pc, #160]	@ (800206c <VL53L8CX_Probe+0xec>)
 8001fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L8CX_ReadID(&VL53L8CXObj, &id) != VL53L8CX_OK)
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4825      	ldr	r0, [pc, #148]	@ (800206c <VL53L8CX_Probe+0xec>)
 8001fd6:	f001 f848 	bl	800306a <VL53L8CX_ReadID>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <VL53L8CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001fe0:	f06f 0304 	mvn.w	r3, #4
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe6:	e032      	b.n	800204e <VL53L8CX_Probe+0xce>
    }
    else if (id != VL53L8CX_ID)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <VL53L8CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001ff2:	f06f 0306 	mvn.w	r3, #6
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff8:	e029      	b.n	800204e <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L8CX_OK)
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <VL53L8CX_Probe+0xf0>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	491c      	ldr	r1, [pc, #112]	@ (8002078 <VL53L8CX_Probe+0xf8>)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800200c:	4610      	mov	r0, r2
 800200e:	4798      	blx	r3
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002016:	f06f 0304 	mvn.w	r3, #4
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
 800201c:	e017      	b.n	800204e <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 800201e:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <VL53L8CX_Probe+0xf0>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4913      	ldr	r1, [pc, #76]	@ (8002078 <VL53L8CX_Probe+0xf8>)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
                                                           &RANGING_SENSOR_Cap[Instance]) != VL53L8CX_OK)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	4911      	ldr	r1, [pc, #68]	@ (800207c <VL53L8CX_Probe+0xfc>)
 8002036:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8002038:	4611      	mov	r1, r2
 800203a:	4798      	blx	r3
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <VL53L8CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002042:	f06f 0304 	mvn.w	r3, #4
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
 8002048:	e001      	b.n	800204e <VL53L8CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002050:	4618      	mov	r0, r3
 8002052:	3728      	adds	r7, #40	@ 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800296d 	.word	0x0800296d
 800205c:	080029d1 	.word	0x080029d1
 8002060:	08002a21 	.word	0x08002a21
 8002064:	08002a85 	.word	0x08002a85
 8002068:	08002ae9 	.word	0x08002ae9
 800206c:	20000774 	.word	0x20000774
 8002070:	20000760 	.word	0x20000760
 8002074:	20000004 	.word	0x20000004
 8002078:	2000075c 	.word	0x2000075c
 800207c:	20000764 	.word	0x20000764

08002080 <reset_device>:
#endif /* Use custom ranging */

static void reset_device(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	480f      	ldr	r0, [pc, #60]	@ (80020c8 <reset_device+0x48>)
 800208a:	f004 fb45 	bl	8006718 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800208e:	2002      	movs	r0, #2
 8002090:	f003 ff84 	bl	8005f9c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	2180      	movs	r1, #128	@ 0x80
 8002098:	480b      	ldr	r0, [pc, #44]	@ (80020c8 <reset_device+0x48>)
 800209a:	f004 fb3d 	bl	8006718 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800209e:	2002      	movs	r0, #2
 80020a0:	f003 ff7c 	bl	8005f9c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <reset_device+0x4c>)
 80020aa:	f004 fb35 	bl	8006718 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80020ae:	2002      	movs	r0, #2
 80020b0:	f003 ff74 	bl	8005f9c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2101      	movs	r1, #1
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <reset_device+0x4c>)
 80020ba:	f004 fb2d 	bl	8006718 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80020be:	2002      	movs	r0, #2
 80020c0:	f003 ff6c 	bl	8005f9c <HAL_Delay>
#endif /* Use custom ranging */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d4:	f003 fef0 	bl	8005eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d8:	f000 f862 	bl	80021a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020dc:	f000 f91e 	bl	800231c <MX_GPIO_Init>
  MX_I2C3_Init();
 80020e0:	f000 f8ca 	bl	8002278 <MX_I2C3_Init>
  MX_TIM11_Init();
 80020e4:	f000 f8f6 	bl	80022d4 <MX_TIM11_Init>
  MX_TOF_Init();
 80020e8:	f7ff fb06 	bl	80016f8 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the IMU
  MPUXX50_Init(&imu, &hi2c3, AD0_LOW);
 80020ec:	2268      	movs	r2, #104	@ 0x68
 80020ee:	4923      	ldr	r1, [pc, #140]	@ (800217c <main+0xac>)
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <main+0xb0>)
 80020f2:	f7fe ff52 	bl	8000f9a <MPUXX50_Init>

  // Configure IMU
  MPUXX50_SetGyroFullScaleRange(&imu, GFSR_500DPS);
 80020f6:	2101      	movs	r1, #1
 80020f8:	4821      	ldr	r0, [pc, #132]	@ (8002180 <main+0xb0>)
 80020fa:	f7ff f865 	bl	80011c8 <MPUXX50_SetGyroFullScaleRange>
  MPUXX50_SetAccFullScaleRange(&imu, AFSR_4G);
 80020fe:	2101      	movs	r1, #1
 8002100:	481f      	ldr	r0, [pc, #124]	@ (8002180 <main+0xb0>)
 8002102:	f7ff f870 	bl	80011e6 <MPUXX50_SetAccFullScaleRange>
  MPUXX50_SetDeltaTime(&imu, 0.004f);
 8002106:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002184 <main+0xb4>
 800210a:	481d      	ldr	r0, [pc, #116]	@ (8002180 <main+0xb0>)
 800210c:	f7ff f87a 	bl	8001204 <MPUXX50_SetDeltaTime>
  MPUXX50_SetTau(&imu, 0.98f);
 8002110:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002188 <main+0xb8>
 8002114:	481a      	ldr	r0, [pc, #104]	@ (8002180 <main+0xb0>)
 8002116:	f7ff f884 	bl	8001222 <MPUXX50_SetTau>


  // Check if IMU configured properly and block if it didn't
  if (MPUXX50_Begin(&imu) != 1)  // TRUE is usually 1
 800211a:	4819      	ldr	r0, [pc, #100]	@ (8002180 <main+0xb0>)
 800211c:	f7fe ff52 	bl	8000fc4 <MPUXX50_Begin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d00f      	beq.n	8002146 <main+0x76>
  {
      sprintf((char *)serialBuf, "ERROR!\r\n");
 8002126:	4919      	ldr	r1, [pc, #100]	@ (800218c <main+0xbc>)
 8002128:	4819      	ldr	r0, [pc, #100]	@ (8002190 <main+0xc0>)
 800212a:	f007 fc73 	bl	8009a14 <siprintf>
      HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 800212e:	4818      	ldr	r0, [pc, #96]	@ (8002190 <main+0xc0>)
 8002130:	f7fe f8a6 	bl	8000280 <strlen>
 8002134:	4603      	mov	r3, r0
 8002136:	b29a      	uxth	r2, r3
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	4914      	ldr	r1, [pc, #80]	@ (8002190 <main+0xc0>)
 800213e:	4815      	ldr	r0, [pc, #84]	@ (8002194 <main+0xc4>)
 8002140:	f006 fa84 	bl	800864c <HAL_UART_Transmit>
 8002144:	e013      	b.n	800216e <main+0x9e>
  }
  else
  {
	  // Calibrate the IMU
	  sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 8002146:	4914      	ldr	r1, [pc, #80]	@ (8002198 <main+0xc8>)
 8002148:	4811      	ldr	r0, [pc, #68]	@ (8002190 <main+0xc0>)
 800214a:	f007 fc63 	bl	8009a14 <siprintf>
	  HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 800214e:	4810      	ldr	r0, [pc, #64]	@ (8002190 <main+0xc0>)
 8002150:	f7fe f896 	bl	8000280 <strlen>
 8002154:	4603      	mov	r3, r0
 8002156:	b29a      	uxth	r2, r3
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	490c      	ldr	r1, [pc, #48]	@ (8002190 <main+0xc0>)
 800215e:	480d      	ldr	r0, [pc, #52]	@ (8002194 <main+0xc4>)
 8002160:	f006 fa74 	bl	800864c <HAL_UART_Transmit>
	  MPUXX50_CalibrateGyro(&imu, 5000);
 8002164:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <main+0xb0>)
 800216a:	f7ff f869 	bl	8001240 <MPUXX50_CalibrateGyro>

  // Start timer and put processor into an efficient low power mode
  //if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK) {
  //    Error_Handler();
  //}
  printf("Clock enabled...\r\n");
 800216e:	480b      	ldr	r0, [pc, #44]	@ (800219c <main+0xcc>)
 8002170:	f007 fc48 	bl	8009a04 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8002174:	f7ff fac6 	bl	8001704 <MX_TOF_Process>
 8002178:	e7fc      	b.n	8002174 <main+0xa4>
 800217a:	bf00      	nop
 800217c:	20001254 	.word	0x20001254
 8002180:	20001378 	.word	0x20001378
 8002184:	3b83126f 	.word	0x3b83126f
 8002188:	3f7ae148 	.word	0x3f7ae148
 800218c:	0800c438 	.word	0x0800c438
 8002190:	200012f0 	.word	0x200012f0
 8002194:	200013c0 	.word	0x200013c0
 8002198:	0800c444 	.word	0x0800c444
 800219c:	0800c458 	.word	0x0800c458

080021a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b094      	sub	sp, #80	@ 0x50
 80021a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2230      	movs	r2, #48	@ 0x30
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f007 fd28 	bl	8009c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	4b29      	ldr	r3, [pc, #164]	@ (8002270 <SystemClock_Config+0xd0>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <SystemClock_Config+0xd0>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d4:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <SystemClock_Config+0xd0>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <SystemClock_Config+0xd4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021ec:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <SystemClock_Config+0xd4>)
 80021ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xd4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002204:	2301      	movs	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002208:	2310      	movs	r3, #16
 800220a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220c:	2302      	movs	r3, #2
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002214:	2310      	movs	r3, #16
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002218:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800221e:	2304      	movs	r3, #4
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002222:	2307      	movs	r3, #7
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f005 fb14 	bl	8007858 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002236:	f000 f997 	bl	8002568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800224a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f005 fd76 	bl	8007d48 <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002262:	f000 f981 	bl	8002568 <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	@ 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <MX_I2C3_Init+0x50>)
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <MX_I2C3_Init+0x54>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_I2C3_Init+0x50>)
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <MX_I2C3_Init+0x58>)
 8002286:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <MX_I2C3_Init+0x50>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <MX_I2C3_Init+0x50>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <MX_I2C3_Init+0x50>)
 8002296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800229a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <MX_I2C3_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <MX_I2C3_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <MX_I2C3_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <MX_I2C3_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <MX_I2C3_Init+0x50>)
 80022b6:	f004 fa61 	bl	800677c <HAL_I2C_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022c0:	f000 f952 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20001254 	.word	0x20001254
 80022cc:	40005c00 	.word	0x40005c00
 80022d0:	000186a0 	.word	0x000186a0

080022d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <MX_TIM11_Init+0x44>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022e0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80022e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 40-1;
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022ee:	2227      	movs	r2, #39	@ 0x27
 80022f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <MX_TIM11_Init+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_TIM11_Init+0x40>)
 8002300:	f005 ff42 	bl	8008188 <HAL_TIM_Base_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800230a:	f000 f92d 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200012a8 	.word	0x200012a8
 8002318:	40014800 	.word	0x40014800

0800231c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b48      	ldr	r3, [pc, #288]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a47      	ldr	r2, [pc, #284]	@ (8002458 <MX_GPIO_Init+0x13c>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a39      	ldr	r2, [pc, #228]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <MX_GPIO_Init+0x13c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <MX_GPIO_Init+0x13c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a32      	ldr	r2, [pc, #200]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <MX_GPIO_Init+0x13c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2120      	movs	r1, #32
 80023a6:	482d      	ldr	r0, [pc, #180]	@ (800245c <MX_GPIO_Init+0x140>)
 80023a8:	f004 f9b6 	bl	8006718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	482a      	ldr	r0, [pc, #168]	@ (800245c <MX_GPIO_Init+0x140>)
 80023b2:	f004 f9b1 	bl	8006718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2101      	movs	r1, #1
 80023ba:	4829      	ldr	r0, [pc, #164]	@ (8002460 <MX_GPIO_Init+0x144>)
 80023bc:	f004 f9ac 	bl	8006718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4823      	ldr	r0, [pc, #140]	@ (8002464 <MX_GPIO_Init+0x148>)
 80023d8:	f003 ff36 	bl	8006248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023dc:	2310      	movs	r3, #16
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	481a      	ldr	r0, [pc, #104]	@ (800245c <MX_GPIO_Init+0x140>)
 80023f2:	f003 ff29 	bl	8006248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80023f6:	23a0      	movs	r3, #160	@ 0xa0
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4813      	ldr	r0, [pc, #76]	@ (800245c <MX_GPIO_Init+0x140>)
 800240e:	f003 ff1b 	bl	8006248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	480d      	ldr	r0, [pc, #52]	@ (8002460 <MX_GPIO_Init+0x144>)
 800242a:	f003 ff0d 	bl	8006248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	200a      	movs	r0, #10
 8002434:	f003 fed1 	bl	80061da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002438:	200a      	movs	r0, #10
 800243a:	f003 feea 	bl	8006212 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2028      	movs	r0, #40	@ 0x28
 8002444:	f003 fec9 	bl	80061da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002448:	2028      	movs	r0, #40	@ 0x28
 800244a:	f003 fee2 	bl	8006212 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	@ 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800

08002468 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800246c:	b09e      	sub	sp, #120	@ 0x78
 800246e:	af0c      	add	r7, sp, #48	@ 0x30
 8002470:	6478      	str	r0, [r7, #68]	@ 0x44
    // Callback, timer has rolled over
    if (htim == &htim11)
 8002472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002474:	4a36      	ldr	r2, [pc, #216]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d165      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0xde>
    {
        HAL_ResumeTick();
 800247a:	f003 fdc3 	bl	8006004 <HAL_ResumeTick>

        // Calculate attitude using the IMU in C
        attitude = MPUXX50_CalcAttitude(&imu);
 800247e:	4c35      	ldr	r4, [pc, #212]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	4934      	ldr	r1, [pc, #208]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f80a 	bl	80014a0 <MPUXX50_CalcAttitude>
 800248c:	4625      	mov	r5, r4
 800248e:	f107 0418 	add.w	r4, r7, #24
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	602b      	str	r3, [r5, #0]

        // Transmit attitude over UART
        sprintf((char *)serialBuf, "%.1f,%.1f,%.1f,%.4f,%.4f,%.4f,%.4f\r\n", attitude.r, attitude.p, attitude.yaw, attitude.y, attitude.z, attitude.vy, attitude.vz);
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f858 	bl	8000558 <__aeabi_f2d>
 80024a8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f851 	bl	8000558 <__aeabi_f2d>
 80024b6:	4680      	mov	r8, r0
 80024b8:	4689      	mov	r9, r1
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f84a 	bl	8000558 <__aeabi_f2d>
 80024c4:	4682      	mov	sl, r0
 80024c6:	468b      	mov	fp, r1
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f843 	bl	8000558 <__aeabi_f2d>
 80024d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f83c 	bl	8000558 <__aeabi_f2d>
 80024e0:	e9c7 0100 	strd	r0, r1, [r7]
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f835 	bl	8000558 <__aeabi_f2d>
 80024ee:	4604      	mov	r4, r0
 80024f0:	460d      	mov	r5, r1
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f82e 	bl	8000558 <__aeabi_f2d>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002504:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002508:	ed97 7b00 	vldr	d7, [r7]
 800250c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002510:	ed97 7b02 	vldr	d7, [r7, #8]
 8002514:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002518:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800251c:	e9cd 8900 	strd	r8, r9, [sp]
 8002520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002524:	490d      	ldr	r1, [pc, #52]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002526:	480e      	ldr	r0, [pc, #56]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002528:	f007 fa74 	bl	8009a14 <siprintf>
        HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800252e:	f7fd fea7 	bl	8000280 <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	b29a      	uxth	r2, r3
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	4909      	ldr	r1, [pc, #36]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800253c:	4809      	ldr	r0, [pc, #36]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800253e:	f006 f885 	bl	800864c <HAL_UART_Transmit>

        HAL_SuspendTick();
 8002542:	f003 fd4f 	bl	8005fe4 <HAL_SuspendTick>
    }
}
 8002546:	bf00      	nop
 8002548:	3748      	adds	r7, #72	@ 0x48
 800254a:	46bd      	mov	sp, r7
 800254c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002550:	200012a8 	.word	0x200012a8
 8002554:	20001354 	.word	0x20001354
 8002558:	20001378 	.word	0x20001378
 800255c:	0800c46c 	.word	0x0800c46c
 8002560:	200012f0 	.word	0x200012f0
 8002564:	200013c0 	.word	0x200013c0

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <Error_Handler+0x8>

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_MspInit+0x4c>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_MspInit+0x4c>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025b2:	2007      	movs	r0, #7
 80025b4:	f003 fe06 	bl	80061c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_I2C_MspInit+0xc0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d14a      	bne.n	800267c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a26      	ldr	r2, [pc, #152]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800261e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002624:	2312      	movs	r3, #18
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002630:	2304      	movs	r3, #4
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4814      	ldr	r0, [pc, #80]	@ (800268c <HAL_I2C_MspInit+0xc8>)
 800263c:	f003 fe04 	bl	8006248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002640:	2310      	movs	r3, #16
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002650:	2309      	movs	r3, #9
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	480d      	ldr	r0, [pc, #52]	@ (8002690 <HAL_I2C_MspInit+0xcc>)
 800265c:	f003 fdf4 	bl	8006248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 800266a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800266e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_I2C_MspInit+0xc4>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	@ 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40005c00 	.word	0x40005c00
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400

08002694 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <HAL_I2C_MspDeInit+0x38>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10e      	bne.n	80026c4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_I2C_MspDeInit+0x3c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_I2C_MspDeInit+0x3c>)
 80026ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026b0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80026b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026b6:	4807      	ldr	r0, [pc, #28]	@ (80026d4 <HAL_I2C_MspDeInit+0x40>)
 80026b8:	f003 ff4a 	bl	8006550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80026bc:	2110      	movs	r1, #16
 80026be:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <HAL_I2C_MspDeInit+0x44>)
 80026c0:	f003 ff46 	bl	8006550 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40005c00 	.word	0x40005c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400

080026dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <HAL_TIM_Base_MspInit+0x58>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d11d      	bne.n	800272a <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_TIM_Base_MspInit+0x5c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_TIM_Base_MspInit+0x5c>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_TIM_Base_MspInit+0x5c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	201a      	movs	r0, #26
 8002710:	f003 fd63 	bl	80061da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002714:	201a      	movs	r0, #26
 8002716:	f003 fd7c 	bl	8006212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	201a      	movs	r0, #26
 8002720:	f003 fd5b 	bl	80061da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002724:	201a      	movs	r0, #26
 8002726:	f003 fd74 	bl	8006212 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40014800 	.word	0x40014800
 8002738:	40023800 	.word	0x40023800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <NMI_Handler+0x4>

08002744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <HardFault_Handler+0x4>

0800274c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <MemManage_Handler+0x4>

08002754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002792:	f003 fbe3 	bl	8005f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800279e:	2010      	movs	r0, #16
 80027a0:	f003 ffd4 	bl	800674c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80027ae:	f005 fd3a 	bl	8008226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200012a8 	.word	0x200012a8

080027bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027c4:	f003 ffc2 	bl	800674c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}

080027cc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d903      	bls.n	80027e8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027e0:	f06f 0301 	mvn.w	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e025      	b.n	8002834 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	4914      	ldr	r1, [pc, #80]	@ (8002840 <BSP_COM_Init+0x74>)
 80027ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80027f2:	4814      	ldr	r0, [pc, #80]	@ (8002844 <BSP_COM_Init+0x78>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002800:	79fa      	ldrb	r2, [r7, #7]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4a0e      	ldr	r2, [pc, #56]	@ (8002844 <BSP_COM_Init+0x78>)
 800280c:	4413      	add	r3, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f864 	bl	80028dc <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <BSP_COM_Init+0x78>)
 8002820:	4413      	add	r3, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f810 	bl	8002848 <MX_USART2_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800282e:	f06f 0303 	mvn.w	r3, #3
 8002832:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002834:	68fb      	ldr	r3, [r7, #12]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000
 8002844:	200013c0 	.word	0x200013c0

08002848 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <MX_USART2_UART_Init+0x58>)
 8002858:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002860:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 fe86 	bl	8008598 <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40004400 	.word	0x40004400

080028a4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <__io_putchar+0x30>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <__io_putchar+0x34>)
 80028bc:	1898      	adds	r0, r3, r2
 80028be:	1d39      	adds	r1, r7, #4
 80028c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c4:	2201      	movs	r2, #1
 80028c6:	f005 fec1 	bl	800864c <HAL_UART_Transmit>
  return ch;
 80028ca:	687b      	ldr	r3, [r7, #4]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20001408 	.word	0x20001408
 80028d8:	200013c0 	.word	0x200013c0

080028dc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	@ 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <USART2_MspInit+0x88>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <USART2_MspInit+0x88>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <USART2_MspInit+0x88>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <USART2_MspInit+0x88>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <USART2_MspInit+0x88>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <USART2_MspInit+0x88>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800291c:	2304      	movs	r3, #4
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800292c:	2307      	movs	r3, #7
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480c      	ldr	r0, [pc, #48]	@ (8002968 <USART2_MspInit+0x8c>)
 8002938:	f003 fc86 	bl	8006248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800293c:	2308      	movs	r3, #8
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800294c:	2307      	movs	r3, #7
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4804      	ldr	r0, [pc, #16]	@ (8002968 <USART2_MspInit+0x8c>)
 8002958:	f003 fc76 	bl	8006248 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	@ 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000

0800296c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <BSP_I2C1_Init+0x58>)
 8002978:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <BSP_I2C1_Init+0x5c>)
 800297a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <BSP_I2C1_Init+0x60>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4912      	ldr	r1, [pc, #72]	@ (80029cc <BSP_I2C1_Init+0x60>)
 8002984:	600a      	str	r2, [r1, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d117      	bne.n	80029ba <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800298a:	480e      	ldr	r0, [pc, #56]	@ (80029c4 <BSP_I2C1_Init+0x58>)
 800298c:	f004 fb96 	bl	80070bc <HAL_I2C_GetState>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d111      	bne.n	80029ba <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002996:	480b      	ldr	r0, [pc, #44]	@ (80029c4 <BSP_I2C1_Init+0x58>)
 8002998:	f000 f8e2 	bl	8002b60 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10b      	bne.n	80029ba <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80029a2:	4808      	ldr	r0, [pc, #32]	@ (80029c4 <BSP_I2C1_Init+0x58>)
 80029a4:	f000 f8a8 	bl	8002af8 <MX_I2C1_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80029ae:	f06f 0307 	mvn.w	r3, #7
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80029ba:	687b      	ldr	r3, [r7, #4]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000140c 	.word	0x2000140c
 80029c8:	40005400 	.word	0x40005400
 80029cc:	20001460 	.word	0x20001460

080029d0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80029da:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <BSP_I2C1_DeInit+0x48>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d014      	beq.n	8002a0c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80029e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <BSP_I2C1_DeInit+0x48>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a18 <BSP_I2C1_DeInit+0x48>)
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <BSP_I2C1_DeInit+0x48>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80029f4:	4809      	ldr	r0, [pc, #36]	@ (8002a1c <BSP_I2C1_DeInit+0x4c>)
 80029f6:	f000 f8fd 	bl	8002bf4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80029fa:	4808      	ldr	r0, [pc, #32]	@ (8002a1c <BSP_I2C1_DeInit+0x4c>)
 80029fc:	f004 f802 	bl	8006a04 <HAL_I2C_DeInit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002a06:	f06f 0307 	mvn.w	r3, #7
 8002a0a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20001460 	.word	0x20001460
 8002a1c:	2000140c 	.word	0x2000140c

08002a20 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	@ 0x28
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	60ba      	str	r2, [r7, #8]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	81fb      	strh	r3, [r7, #14]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	81bb      	strh	r3, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a3a:	89ba      	ldrh	r2, [r7, #12]
 8002a3c:	89f9      	ldrh	r1, [r7, #14]
 8002a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	480c      	ldr	r0, [pc, #48]	@ (8002a80 <BSP_I2C1_WriteReg16+0x60>)
 8002a50:	f004 f808 	bl	8006a64 <HAL_I2C_Mem_Write>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a5a:	4809      	ldr	r0, [pc, #36]	@ (8002a80 <BSP_I2C1_WriteReg16+0x60>)
 8002a5c:	f004 fb3c 	bl	80070d8 <HAL_I2C_GetError>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d103      	bne.n	8002a6e <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a66:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e002      	b.n	8002a74 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002a6e:	f06f 0303 	mvn.w	r3, #3
 8002a72:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a74:	697b      	ldr	r3, [r7, #20]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000140c 	.word	0x2000140c

08002a84 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	81fb      	strh	r3, [r7, #14]
 8002a92:	460b      	mov	r3, r1
 8002a94:	81bb      	strh	r3, [r7, #12]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a9e:	89ba      	ldrh	r2, [r7, #12]
 8002aa0:	89f9      	ldrh	r1, [r7, #14]
 8002aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <BSP_I2C1_ReadReg16+0x60>)
 8002ab4:	f004 f8d0 	bl	8006c58 <HAL_I2C_Mem_Read>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002abe:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <BSP_I2C1_ReadReg16+0x60>)
 8002ac0:	f004 fb0a 	bl	80070d8 <HAL_I2C_GetError>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d003      	beq.n	8002ad2 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002aca:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e002      	b.n	8002ad8 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002ad2:	f06f 0303 	mvn.w	r3, #3
 8002ad6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002ad8:	697b      	ldr	r3, [r7, #20]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000140c 	.word	0x2000140c

08002ae8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002aec:	f003 fa4a 	bl	8005f84 <HAL_GetTick>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <MX_I2C1_Init+0x60>)
 8002b08:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <MX_I2C1_Init+0x64>)
 8002b0e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b22:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f003 fe1d 	bl	800677c <HAL_I2C_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	00061a80 	.word	0x00061a80

08002b60 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b78:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8a:	2312      	movs	r3, #18
 8002b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002b96:	2304      	movs	r3, #4
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4813      	ldr	r0, [pc, #76]	@ (8002bf0 <I2C1_MspInit+0x90>)
 8002ba2:	f003 fb51 	bl	8006248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bac:	2312      	movs	r3, #18
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480b      	ldr	r0, [pc, #44]	@ (8002bf0 <I2C1_MspInit+0x90>)
 8002bc4:	f003 fb40 	bl	8006248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002bd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd8:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <I2C1_MspInit+0x8c>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <I2C1_MspDeInit+0x30>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <I2C1_MspDeInit+0x30>)
 8002c02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c0c:	4806      	ldr	r0, [pc, #24]	@ (8002c28 <I2C1_MspDeInit+0x34>)
 8002c0e:	f003 fc9f 	bl	8006550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002c12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c16:	4804      	ldr	r0, [pc, #16]	@ (8002c28 <I2C1_MspDeInit+0x34>)
 8002c18:	f003 fc9a 	bl	8006550 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020400 	.word	0x40020400

08002c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_kill>:

int _kill(int pid, int sig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c46:	f007 f82f 	bl	8009ca8 <__errno>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2216      	movs	r2, #22
 8002c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_exit>:

void _exit (int status)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffe7 	bl	8002c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c6e:	bf00      	nop
 8002c70:	e7fd      	b.n	8002c6e <_exit+0x12>

08002c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e00a      	b.n	8002c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c84:	f3af 8000 	nop.w
 8002c88:	4601      	mov	r1, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	60ba      	str	r2, [r7, #8]
 8002c90:	b2ca      	uxtb	r2, r1
 8002c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3301      	adds	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dbf0      	blt.n	8002c84 <_read+0x12>
  }

  return len;
 8002ca2:	687b      	ldr	r3, [r7, #4]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e009      	b.n	8002cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	60ba      	str	r2, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fdec 	bl	80028a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dbf1      	blt.n	8002cbe <_write+0x12>
  }
  return len;
 8002cda:	687b      	ldr	r3, [r7, #4]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_close>:

int _close(int file)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_isatty>:

int _isatty(int file)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	@ (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f006 ff94 	bl	8009ca8 <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20018000 	.word	0x20018000
 8002dac:	00000800 	.word	0x00000800
 8002db0:	20001464 	.word	0x20001464
 8002db4:	20001e08 	.word	0x20001e08

08002db8 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689c      	ldr	r4, [r3, #8]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8818      	ldrh	r0, [r3, #0]
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	47a0      	blx	r4
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	b2db      	uxtb	r3, r3
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]
 8002dee:	4613      	mov	r3, r2
 8002df0:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685c      	ldr	r4, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8818      	ldrh	r0, [r3, #0]
 8002dfa:	1c7a      	adds	r2, r7, #1
 8002dfc:	8879      	ldrh	r1, [r7, #2]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	47a0      	blx	r4
 8002e02:	4603      	mov	r3, r0
 8002e04:	b2db      	uxtb	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002e0e:	b590      	push	{r4, r7, lr}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685c      	ldr	r4, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8818      	ldrh	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	47a0      	blx	r4
 8002e30:	4603      	mov	r3, r0
 8002e32:	b2db      	uxtb	r3, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689c      	ldr	r4, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8818      	ldrh	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	47a0      	blx	r4
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b2db      	uxtb	r3, r3
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}

08002e6a <VL53L8CX_SwapBuffer>:

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e021      	b.n	8002ec0 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	440b      	add	r3, r1
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3302      	adds	r3, #2
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	440b      	add	r3, r1
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	3203      	adds	r2, #3
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	4313      	orrs	r3, r2
		tmp = (
 8002eae:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3d9      	bcc.n	8002e7c <VL53L8CX_SwapBuffer+0x12>
	}
}	
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4798      	blx	r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8002eea:	bf00      	nop
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4798      	blx	r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f5      	bhi.n	8002eec <VL53L8CX_WaitMs+0x16>

  return 0;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <VL53L8CX_RegisterBusIO+0x16>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002f20:	f06f 0301 	mvn.w	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e033      	b.n	8002f90 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	891a      	ldrh	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	891a      	ldrh	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4798      	blx	r3
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	e002      	b.n	8002f90 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f90:	68fb      	ldr	r3, [r7, #12]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8002fa8:	f06f 0301 	mvn.w	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e02e      	b.n	800300e <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e025      	b.n	800300e <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f878 	bl	80040bc <vl53l8cx_init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e019      	b.n	800300e <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L8CX_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003026:	f06f 0301 	mvn.w	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e018      	b.n	8003060 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8003034:	2b01      	cmp	r3, #1
 8003036:	d110      	bne.n	800305a <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4798      	blx	r3
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e009      	b.n	8003060 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8003058:	e002      	b.n	8003060 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003060:	68fb      	ldr	r3, [r7, #12]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <VL53L8CX_ReadID+0x22>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800308c:	f06f 0301 	mvn.w	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e045      	b.n	8003120 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3318      	adds	r3, #24
 8003098:	2200      	movs	r2, #0
 800309a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe9f 	bl	8002de2 <VL53L8CX_WrByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3318      	adds	r3, #24
 80030b2:	f107 020a 	add.w	r2, r7, #10
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fe7d 	bl	8002db8 <VL53L8CX_RdByte>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3318      	adds	r3, #24
 80030cc:	f107 0209 	add.w	r2, r7, #9
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe70 	bl	8002db8 <VL53L8CX_RdByte>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	4313      	orrs	r3, r2
 80030e0:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3318      	adds	r3, #24
 80030e6:	2202      	movs	r2, #2
 80030e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fe78 	bl	8002de2 <VL53L8CX_WrByte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 80030fc:	7afb      	ldrb	r3, [r7, #11]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8003102:	7abb      	ldrb	r3, [r7, #10]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	7a7a      	ldrb	r2, [r7, #9]
 8003108:	441a      	add	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e005      	b.n	8003120 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003120:	68fb      	ldr	r3, [r7, #12]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <VL53L8CX_GetCapabilities+0x16>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d103      	bne.n	8003148 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003140:	f06f 0301 	mvn.w	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e00d      	b.n	8003164 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003164:	68fb      	ldr	r3, [r7, #12]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <VL53L8CX_ConfigProfile+0x4c>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 80031a0:	7c7b      	ldrb	r3, [r7, #17]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d822      	bhi.n	80031ee <VL53L8CX_ConfigProfile+0x7a>
 80031a8:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <VL53L8CX_ConfigProfile+0x3c>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031c7 	.word	0x080031c7
 80031b4:	080031d1 	.word	0x080031d1
 80031b8:	080031db 	.word	0x080031db
 80031bc:	080031e5 	.word	0x080031e5
    return VL53L8CX_INVALID_PARAM;
 80031c0:	f06f 0301 	mvn.w	r3, #1
 80031c4:	e070      	b.n	80032a8 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80031c6:	2310      	movs	r3, #16
 80031c8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80031ca:	2301      	movs	r3, #1
 80031cc:	74bb      	strb	r3, [r7, #18]
    break;
 80031ce:	e016      	b.n	80031fe <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80031d0:	2310      	movs	r3, #16
 80031d2:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80031d4:	2303      	movs	r3, #3
 80031d6:	74bb      	strb	r3, [r7, #18]
    break;
 80031d8:	e011      	b.n	80031fe <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80031da:	2340      	movs	r3, #64	@ 0x40
 80031dc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80031de:	2301      	movs	r3, #1
 80031e0:	74bb      	strb	r3, [r7, #18]
    break;
 80031e2:	e00c      	b.n	80031fe <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80031e8:	2303      	movs	r3, #3
 80031ea:	74bb      	strb	r3, [r7, #18]
    break;
 80031ec:	e007      	b.n	80031fe <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80031ee:	2300      	movs	r3, #0
 80031f0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80031f2:	2300      	movs	r3, #0
 80031f4:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 80031f6:	f06f 0301 	mvn.w	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
    break;
 80031fc:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	e04f      	b.n	80032a8 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3318      	adds	r3, #24
 800320c:	7cfa      	ldrb	r2, [r7, #19]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f002 f9cc 	bl	80055ae <vl53l8cx_set_resolution>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e040      	b.n	80032a6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3318      	adds	r3, #24
 8003228:	7cba      	ldrb	r2, [r7, #18]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fae8 	bl	8005802 <vl53l8cx_set_ranging_mode>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e032      	b.n	80032a6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3318      	adds	r3, #24
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	4618      	mov	r0, r3
 8003248:	f002 faa6 	bl	8005798 <vl53l8cx_set_integration_time_ms>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e025      	b.n	80032a6 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3318      	adds	r3, #24
 800325e:	7afa      	ldrb	r2, [r7, #11]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f002 fa77 	bl	8005756 <vl53l8cx_set_ranging_frequency_hz>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e017      	b.n	80032a6 <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L8CX_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80032a6:	697b      	ldr	r3, [r7, #20]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 80032ba:	f06f 0303 	mvn.w	r3, #3
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <VL53L8CX_ConfigIT+0x1a>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80032e6:	f06f 0301 	mvn.w	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e09f      	b.n	800342e <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2bff      	cmp	r3, #255	@ 0xff
 80032f4:	d113      	bne.n	800331e <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3318      	adds	r3, #24
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 fc2b 	bl	8005b58 <vl53l8cx_set_detection_thresholds_enable>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	7abb      	ldrb	r3, [r7, #10]
 8003308:	4313      	orrs	r3, r2
 800330a:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800330c:	7abb      	ldrb	r3, [r7, #10]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <VL53L8CX_ConfigIT+0x4c>
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	e000      	b.n	800331a <VL53L8CX_ConfigIT+0x4e>
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e087      	b.n	800342e <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3318      	adds	r3, #24
 8003322:	f107 0209 	add.w	r2, r7, #9
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f002 f91b 	bl	8005564 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	72fb      	strb	r3, [r7, #11]
 8003332:	e044      	b.n	80033be <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003334:	7afa      	ldrb	r2, [r7, #11]
 8003336:	4940      	ldr	r1, [pc, #256]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	330a      	adds	r3, #10
 8003344:	7afa      	ldrb	r2, [r7, #11]
 8003346:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8003348:	7afa      	ldrb	r2, [r7, #11]
 800334a:	493b      	ldr	r1, [pc, #236]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3308      	adds	r3, #8
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	7afa      	ldrb	r2, [r7, #11]
 8003362:	b2d8      	uxtb	r0, r3
 8003364:	4934      	ldr	r1, [pc, #208]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3309      	adds	r3, #9
 8003372:	4602      	mov	r2, r0
 8003374:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 8003376:	7afa      	ldrb	r2, [r7, #11]
 8003378:	492f      	ldr	r1, [pc, #188]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	330b      	adds	r3, #11
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	7afa      	ldrb	r2, [r7, #11]
 8003390:	4618      	mov	r0, r3
 8003392:	4929      	ldr	r1, [pc, #164]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	7afa      	ldrb	r2, [r7, #11]
 80033a6:	4618      	mov	r0, r3
 80033a8:	4923      	ldr	r1, [pc, #140]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3304      	adds	r3, #4
 80033b6:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	3301      	adds	r3, #1
 80033bc:	72fb      	strb	r3, [r7, #11]
 80033be:	7a7b      	ldrb	r3, [r7, #9]
 80033c0:	7afa      	ldrb	r2, [r7, #11]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3b6      	bcc.n	8003334 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 80033c6:	7afa      	ldrb	r2, [r7, #11]
 80033c8:	491b      	ldr	r1, [pc, #108]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	330a      	adds	r3, #10
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	7afa      	ldrb	r2, [r7, #11]
 80033da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033de:	b2d8      	uxtb	r0, r3
 80033e0:	4915      	ldr	r1, [pc, #84]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	330a      	adds	r3, #10
 80033ee:	4602      	mov	r2, r0
 80033f0:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3318      	adds	r3, #24
 80033f6:	4910      	ldr	r1, [pc, #64]	@ (8003438 <VL53L8CX_ConfigIT+0x16c>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fbf3 	bl	8005be4 <vl53l8cx_set_detection_thresholds>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	7abb      	ldrb	r3, [r7, #10]
 8003404:	4313      	orrs	r3, r2
 8003406:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3318      	adds	r3, #24
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fba2 	bl	8005b58 <vl53l8cx_set_detection_thresholds_enable>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	7abb      	ldrb	r3, [r7, #10]
 800341a:	4313      	orrs	r3, r2
 800341c:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800341e:	7abb      	ldrb	r3, [r7, #10]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <VL53L8CX_ConfigIT+0x15e>
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	e000      	b.n	800342c <VL53L8CX_ConfigIT+0x160>
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20001468 	.word	0x20001468

0800343c <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L8CX_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <VL53L8CX_GetDistance+0x1a>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <VL53L8CX_GetDistance+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003456:	f06f 0301 	mvn.w	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e007      	b.n	800346e <VL53L8CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <VL53L8CX_GetDistance+0x32>
  {
    ret = VL53L8CX_ERROR;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == VL53L8CX_OK)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d110      	bne.n	8003496 <VL53L8CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 800347a:	2b01      	cmp	r3, #1
 800347c:	d106      	bne.n	800348c <VL53L8CX_GetDistance+0x50>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 800347e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f939 	bl	80036fa <vl53l8cx_poll_for_measurement>
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	e004      	b.n	8003496 <VL53L8CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 800348c:	2100      	movs	r1, #0
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f933 	bl	80036fa <vl53l8cx_poll_for_measurement>
 8003494:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <VL53L8CX_GetDistance+0x6a>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f95e 	bl	8003760 <vl53l8cx_get_result>
 80034a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80034c0:	f06f 0301 	mvn.w	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e04c      	b.n	8003562 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 fb8b 	bl	8004be8 <vl53l8cx_start_ranging>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d141      	bne.n	800355c <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d82f      	bhi.n	800354c <VL53L8CX_Start+0x9c>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <VL53L8CX_Start+0x44>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003517 	.word	0x08003517
 80034fc:	08003529 	.word	0x08003529
 8003500:	0800353b 	.word	0x0800353b
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003514:	e025      	b.n	8003562 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003526:	e01c      	b.n	8003562 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003538:	e013      	b.n	8003562 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 800354a:	e00a      	b.n	8003562 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L8CX_INVALID_PARAM;
 8003554:	f06f 0301 	mvn.w	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
        break;
 800355a:	e002      	b.n	8003562 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800357a:	f06f 0301 	mvn.w	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e01a      	b.n	80035b8 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e011      	b.n	80035b8 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3318      	adds	r3, #24
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fcbb 	bl	8004f14 <vl53l8cx_stop_ranging>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e002      	b.n	80035b8 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80035d2:	f06f 0301 	mvn.w	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e015      	b.n	8003606 <VL53L8CX_SetAddress+0x44>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3318      	adds	r3, #24
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 f995 	bl	8004914 <vl53l8cx_set_i2c_address>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <VL53L8CX_SetAddress+0x36>
  {
    ret = VL53L8CX_ERROR;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e006      	b.n	8003606 <VL53L8CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <VL53L8CX_GetAddress+0x16>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003626:	f06f 0301 	mvn.w	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e006      	b.n	800363c <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	891b      	ldrh	r3, [r3, #8]
 8003632:	461a      	mov	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800365a:	f06f 0301 	mvn.w	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e01a      	b.n	8003698 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <VL53L8CX_SetPowerMode+0x2c>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d003      	beq.n	8003676 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 800366e:	f06f 0301 	mvn.w	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e010      	b.n	8003698 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3318      	adds	r3, #24
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f9d3 	bl	8004a2c <vl53l8cx_set_power_mode>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e001      	b.n	8003698 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <VL53L8CX_GetPowerMode+0x16>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 80036b8:	f06f 0301 	mvn.w	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e017      	b.n	80036f0 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3318      	adds	r3, #24
 80036c4:	f107 020b 	add.w	r2, r7, #11
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f958 	bl	8004980 <vl53l8cx_get_power_mode>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e005      	b.n	80036f0 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	461a      	mov	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80036f0:	68fb      	ldr	r3, [r7, #12]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800370e:	f06f 0301 	mvn.w	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e01f      	b.n	8003756 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 8003716:	f06f 0302 	mvn.w	r3, #2
 800371a:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3318      	adds	r3, #24
 800372a:	f107 020f 	add.w	r2, r7, #15
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fcbf 	bl	80050b4 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
        break;
 8003740:	e009      	b.n	8003756 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4798      	blx	r3
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d8e7      	bhi.n	8003726 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003756:	697b      	ldr	r3, [r7, #20]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <vl53l8cx_get_result+0x16>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8003776:	f06f 0301 	mvn.w	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e0cf      	b.n	800391e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3318      	adds	r3, #24
 8003782:	f107 0208 	add.w	r2, r7, #8
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f001 feeb 	bl	8005564 <vl53l8cx_get_resolution>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e0c0      	b.n	800391e <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3318      	adds	r3, #24
 80037a0:	4961      	ldr	r1, [pc, #388]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fcd6 	bl	8005154 <vl53l8cx_get_ranging_data>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e0b3      	b.n	800391e <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 80037b6:	7a3b      	ldrb	r3, [r7, #8]
 80037b8:	461a      	mov	r2, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	72fb      	strb	r3, [r7, #11]
 80037c2:	e0a5      	b.n	8003910 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	7afa      	ldrb	r2, [r7, #11]
 80037c8:	4957      	ldr	r1, [pc, #348]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 80037ca:	440b      	add	r3, r1
 80037cc:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3304      	adds	r3, #4
 80037de:	4602      	mov	r2, r0
 80037e0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	72bb      	strb	r3, [r7, #10]
 80037e6:	e087      	b.n	80038f8 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80037e8:	7afa      	ldrb	r2, [r7, #11]
 80037ea:	7abb      	ldrb	r3, [r7, #10]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 80037f0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037fc:	7afa      	ldrb	r2, [r7, #11]
 80037fe:	7ab8      	ldrb	r0, [r7, #10]
 8003800:	461c      	mov	r4, r3
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	4403      	add	r3, r0
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8003818:	2b01      	cmp	r3, #1
 800381a:	d116      	bne.n	800384a <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	4a42      	ldr	r2, [pc, #264]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	7afa      	ldrb	r2, [r7, #11]
 8003828:	7ab8      	ldrb	r0, [r7, #10]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	4403      	add	r3, r0
 800383c:	3302      	adds	r3, #2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3308      	adds	r3, #8
 8003844:	edc3 7a00 	vstr	s15, [r3]
 8003848:	e00d      	b.n	8003866 <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800384a:	7afa      	ldrb	r2, [r7, #11]
 800384c:	7ab8      	ldrb	r0, [r7, #10]
 800384e:	6839      	ldr	r1, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	4403      	add	r3, r0
 8003858:	3302      	adds	r3, #2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3308      	adds	r3, #8
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 800386c:	2b01      	cmp	r3, #1
 800386e:	d119      	bne.n	80038a4 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8003870:	7afa      	ldrb	r2, [r7, #11]
 8003872:	7abb      	ldrb	r3, [r7, #10]
 8003874:	4413      	add	r3, r2
 8003876:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 8003878:	3390      	adds	r3, #144	@ 0x90
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003880:	7afa      	ldrb	r2, [r7, #11]
 8003882:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	4403      	add	r3, r0
 8003896:	3304      	adds	r3, #4
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	3304      	adds	r3, #4
 800389e:	edc3 7a00 	vstr	s15, [r3]
 80038a2:	e00d      	b.n	80038c0 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80038a4:	7afa      	ldrb	r2, [r7, #11]
 80038a6:	7ab8      	ldrb	r0, [r7, #10]
 80038a8:	6839      	ldr	r1, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	4403      	add	r3, r0
 80038b2:	3304      	adds	r3, #4
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3304      	adds	r3, #4
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80038c0:	7afa      	ldrb	r2, [r7, #11]
 80038c2:	7abb      	ldrb	r3, [r7, #10]
 80038c4:	4413      	add	r3, r2
 80038c6:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 80038c8:	4413      	add	r3, r2
 80038ca:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 80038ce:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 80038d0:	7a7b      	ldrb	r3, [r7, #9]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f82a 	bl	800392c <vl53l8cx_map_target_status>
 80038d8:	4603      	mov	r3, r0
 80038da:	7afa      	ldrb	r2, [r7, #11]
 80038dc:	7ab8      	ldrb	r0, [r7, #10]
 80038de:	461c      	mov	r4, r3
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	4403      	add	r3, r0
 80038ea:	3302      	adds	r3, #2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 80038f2:	7abb      	ldrb	r3, [r7, #10]
 80038f4:	3301      	adds	r3, #1
 80038f6:	72bb      	strb	r3, [r7, #10]
 80038f8:	7afb      	ldrb	r3, [r7, #11]
 80038fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <vl53l8cx_get_result+0x1c8>)
 80038fc:	4413      	add	r3, r2
 80038fe:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8003902:	7aba      	ldrb	r2, [r7, #10]
 8003904:	429a      	cmp	r2, r3
 8003906:	f4ff af6f 	bcc.w	80037e8 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	3301      	adds	r3, #1
 800390e:	72fb      	strb	r3, [r7, #11]
 8003910:	7a3b      	ldrb	r3, [r7, #8]
 8003912:	7afa      	ldrb	r2, [r7, #11]
 8003914:	429a      	cmp	r2, r3
 8003916:	f4ff af55 	bcc.w	80037c4 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	20001768 	.word	0x20001768

0800392c <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d002      	beq.n	8003942 <vl53l8cx_map_target_status+0x16>
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d102      	bne.n	8003948 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e007      	b.n	8003958 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800394e:	23ff      	movs	r3, #255	@ 0xff
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e001      	b.n	8003958 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	461a      	mov	r2, r3
 8003974:	4603      	mov	r3, r0
 8003976:	70fb      	strb	r3, [r7, #3]
 8003978:	460b      	mov	r3, r1
 800397a:	70bb      	strb	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8003988:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	8839      	ldrh	r1, [r7, #0]
 8003994:	f7ff fa52 	bl	8002e3c <VL53L8CX_RdMulti>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	4313      	orrs	r3, r2
 80039a0:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	210a      	movs	r1, #10
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fa95 	bl	8002ed6 <VL53L8CX_WaitMs>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80039ba:	d904      	bls.n	80039c6 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
			break;
 80039c4:	e01a      	b.n	80039fc <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d909      	bls.n	80039e0 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80039d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80039d4:	d904      	bls.n	80039e0 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80039dc:	73fb      	strb	r3, [r7, #15]
			break;
 80039de:	e00d      	b.n	80039fc <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	3301      	adds	r3, #1
 80039e4:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80039e6:	78bb      	ldrb	r3, [r7, #2]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80039f0:	7e3b      	ldrb	r3, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	7f3a      	ldrb	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1c5      	bne.n	8003988 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f107 020b 	add.w	r2, r7, #11
 8003a1c:	2106      	movs	r1, #6
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f9ca 	bl	8002db8 <VL53L8CX_RdByte>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da10      	bge.n	8003a58 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f107 020a 	add.w	r2, r7, #10
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f9ba 	bl	8002db8 <VL53L8CX_RdByte>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8003a4e:	7abb      	ldrb	r3, [r7, #10]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa3a 	bl	8002ed6 <VL53L8CX_WaitMs>
		timeout++;
 8003a62:	89bb      	ldrh	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8003a68:	7afb      	ldrb	r3, [r7, #11]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8003a72:	89bb      	ldrh	r3, [r7, #12]
 8003a74:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a78:	d3cd      	bcc.n	8003a16 <_vl53l8cx_poll_for_mcu_boot+0x10>
 8003a7a:	e002      	b.n	8003a82 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8003a80:	bf00      	nop

   return status;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0ea      	sub	sp, #424	@ 0x1a8
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003a96:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a9a:	6018      	str	r0, [r3, #0]
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003aa2:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003aa6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8003aae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ab2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ab6:	4ad9      	ldr	r2, [pc, #868]	@ (8003e1c <_vl53l8cx_send_offset_data+0x390>)
 8003ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003abc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8003ac0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ac4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ac8:	4ad5      	ldr	r2, [pc, #852]	@ (8003e20 <_vl53l8cx_send_offset_data+0x394>)
 8003aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ace:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8003ad2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ad6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8003ae0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ae4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8003aec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003af0:	4619      	mov	r1, r3
 8003af2:	f006 f906 	bl	8009d02 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 8003af6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003afa:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	f040 8122 	bne.w	8003d4a <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8003b06:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b0a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 8003b14:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b18:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b1c:	cb03      	ldmia	r3!, {r0, r1}
 8003b1e:	6010      	str	r0, [r2, #0]
 8003b20:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8003b22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b26:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b30:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff f998 	bl	8002e6a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8003b3a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b3e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8003b48:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b50:	4618      	mov	r0, r3
 8003b52:	f006 f8d6 	bl	8009d02 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8003b56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b5a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f006 f8c9 	bl	8009d02 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8003b76:	e0ac      	b.n	8003cd2 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8003b7e:	e09c      	b.n	8003cba <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8003b80:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003b84:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	005a      	lsls	r2, r3, #1
 8003b8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8003b9a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003b9e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	1c59      	adds	r1, r3, #1
 8003baa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bb6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8003bb8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003bbc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	0059      	lsls	r1, r3, #1
 8003bc8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bd4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8003bd6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003bda:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	440b      	add	r3, r1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f103 0109 	add.w	r1, r3, #9
 8003be8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bf4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003bf6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003bfa:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8003c02:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003c04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8003c10:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003c14:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	005a      	lsls	r2, r3, #1
 8003c1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003c22:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c26:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003c2a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8003c2c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003c30:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003c40:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003c48:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8003c4a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003c4e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003c52:	00d2      	lsls	r2, r2, #3
 8003c54:	440a      	add	r2, r1
 8003c56:	3204      	adds	r2, #4
 8003c58:	0051      	lsls	r1, r2, #1
 8003c5a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003c5e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8003c62:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003c66:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8003c68:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003c6c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003c70:	00d2      	lsls	r2, r2, #3
 8003c72:	440a      	add	r2, r1
 8003c74:	0052      	lsls	r2, r2, #1
 8003c76:	f102 0109 	add.w	r1, r2, #9
 8003c7a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003c7e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8003c82:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003c86:	4413      	add	r3, r2
                                  /(int16_t)4;
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da00      	bge.n	8003c8e <_vl53l8cx_send_offset_data+0x202>
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	109b      	asrs	r3, r3, #2
 8003c90:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8003c92:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003c96:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	b209      	sxth	r1, r1
 8003ca0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ca4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ca8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8003cac:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8003cba:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	f77f af5e 	ble.w	8003b80 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8003cc4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8003cd2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	f77f af4e 	ble.w	8003b78 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8003cdc:	f107 0318 	add.w	r3, r7, #24
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	2260      	movs	r2, #96	@ 0x60
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f005 ff8c 	bl	8009c04 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8003cec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003cf0:	3340      	adds	r3, #64	@ 0x40
 8003cf2:	22c0      	movs	r2, #192	@ 0xc0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 ff84 	bl	8009c04 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8003cfc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 8003d0a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d12:	4618      	mov	r0, r3
 8003d14:	f005 fff5 	bl	8009d02 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8003d18:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d1c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8003d26:	f107 0118 	add.w	r1, r7, #24
 8003d2a:	2280      	movs	r2, #128	@ 0x80
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 ffe8 	bl	8009d02 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8003d32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d36:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003d40:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f890 	bl	8002e6a <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003d50:	e01b      	b.n	8003d8a <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8003d52:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d56:	f103 0208 	add.w	r2, r3, #8
 8003d5a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d5e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8003d62:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8003d66:	6809      	ldr	r1, [r1, #0]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 8003d6e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003d72:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003d80:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d84:	3301      	adds	r3, #1
 8003d86:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003d8a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d8e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8003d92:	d3de      	bcc.n	8003d52 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8003d94:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d98:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 8003da2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003da6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003daa:	cb03      	ldmia	r3!, {r0, r1}
 8003dac:	6010      	str	r0, [r2, #0]
 8003dae:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8003db0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003db4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003dbe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8003dc8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8003dcc:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8003dd0:	f7ff f81d 	bl	8002e0e <VL53L8CX_WrMulti>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003de2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003de6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8003dea:	2303      	movs	r3, #3
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	23ff      	movs	r3, #255	@ 0xff
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003df6:	2201      	movs	r2, #1
 8003df8:	2104      	movs	r1, #4
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	f7ff fdb3 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003e0e:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0800c494 	.word	0x0800c494
 8003e20:	0800c49c 	.word	0x0800c49c

08003e24 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b0ca      	sub	sp, #296	@ 0x128
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e32:	6018      	str	r0, [r3, #0]
 8003e34:	460a      	mov	r2, r1
 8003e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e3a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003e3e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8003e46:	4a9a      	ldr	r2, [pc, #616]	@ (80040b0 <_vl53l8cx_send_xtalk_data+0x28c>)
 8003e48:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e50:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8003e54:	4a97      	ldr	r2, [pc, #604]	@ (80040b4 <_vl53l8cx_send_xtalk_data+0x290>)
 8003e56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e5e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8003e62:	4b95      	ldr	r3, [pc, #596]	@ (80040b8 <_vl53l8cx_send_xtalk_data+0x294>)
 8003e64:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8003e68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 8003e76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003e84:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f005 ff3a 	bl	8009d02 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8003e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e92:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	f040 80d2 	bne.w	8004042 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8003e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8003eac:	461a      	mov	r2, r3
 8003eae:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003eb2:	cb03      	ldmia	r3!, {r0, r1}
 8003eb4:	6010      	str	r0, [r2, #0]
 8003eb6:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8003eb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ebc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003ecc:	cb03      	ldmia	r3!, {r0, r1}
 8003ece:	6010      	str	r0, [r2, #0]
 8003ed0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8003ed2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ed6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ee0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe ffc0 	bl	8002e6a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8003eea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003eee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 fefe 	bl	8009d02 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003f0c:	e05d      	b.n	8003fca <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003f14:	e04e      	b.n	8003fb4 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8003f16:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8003f1a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	005a      	lsls	r2, r3, #1
 8003f24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8003f30:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f34:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f4c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8003f4e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f52:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	440b      	add	r3, r1
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	0059      	lsls	r1, r3, #1
 8003f5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f6a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003f6c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f70:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	f103 0109 	add.w	r1, r3, #9
 8003f7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f8a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003f8c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f90:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003f98:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003f9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8003fa6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003fb4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	ddac      	ble.n	8003f16 <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8003fbc:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003fca:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	dd9d      	ble.n	8003f0e <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	3340      	adds	r3, #64	@ 0x40
 8003fd8:	22c0      	movs	r2, #192	@ 0xc0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 fe11 	bl	8009c04 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8003fe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003fe6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8003ff0:	f107 0108 	add.w	r1, r7, #8
 8003ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f005 fe82 	bl	8009d02 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8003ffe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004002:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800400c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe ff2a 	bl	8002e6a <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8004016:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800401a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8004024:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8004028:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800402a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800402e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8004038:	2204      	movs	r2, #4
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fde1 	bl	8009c04 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8004042:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004046:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800404a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 800404c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004050:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800405a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800405e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8004062:	f7fe fed4 	bl	8002e0e <VL53L8CX_WrMulti>
 8004066:	4603      	mov	r3, r0
 8004068:	461a      	mov	r2, r3
 800406a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800406e:	4313      	orrs	r3, r2
 8004070:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004074:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004078:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 800407c:	2303      	movs	r3, #3
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	23ff      	movs	r3, #255	@ 0xff
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004088:	2201      	movs	r2, #1
 800408a:	2104      	movs	r1, #4
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f7ff fc6a 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800409a:	4313      	orrs	r3, r2
 800409c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80040a0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	0800c4a4 	.word	0x0800c4a4
 80040b4:	0800c4ac 	.word	0x0800c4ac
 80040b8:	0001fca0 	.word	0x0001fca0

080040bc <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80040c8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80040cc:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80040ce:	2301      	movs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a80      	ldr	r2, [pc, #512]	@ (80042dc <vl53l8cx_init+0x220>)
 80040da:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a80      	ldr	r2, [pc, #512]	@ (80042e0 <vl53l8cx_init+0x224>)
 80040e0:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fe75 	bl	8002de2 <VL53L8CX_WrByte>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	4313      	orrs	r3, r2
 8004100:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2204      	movs	r2, #4
 8004106:	2109      	movs	r1, #9
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fe6a 	bl	8002de2 <VL53L8CX_WrByte>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	4313      	orrs	r3, r2
 8004116:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2240      	movs	r2, #64	@ 0x40
 800411c:	210f      	movs	r1, #15
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fe5f 	bl	8002de2 <VL53L8CX_WrByte>
 8004124:	4603      	mov	r3, r0
 8004126:	461a      	mov	r2, r3
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	4313      	orrs	r3, r2
 800412c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	210a      	movs	r1, #10
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fe54 	bl	8002de2 <VL53L8CX_WrByte>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	4313      	orrs	r3, r2
 8004142:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f107 0216 	add.w	r2, r7, #22
 800414a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fe32 	bl	8002db8 <VL53L8CX_RdByte>
 8004154:	4603      	mov	r3, r0
 8004156:	461a      	mov	r2, r3
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	4313      	orrs	r3, r2
 800415c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	210c      	movs	r1, #12
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fe3c 	bl	8002de2 <VL53L8CX_WrByte>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	4313      	orrs	r3, r2
 8004172:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f240 1101 	movw	r1, #257	@ 0x101
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fe30 	bl	8002de2 <VL53L8CX_WrByte>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	4313      	orrs	r3, r2
 800418a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fe24 	bl	8002de2 <VL53L8CX_WrByte>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fe18 	bl	8002de2 <VL53L8CX_WrByte>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fe0c 	bl	8002de2 <VL53L8CX_WrByte>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fe00 	bl	8002de2 <VL53L8CX_WrByte>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2203      	movs	r2, #3
 80041f0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fdf4 	bl	8002de2 <VL53L8CX_WrByte>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	4313      	orrs	r3, r2
 8004202:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f240 1103 	movw	r1, #259	@ 0x103
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fde8 	bl	8002de2 <VL53L8CX_WrByte>
 8004212:	4603      	mov	r3, r0
 8004214:	461a      	mov	r2, r3
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	4313      	orrs	r3, r2
 800421a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	210c      	movs	r1, #12
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fddd 	bl	8002de2 <VL53L8CX_WrByte>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	4313      	orrs	r3, r2
 8004230:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2243      	movs	r2, #67	@ 0x43
 8004236:	210f      	movs	r1, #15
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fdd2 	bl	8002de2 <VL53L8CX_WrByte>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	4313      	orrs	r3, r2
 8004246:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fe42 	bl	8002ed6 <VL53L8CX_WaitMs>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	4313      	orrs	r3, r2
 800425a:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2240      	movs	r2, #64	@ 0x40
 8004260:	210f      	movs	r1, #15
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fdbd 	bl	8002de2 <VL53L8CX_WrByte>
 8004268:	4603      	mov	r3, r0
 800426a:	461a      	mov	r2, r3
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	4313      	orrs	r3, r2
 8004270:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	210a      	movs	r1, #10
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fdb2 	bl	8002de2 <VL53L8CX_WrByte>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	4313      	orrs	r3, r2
 8004286:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2164      	movs	r1, #100	@ 0x64
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fe22 	bl	8002ed6 <VL53L8CX_WaitMs>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	4313      	orrs	r3, r2
 800429a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fd9c 	bl	8002de2 <VL53L8CX_WrByte>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461a      	mov	r2, r3
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80042b4:	2301      	movs	r3, #1
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	23ff      	movs	r3, #255	@ 0xff
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2306      	movs	r3, #6
 80042be:	2200      	movs	r2, #0
 80042c0:	2101      	movs	r1, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fb4f 	bl	8003966 <_vl53l8cx_poll_for_answer>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 8309 	bne.w	80048ec <vl53l8cx_init+0x830>
 80042da:	e003      	b.n	80042e4 <vl53l8cx_init+0x228>
 80042dc:	080218d4 	.word	0x080218d4
 80042e0:	08021508 	.word	0x08021508
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	210e      	movs	r1, #14
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fd79 	bl	8002de2 <VL53L8CX_WrByte>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fd6d 	bl	8002de2 <VL53L8CX_WrByte>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	4313      	orrs	r3, r2
 8004310:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fd61 	bl	8002de2 <VL53L8CX_WrByte>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	4313      	orrs	r3, r2
 8004328:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	2106      	movs	r1, #6
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fd56 	bl	8002de2 <VL53L8CX_WrByte>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	4313      	orrs	r3, r2
 800433e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8004340:	2304      	movs	r3, #4
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	23ff      	movs	r3, #255	@ 0xff
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2321      	movs	r3, #33	@ 0x21
 800434a:	2200      	movs	r2, #0
 800434c:	2101      	movs	r1, #1
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fb09 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004354:	4603      	mov	r3, r0
 8004356:	461a      	mov	r2, r3
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	4313      	orrs	r3, r2
 800435c:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fd3b 	bl	8002de2 <VL53L8CX_WrByte>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	4313      	orrs	r3, r2
 8004374:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f107 0216 	add.w	r2, r7, #22
 800437c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fd19 	bl	8002db8 <VL53L8CX_RdByte>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	4313      	orrs	r3, r2
 800438e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	210c      	movs	r1, #12
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fd23 	bl	8002de2 <VL53L8CX_WrByte>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fd17 	bl	8002de2 <VL53L8CX_WrByte>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f240 1101 	movw	r1, #257	@ 0x101
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fd0b 	bl	8002de2 <VL53L8CX_WrByte>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fcff 	bl	8002de2 <VL53L8CX_WrByte>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fcf3 	bl	8002de2 <VL53L8CX_WrByte>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	4313      	orrs	r3, r2
 8004404:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fce7 	bl	8002de2 <VL53L8CX_WrByte>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	4313      	orrs	r3, r2
 800441c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fcdb 	bl	8002de2 <VL53L8CX_WrByte>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	4313      	orrs	r3, r2
 8004434:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2203      	movs	r2, #3
 800443a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fccf 	bl	8002de2 <VL53L8CX_WrByte>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	4313      	orrs	r3, r2
 800444c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f240 1103 	movw	r1, #259	@ 0x103
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fcc3 	bl	8002de2 <VL53L8CX_WrByte>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	4313      	orrs	r3, r2
 8004464:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f244 010f 	movw	r1, #16399	@ 0x400f
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fcb7 	bl	8002de2 <VL53L8CX_WrByte>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	4313      	orrs	r3, r2
 800447c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2243      	movs	r2, #67	@ 0x43
 8004482:	f240 211a 	movw	r1, #538	@ 0x21a
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fcab 	bl	8002de2 <VL53L8CX_WrByte>
 800448c:	4603      	mov	r3, r0
 800448e:	461a      	mov	r2, r3
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	4313      	orrs	r3, r2
 8004494:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2203      	movs	r2, #3
 800449a:	f240 211a 	movw	r1, #538	@ 0x21a
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fc9f 	bl	8002de2 <VL53L8CX_WrByte>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f240 211a 	movw	r1, #538	@ 0x21a
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fc93 	bl	8002de2 <VL53L8CX_WrByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f240 211a 	movw	r1, #538	@ 0x21a
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fc87 	bl	8002de2 <VL53L8CX_WrByte>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	4313      	orrs	r3, r2
 80044dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f240 2119 	movw	r1, #537	@ 0x219
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fc7b 	bl	8002de2 <VL53L8CX_WrByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f240 211b 	movw	r1, #539	@ 0x21b
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fc6f 	bl	8002de2 <VL53L8CX_WrByte>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	4313      	orrs	r3, r2
 800450c:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fc63 	bl	8002de2 <VL53L8CX_WrByte>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	4313      	orrs	r3, r2
 8004524:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f107 0216 	add.w	r2, r7, #22
 800452c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe fc41 	bl	8002db8 <VL53L8CX_RdByte>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	4313      	orrs	r3, r2
 800453e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fc4a 	bl	8002de2 <VL53L8CX_WrByte>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	4313      	orrs	r3, r2
 8004556:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2209      	movs	r2, #9
 800455c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fc3e 	bl	8002de2 <VL53L8CX_WrByte>
 8004566:	4603      	mov	r3, r0
 8004568:	461a      	mov	r2, r3
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	4313      	orrs	r3, r2
 800456e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004576:	4ade      	ldr	r2, [pc, #888]	@ (80048f0 <vl53l8cx_init+0x834>)
 8004578:	2100      	movs	r1, #0
 800457a:	f7fe fc48 	bl	8002e0e <VL53L8CX_WrMulti>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	4313      	orrs	r3, r2
 8004586:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	220a      	movs	r2, #10
 800458c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fc26 	bl	8002de2 <VL53L8CX_WrByte>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	4313      	orrs	r3, r2
 800459e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	4ad3      	ldr	r2, [pc, #844]	@ (80048f4 <vl53l8cx_init+0x838>)
 80045a8:	2100      	movs	r1, #0
 80045aa:	f7fe fc30 	bl	8002e0e <VL53L8CX_WrMulti>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	220b      	movs	r2, #11
 80045bc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fc0e 	bl	8002de2 <VL53L8CX_WrByte>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80045d6:	4ac8      	ldr	r2, [pc, #800]	@ (80048f8 <vl53l8cx_init+0x83c>)
 80045d8:	2100      	movs	r1, #0
 80045da:	f7fe fc18 	bl	8002e0e <VL53L8CX_WrMulti>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fbf6 	bl	8002de2 <VL53L8CX_WrByte>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fbea 	bl	8002de2 <VL53L8CX_WrByte>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	4313      	orrs	r3, r2
 8004616:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	2106      	movs	r1, #6
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fbdf 	bl	8002de2 <VL53L8CX_WrByte>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	4313      	orrs	r3, r2
 800462c:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2105      	movs	r1, #5
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fc4f 	bl	8002ed6 <VL53L8CX_WaitMs>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	4313      	orrs	r3, r2
 8004640:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fbc9 	bl	8002de2 <VL53L8CX_WrByte>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	4313      	orrs	r3, r2
 8004658:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f107 0216 	add.w	r2, r7, #22
 8004660:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fba7 	bl	8002db8 <VL53L8CX_RdByte>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	4313      	orrs	r3, r2
 8004672:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	210c      	movs	r1, #12
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fbb1 	bl	8002de2 <VL53L8CX_WrByte>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	4313      	orrs	r3, r2
 8004688:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fba5 	bl	8002de2 <VL53L8CX_WrByte>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	4313      	orrs	r3, r2
 80046a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fb99 	bl	8002de2 <VL53L8CX_WrByte>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f240 1115 	movw	r1, #277	@ 0x115
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fb8d 	bl	8002de2 <VL53L8CX_WrByte>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2242      	movs	r2, #66	@ 0x42
 80046d6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fb81 	bl	8002de2 <VL53L8CX_WrByte>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f240 1117 	movw	r1, #279	@ 0x117
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fb75 	bl	8002de2 <VL53L8CX_WrByte>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	4313      	orrs	r3, r2
 8004700:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	210b      	movs	r1, #11
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe fb6a 	bl	8002de2 <VL53L8CX_WrByte>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	4313      	orrs	r3, r2
 8004716:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f107 0216 	add.w	r2, r7, #22
 800471e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fb48 	bl	8002db8 <VL53L8CX_RdByte>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	4313      	orrs	r3, r2
 8004730:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	210c      	movs	r1, #12
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fb52 	bl	8002de2 <VL53L8CX_WrByte>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	4313      	orrs	r3, r2
 8004746:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	210b      	movs	r1, #11
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fb47 	bl	8002de2 <VL53L8CX_WrByte>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	4313      	orrs	r3, r2
 800475c:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff f951 	bl	8003a06 <_vl53l8cx_poll_for_mcu_boot>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	4313      	orrs	r3, r2
 800476c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800476e:	7dfb      	ldrb	r3, [r7, #23]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 80c9 	bne.w	8004908 <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fb2f 	bl	8002de2 <VL53L8CX_WrByte>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	4313      	orrs	r3, r2
 800478c:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 800478e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8004796:	2304      	movs	r3, #4
 8004798:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800479c:	f7fe fb4e 	bl	8002e3c <VL53L8CX_RdMulti>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80047b0:	2104      	movs	r1, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fb59 	bl	8002e6a <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4a4d      	ldr	r2, [pc, #308]	@ (80048fc <vl53l8cx_init+0x840>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	f043 0305 	orr.w	r3, r3, #5
 80047d0:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80047d2:	e09a      	b.n	800490a <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	2328      	movs	r3, #40	@ 0x28
 80047d8:	4a49      	ldr	r2, [pc, #292]	@ (8004900 <vl53l8cx_init+0x844>)
 80047da:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80047de:	f7fe fb16 	bl	8002e0e <VL53L8CX_WrMulti>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 80047ec:	2302      	movs	r3, #2
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	23ff      	movs	r3, #255	@ 0xff
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80047f8:	2200      	movs	r2, #0
 80047fa:	2104      	movs	r1, #4
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff f8b2 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	4313      	orrs	r3, r2
 800480a:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800480c:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8004814:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8004818:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800481c:	f7fe fb0e 	bl	8002e3c <VL53L8CX_RdMulti>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	4313      	orrs	r3, r2
 8004828:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f103 0020 	add.w	r0, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004836:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800483a:	4619      	mov	r1, r3
 800483c:	f005 fa61 	bl	8009d02 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8004840:	2110      	movs	r1, #16
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff f922 	bl	8003a8c <_vl53l8cx_send_offset_data>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	4313      	orrs	r3, r2
 8004850:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <vl53l8cx_init+0x848>)
 800485a:	4618      	mov	r0, r3
 800485c:	4611      	mov	r1, r2
 800485e:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8004862:	461a      	mov	r2, r3
 8004864:	f005 fa4d 	bl	8009d02 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8004868:	2110      	movs	r1, #16
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fada 	bl	8003e24 <_vl53l8cx_send_xtalk_data>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	4313      	orrs	r3, r2
 8004878:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8004884:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8004888:	f7fe fac1 	bl	8002e0e <VL53L8CX_WrMulti>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	4313      	orrs	r3, r2
 8004894:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004896:	2303      	movs	r3, #3
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	23ff      	movs	r3, #255	@ 0xff
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80048a2:	2201      	movs	r2, #1
 80048a4:	2104      	movs	r1, #4
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff f85d 	bl	8003966 <_vl53l8cx_poll_for_answer>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80048b6:	f107 0110 	add.w	r1, r7, #16
 80048ba:	2304      	movs	r3, #4
 80048bc:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f87f 	bl	80059c4 <vl53l8cx_dci_write_data>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80048d0:	f107 010c 	add.w	r1, r7, #12
 80048d4:	2304      	movs	r3, #4
 80048d6:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 f872 	bl	80059c4 <vl53l8cx_dci_write_data>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	75fb      	strb	r3, [r7, #23]
 80048ea:	e00e      	b.n	800490a <vl53l8cx_init+0x84e>
		goto exit;
 80048ec:	bf00      	nop
 80048ee:	e00c      	b.n	800490a <vl53l8cx_init+0x84e>
 80048f0:	0800c508 	.word	0x0800c508
 80048f4:	08014508 	.word	0x08014508
 80048f8:	0801c508 	.word	0x0801c508
 80048fc:	0c0b6c9e 	.word	0x0c0b6c9e
 8004900:	08021bdc 	.word	0x08021bdc
 8004904:	080218d4 	.word	0x080218d4
		goto exit;
 8004908:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fa58 	bl	8002de2 <VL53L8CX_WrByte>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	4313      	orrs	r3, r2
 800493a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	b29b      	uxth	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	2104      	movs	r1, #4
 800494a:	f7fe fa4a 	bl	8002de2 <VL53L8CX_WrByte>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	4313      	orrs	r3, r2
 8004956:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	801a      	strh	r2, [r3, #0]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fa3b 	bl	8002de2 <VL53L8CX_WrByte>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	4313      	orrs	r3, r2
 8004974:	73fb      	strb	r3, [r7, #15]

	return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fa23 	bl	8002de2 <VL53L8CX_WrByte>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f107 020e 	add.w	r2, r7, #14
 80049ac:	2109      	movs	r1, #9
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fa02 	bl	8002db8 <VL53L8CX_RdByte>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d005      	beq.n	80049d0 <vl53l8cx_get_power_mode+0x50>
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d11a      	bne.n	80049fe <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
			break;
 80049ce:	e01c      	b.n	8004a0a <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f107 020e 	add.w	r2, r7, #14
 80049d6:	210f      	movs	r1, #15
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe f9ed 	bl	8002db8 <VL53L8CX_RdByte>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b43      	cmp	r3, #67	@ 0x43
 80049ec:	d103      	bne.n	80049f6 <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 80049f4:	e009      	b.n	8004a0a <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
			break;
 80049fc:	e005      	b.n	8004a0a <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8004a04:	23ff      	movs	r3, #255	@ 0xff
 8004a06:	73fb      	strb	r3, [r7, #15]
			break;
 8004a08:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f9e5 	bl	8002de2 <VL53L8CX_WrByte>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	73fb      	strb	r3, [r7, #15]

	return status;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 8004a3c:	f107 030e 	add.w	r3, r7, #14
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ff9c 	bl	8004980 <vl53l8cx_get_power_mode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8004a52:	7bbb      	ldrb	r3, [r7, #14]
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	f000 80c0 	beq.w	8004bdc <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d07a      	beq.n	8004b58 <vl53l8cx_set_power_mode+0x12c>
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	f300 80aa 	bgt.w	8004bbc <vl53l8cx_set_power_mode+0x190>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d04e      	beq.n	8004b0a <vl53l8cx_set_power_mode+0xde>
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 80a5 	bne.w	8004bbc <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f9b1 	bl	8002de2 <VL53L8CX_WrByte>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461a      	mov	r2, r3
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	2109      	movs	r1, #9
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe f9a6 	bl	8002de2 <VL53L8CX_WrByte>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f107 020d 	add.w	r2, r7, #13
 8004aa6:	210f      	movs	r1, #15
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe f985 	bl	8002db8 <VL53L8CX_RdByte>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8004ab8:	7b7b      	ldrb	r3, [r7, #13]
 8004aba:	2b43      	cmp	r3, #67	@ 0x43
 8004abc:	d10a      	bne.n	8004ad4 <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2240      	movs	r2, #64	@ 0x40
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe f98c 	bl	8002de2 <VL53L8CX_WrByte>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2306      	movs	r3, #6
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fe ff3f 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8004af2:	7b7b      	ldrb	r3, [r7, #13]
 8004af4:	2b43      	cmp	r3, #67	@ 0x43
 8004af6:	d164      	bne.n	8004bc2 <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fadf 	bl	80040bc <vl53l8cx_init>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8004b08:	e05b      	b.n	8004bc2 <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe f965 	bl	8002de2 <VL53L8CX_WrByte>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	2109      	movs	r1, #9
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe f95a 	bl	8002de2 <VL53L8CX_WrByte>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2306      	movs	r3, #6
 8004b42:	2200      	movs	r2, #0
 8004b44:	2101      	movs	r1, #1
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fe ff0d 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8004b56:	e035      	b.n	8004bc4 <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe f93e 	bl	8002de2 <VL53L8CX_WrByte>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	2109      	movs	r1, #9
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe f933 	bl	8002de2 <VL53L8CX_WrByte>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8004b86:	2300      	movs	r3, #0
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2306      	movs	r3, #6
 8004b90:	2200      	movs	r2, #0
 8004b92:	2101      	movs	r1, #1
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fe fee6 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2243      	movs	r2, #67	@ 0x43
 8004ba8:	210f      	movs	r1, #15
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe f919 	bl	8002de2 <VL53L8CX_WrByte>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	73fb      	strb	r3, [r7, #15]
			break;
 8004bba:	e003      	b.n	8004bc4 <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8004bbc:	23ff      	movs	r3, #255	@ 0xff
 8004bbe:	73fb      	strb	r3, [r7, #15]
			break;
 8004bc0:	e000      	b.n	8004bc4 <vl53l8cx_set_power_mode+0x198>
			break;
 8004bc2:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe f908 	bl	8002de2 <VL53L8CX_WrByte>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8004be8:	b5b0      	push	{r4, r5, r7, lr}
 8004bea:	b09c      	sub	sp, #112	@ 0x70
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004bfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8004c04:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fcaa 	bl	8005564 <vl53l8cx_get_resolution>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	22ff      	movs	r2, #255	@ 0xff
 8004c28:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8004c2a:	4bb8      	ldr	r3, [pc, #736]	@ (8004f0c <vl53l8cx_start_ranging+0x324>)
 8004c2c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8004c36:	4bb6      	ldr	r3, [pc, #728]	@ (8004f10 <vl53l8cx_start_ranging+0x328>)
 8004c38:	f107 040c 	add.w	r4, r7, #12
 8004c3c:	461d      	mov	r5, r3
 8004c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c50:	3308      	adds	r3, #8
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8004c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c56:	3310      	adds	r3, #16
 8004c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	3340      	adds	r3, #64	@ 0x40
 8004c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8004c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c68:	3380      	adds	r3, #128	@ 0x80
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8004c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c76:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c90:	e073      	b.n	8004d7a <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8004c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3368      	adds	r3, #104	@ 0x68
 8004c98:	443b      	add	r3, r7
 8004c9a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d067      	beq.n	8004d72 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3368      	adds	r3, #104	@ 0x68
 8004caa:	443b      	add	r3, r7
 8004cac:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8004cb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d057      	beq.n	8004d72 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8004cc2:	f107 020c 	add.w	r2, r7, #12
 8004cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8004cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d03a      	beq.n	8004d52 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d833      	bhi.n	8004d52 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8004cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cec:	885b      	ldrh	r3, [r3, #2]
 8004cee:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d910      	bls.n	8004d18 <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf8:	885b      	ldrh	r3, [r3, #2]
 8004cfa:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d80a      	bhi.n	8004d18 <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8004d02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	b299      	uxth	r1, r3
 8004d0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f361 130f 	bfi	r3, r1, #4, #12
 8004d14:	8013      	strh	r3, [r2, #0]
 8004d16:	e009      	b.n	8004d2c <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8004d18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	b299      	uxth	r1, r3
 8004d22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d24:	8813      	ldrh	r3, [r2, #0]
 8004d26:	f361 130f 	bfi	r3, r1, #4, #12
 8004d2a:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d3e:	8812      	ldrh	r2, [r2, #0]
 8004d40:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004d44:	b292      	uxth	r2, r2
 8004d46:	fb01 f202 	mul.w	r2, r1, r2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	615a      	str	r2, [r3, #20]
 8004d50:	e009      	b.n	8004d66 <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d58:	8812      	ldrh	r2, [r2, #0]
 8004d5a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004d5e:	b292      	uxth	r2, r2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	e000      	b.n	8004d74 <vl53l8cx_start_ranging+0x18c>
			continue;
 8004d72:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d76:	3301      	adds	r3, #1
 8004d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d7c:	2b0b      	cmp	r3, #11
 8004d7e:	d988      	bls.n	8004c92 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f103 0218 	add.w	r2, r3, #24
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 8004d8c:	f107 010c 	add.w	r1, r7, #12
 8004d90:	2330      	movs	r3, #48	@ 0x30
 8004d92:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fe14 	bl	80059c4 <vl53l8cx_dci_write_data>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8004db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004db2:	3301      	adds	r3, #1
 8004db4:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8004db6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004dba:	2308      	movs	r3, #8
 8004dbc:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fdff 	bl	80059c4 <vl53l8cx_dci_write_data>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8004dd4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fdf0 	bl	80059c4 <vl53l8cx_dci_write_data>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd fff1 	bl	8002de2 <VL53L8CX_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2205      	movs	r2, #5
 8004e12:	2109      	movs	r1, #9
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd ffe4 	bl	8002de2 <VL53L8CX_WrByte>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fd ffd6 	bl	8002de2 <VL53L8CX_WrByte>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004e50:	f7fd ffdd 	bl	8002e0e <VL53L8CX_WrMulti>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004e62:	2303      	movs	r3, #3
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	23ff      	movs	r3, #255	@ 0xff
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004e6e:	2201      	movs	r2, #1
 8004e70:	2104      	movs	r1, #4
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fe fd77 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8004e8c:	230c      	movs	r3, #12
 8004e8e:	f245 4240 	movw	r2, #21568	@ 0x5440
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fd0c 	bl	80058b0 <vl53l8cx_dci_read_data>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8004eb4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d002      	beq.n	8004ec8 <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8004ec2:	23ff      	movs	r3, #255	@ 0xff
 8004ec4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8004ece:	2308      	movs	r3, #8
 8004ed0:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fceb 	bl	80058b0 <vl53l8cx_dci_read_data>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3516 	ldrb.w	r3, [r3, #1302]	@ 0x516
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8004ef2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004ef6:	f043 0303 	orr.w	r3, r3, #3
 8004efa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8004efe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3768      	adds	r7, #104	@ 0x68
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	0800c4b4 	.word	0x0800c4b4
 8004f10:	0800c4c4 	.word	0x0800c4c4

08004f14 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74fb      	strb	r3, [r7, #19]
 8004f20:	2300      	movs	r3, #0
 8004f22:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f107 020c 	add.w	r2, r7, #12
 8004f32:	2304      	movs	r3, #4
 8004f34:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004f38:	f7fd ff80 	bl	8002e3c <VL53L8CX_RdMulti>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d04d      	beq.n	8004fec <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d148      	bne.n	8004fec <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd ff3d 	bl	8002de2 <VL53L8CX_WrByte>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2216      	movs	r2, #22
 8004f76:	2115      	movs	r1, #21
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd ff32 	bl	8002de2 <VL53L8CX_WrByte>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	2114      	movs	r1, #20
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd ff27 	bl	8002de2 <VL53L8CX_WrByte>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8004f9e:	e021      	b.n	8004fe4 <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f107 0213 	add.w	r2, r7, #19
 8004fa6:	2106      	movs	r1, #6
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd ff05 	bl	8002db8 <VL53L8CX_RdByte>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	210a      	movs	r1, #10
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd ff8a 	bl	8002ed6 <VL53L8CX_WaitMs>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8004fcc:	8abb      	ldrh	r3, [r7, #20]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8004fd2:	8abb      	ldrh	r3, [r7, #20]
 8004fd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004fd8:	d904      	bls.n	8004fe4 <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 8004fda:	7cfa      	ldrb	r2, [r7, #19]
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	75fb      	strb	r3, [r7, #23]
					break;
 8004fe2:	e003      	b.n	8004fec <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	b25b      	sxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dad9      	bge.n	8004fa0 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f107 0213 	add.w	r2, r7, #19
 8004ff2:	2106      	movs	r1, #6
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd fedf 	bl	8002db8 <VL53L8CX_RdByte>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	4313      	orrs	r3, r2
 8005002:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	b25b      	sxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	da15      	bge.n	8005038 <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f107 0213 	add.w	r2, r7, #19
 8005012:	2107      	movs	r1, #7
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fecf 	bl	8002db8 <VL53L8CX_RdByte>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	4313      	orrs	r3, r2
 8005022:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b84      	cmp	r3, #132	@ 0x84
 8005028:	d006      	beq.n	8005038 <vl53l8cx_stop_ranging+0x124>
 800502a:	7cfb      	ldrb	r3, [r7, #19]
 800502c:	2b85      	cmp	r3, #133	@ 0x85
 800502e:	d003      	beq.n	8005038 <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 8005030:	7cfa      	ldrb	r2, [r7, #19]
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	4313      	orrs	r3, r2
 8005036:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005040:	4618      	mov	r0, r3
 8005042:	f7fd fece 	bl	8002de2 <VL53L8CX_WrByte>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	4313      	orrs	r3, r2
 800504e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	2114      	movs	r1, #20
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fec3 	bl	8002de2 <VL53L8CX_WrByte>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	4313      	orrs	r3, r2
 8005064:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	2115      	movs	r1, #21
 800506c:	4618      	mov	r0, r3
 800506e:	f7fd feb8 	bl	8002de2 <VL53L8CX_WrByte>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	4313      	orrs	r3, r2
 800507a:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2204      	movs	r2, #4
 8005080:	2109      	movs	r1, #9
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fead 	bl	8002de2 <VL53L8CX_WrByte>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	4313      	orrs	r3, r2
 8005090:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fea1 	bl	8002de2 <VL53L8CX_WrByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	75fb      	strb	r3, [r7, #23]

	return status;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80050ca:	2304      	movs	r3, #4
 80050cc:	2100      	movs	r1, #0
 80050ce:	f7fd feb5 	bl	8002e3c <VL53L8CX_RdMulti>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	4313      	orrs	r3, r2
 80050da:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	7c1b      	ldrb	r3, [r3, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d020      	beq.n	800512c <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80050f0:	2bff      	cmp	r3, #255	@ 0xff
 80050f2:	d01b      	beq.n	800512c <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d116      	bne.n	800512c <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8005104:	f003 0305 	and.w	r3, r3, #5
 8005108:	2b05      	cmp	r3, #5
 800510a:	d10f      	bne.n	800512c <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	741a      	strb	r2, [r3, #16]
 800512a:	e00e      	b.n	800514a <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8005132:	b25b      	sxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	da05      	bge.n	8005144 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	4313      	orrs	r3, r2
 8005142:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8005162:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2100      	movs	r1, #0
 8005170:	f7fd fe64 	bl	8002e3c <VL53L8CX_RdMulti>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	4313      	orrs	r3, r2
 800517c:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	741a      	strb	r2, [r3, #16]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	b29b      	uxth	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7fd fe67 	bl	8002e6a <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 800519c:	2310      	movs	r3, #16
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e10e      	b.n	80053c0 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d915      	bls.n	80051e8 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d80e      	bhi.n	80051e8 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80051de:	b29b      	uxth	r3, r3
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e005      	b.n	80051f4 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	885b      	ldrh	r3, [r3, #2]
 80051f8:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80051fc:	4293      	cmp	r3, r2
 80051fe:	f000 80bb 	beq.w	8005378 <vl53l8cx_get_ranging_data+0x224>
 8005202:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8005206:	4293      	cmp	r3, r2
 8005208:	f300 80d2 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 800520c:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8005210:	4293      	cmp	r3, r2
 8005212:	f000 80a3 	beq.w	800535c <vl53l8cx_get_ranging_data+0x208>
 8005216:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800521a:	4293      	cmp	r3, r2
 800521c:	f300 80c8 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 8005220:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8005224:	4293      	cmp	r3, r2
 8005226:	f000 808b 	beq.w	8005340 <vl53l8cx_get_ranging_data+0x1ec>
 800522a:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800522e:	4293      	cmp	r3, r2
 8005230:	f300 80be 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 8005234:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8005238:	4293      	cmp	r3, r2
 800523a:	d073      	beq.n	8005324 <vl53l8cx_get_ranging_data+0x1d0>
 800523c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8005240:	4293      	cmp	r3, r2
 8005242:	f300 80b5 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 8005246:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800524a:	4293      	cmp	r3, r2
 800524c:	d05c      	beq.n	8005308 <vl53l8cx_get_ranging_data+0x1b4>
 800524e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8005252:	4293      	cmp	r3, r2
 8005254:	f300 80ac 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 8005258:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 800525c:	4293      	cmp	r3, r2
 800525e:	d045      	beq.n	80052ec <vl53l8cx_get_ranging_data+0x198>
 8005260:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8005264:	4293      	cmp	r3, r2
 8005266:	f300 80a3 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 800526a:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800526e:	4293      	cmp	r3, r2
 8005270:	f000 8090 	beq.w	8005394 <vl53l8cx_get_ranging_data+0x240>
 8005274:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8005278:	4293      	cmp	r3, r2
 800527a:	f300 8099 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 800527e:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8005282:	4293      	cmp	r3, r2
 8005284:	d024      	beq.n	80052d0 <vl53l8cx_get_ranging_data+0x17c>
 8005286:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800528a:	4293      	cmp	r3, r2
 800528c:	f300 8090 	bgt.w	80053b0 <vl53l8cx_get_ranging_data+0x25c>
 8005290:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <vl53l8cx_get_ranging_data+0x14e>
 8005298:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 800529c:	4293      	cmp	r3, r2
 800529e:	d00a      	beq.n	80052b6 <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80052a0:	e086      	b.n	80053b0 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	330c      	adds	r3, #12
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80052ae:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
				break;
 80052b4:	e07d      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3304      	adds	r3, #4
 80052be:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4619      	mov	r1, r3
 80052ca:	f004 fd1a 	bl	8009d02 <memcpy>
				break;
 80052ce:	e070      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3304      	adds	r3, #4
 80052da:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f004 fd0c 	bl	8009d02 <memcpy>
				break;
 80052ea:	e062      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3304      	adds	r3, #4
 80052f6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4619      	mov	r1, r3
 8005302:	f004 fcfe 	bl	8009d02 <memcpy>
				break;
 8005306:	e054      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3304      	adds	r3, #4
 8005312:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4619      	mov	r1, r3
 800531e:	f004 fcf0 	bl	8009d02 <memcpy>
				break;
 8005322:	e046      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	3304      	adds	r3, #4
 800532e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4619      	mov	r1, r3
 800533a:	f004 fce2 	bl	8009d02 <memcpy>
				break;
 800533e:	e038      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	3304      	adds	r3, #4
 800534a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4619      	mov	r1, r3
 8005356:	f004 fcd4 	bl	8009d02 <memcpy>
				break;
 800535a:	e02a      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	3304      	adds	r3, #4
 8005366:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4619      	mov	r1, r3
 8005372:	f004 fcc6 	bl	8009d02 <memcpy>
				break;
 8005376:	e01c      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	3304      	adds	r3, #4
 8005382:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4619      	mov	r1, r3
 800538e:	f004 fcb8 	bl	8009d02 <memcpy>
				break;
 8005392:	e00e      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	3304      	adds	r3, #4
 800539e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4619      	mov	r1, r3
 80053aa:	f004 fcaa 	bl	8009d02 <memcpy>
				break;
 80053ae:	e000      	b.n	80053b2 <vl53l8cx_get_ranging_data+0x25e>
				break;
 80053b0:	bf00      	nop
		}
		i += msize;
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3304      	adds	r3, #4
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f4ff aeeb 	bcc.w	80051a2 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e00d      	b.n	80053ee <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	0ada      	lsrs	r2, r3, #11
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	3301      	adds	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80053f2:	d9ee      	bls.n	80053d2 <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e044      	b.n	8005484 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	da00      	bge.n	8005410 <vl53l8cx_get_ranging_data+0x2bc>
 800540e:	3303      	adds	r3, #3
 8005410:	109b      	asrs	r3, r3, #2
 8005412:	b219      	sxth	r1, r3
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4413      	add	r3, r2
 8005420:	460a      	mov	r2, r1
 8005422:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4413      	add	r3, r2
 800542a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b2d9      	uxtb	r1, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4413      	add	r3, r2
 800543a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800543e:	460a      	mov	r2, r1
 8005440:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	889b      	ldrh	r3, [r3, #4]
 8005450:	09db      	lsrs	r3, r3, #7
 8005452:	b299      	uxth	r1, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	460a      	mov	r2, r1
 8005462:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3390      	adds	r3, #144	@ 0x90
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0ada      	lsrs	r2, r3, #11
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3390      	adds	r3, #144	@ 0x90
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3301      	adds	r3, #1
 8005482:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b3f      	cmp	r3, #63	@ 0x3f
 8005488:	d9b7      	bls.n	80053fa <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e01b      	b.n	80054c8 <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d110      	bne.n	80054c2 <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e00a      	b.n	80054bc <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	4413      	add	r3, r2
 80054b0:	22ff      	movs	r2, #255	@ 0xff
 80054b2:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3301      	adds	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f1      	beq.n	80054a6 <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80054cc:	d9e0      	bls.n	8005490 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e014      	b.n	80054fe <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <vl53l8cx_get_ranging_data+0x40c>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	0bda      	lsrs	r2, r3, #15
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	3301      	adds	r3, #1
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b1f      	cmp	r3, #31
 8005502:	d9e7      	bls.n	80054d4 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8005514:	461a      	mov	r2, r3
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	4313      	orrs	r3, r2
 800551a:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8005520:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8005532:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800553c:	461a      	mov	r2, r3
 800553e:	89bb      	ldrh	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8005544:	89fa      	ldrh	r2, [r7, #14]
 8005546:	89bb      	ldrh	r3, [r7, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d003      	beq.n	8005554 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 800554c:	7ffb      	ldrb	r3, [r7, #31]
 800554e:	f043 0302 	orr.w	r3, r3, #2
 8005552:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	80008001 	.word	0x80008001

08005564 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8005578:	2308      	movs	r3, #8
 800557a:	f245 4250 	movw	r2, #21584	@ 0x5450
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f996 	bl	80058b0 <vl53l8cx_dci_read_data>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4313      	orrs	r3, r2
 800558c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 800559a:	fb12 f303 	smulbb	r3, r2, r3
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	701a      	strb	r2, [r3, #0]

	return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d002      	beq.n	80055ca <vl53l8cx_set_resolution+0x1c>
 80055c4:	2b40      	cmp	r3, #64	@ 0x40
 80055c6:	d055      	beq.n	8005674 <vl53l8cx_set_resolution+0xc6>
 80055c8:	e0a9      	b.n	800571e <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80055d0:	2310      	movs	r3, #16
 80055d2:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f96a 	bl	80058b0 <vl53l8cx_dci_read_data>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2240      	movs	r2, #64	@ 0x40
 80055ea:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2240      	movs	r2, #64	@ 0x40
 80055f2:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8005604:	2310      	movs	r3, #16
 8005606:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9da 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4313      	orrs	r3, r2
 8005618:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8005620:	2308      	movs	r3, #8
 8005622:	f245 4250 	movw	r2, #21584	@ 0x5450
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f942 	bl	80058b0 <vl53l8cx_dci_read_data>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	4313      	orrs	r3, r2
 8005634:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2204      	movs	r2, #4
 800563a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2208      	movs	r2, #8
 800564a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2208      	movs	r2, #8
 8005652:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 800565c:	2308      	movs	r3, #8
 800565e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9ae 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	4313      	orrs	r3, r2
 8005670:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 8005672:	e057      	b.n	8005724 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 800567a:	2310      	movs	r3, #16
 800567c:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f915 	bl	80058b0 <vl53l8cx_dci_read_data>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	4313      	orrs	r3, r2
 800568e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2210      	movs	r2, #16
 8005694:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2210      	movs	r2, #16
 800569c:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80056ae:	2310      	movs	r3, #16
 80056b0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f985 	bl	80059c4 <vl53l8cx_dci_write_data>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80056ca:	2308      	movs	r3, #8
 80056cc:	f245 4250 	movw	r2, #21584	@ 0x5450
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8ed 	bl	80058b0 <vl53l8cx_dci_read_data>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	4313      	orrs	r3, r2
 80056de:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2208      	movs	r2, #8
 80056e4:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2208      	movs	r2, #8
 80056ec:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2204      	movs	r2, #4
 80056f4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2204      	movs	r2, #4
 80056fc:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8005706:	2308      	movs	r3, #8
 8005708:	f245 4250 	movw	r2, #21584	@ 0x5450
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f959 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	4313      	orrs	r3, r2
 800571a:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 800571c:	e002      	b.n	8005724 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 800571e:	237f      	movs	r3, #127	@ 0x7f
 8005720:	73fb      	strb	r3, [r7, #15]
			break;
 8005722:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fe f9af 	bl	8003a8c <_vl53l8cx_send_offset_data>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	4313      	orrs	r3, r2
 8005736:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fe fb71 	bl	8003e24 <_vl53l8cx_send_xtalk_data>
 8005742:	4603      	mov	r3, r0
 8005744:	461a      	mov	r2, r3
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	4313      	orrs	r3, r2
 800574a:	73fb      	strb	r3, [r7, #15]

	return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af04      	add	r7, sp, #16
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800576c:	2301      	movs	r3, #1
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	2301      	movs	r3, #1
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	1cfb      	adds	r3, r7, #3
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2304      	movs	r3, #4
 800577a:	f245 4258 	movw	r2, #21592	@ 0x5458
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9be 	bl	8005b00 <vl53l8cx_dci_replace_data>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	4313      	orrs	r3, r2
 800578c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af04      	add	r7, sp, #16
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d903      	bls.n	80057b8 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057b6:	d904      	bls.n	80057c2 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e01a      	b.n	80057f8 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80057d4:	2300      	movs	r3, #0
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	2304      	movs	r3, #4
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2314      	movs	r3, #20
 80057e4:	f245 425c 	movw	r2, #21596	@ 0x545c
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f989 	bl	8005b00 <vl53l8cx_dci_replace_data>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800581c:	2308      	movs	r3, #8
 800581e:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f844 	bl	80058b0 <vl53l8cx_dci_read_data>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	4313      	orrs	r3, r2
 8005830:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d002      	beq.n	800583e <vl53l8cx_set_ranging_mode+0x3c>
 8005838:	2b03      	cmp	r3, #3
 800583a:	d00b      	beq.n	8005854 <vl53l8cx_set_ranging_mode+0x52>
 800583c:	e015      	b.n	800586a <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2203      	movs	r2, #3
 800584a:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
			break;
 8005852:	e00d      	b.n	8005870 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2203      	movs	r2, #3
 8005858:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8005864:	2301      	movs	r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
			break;
 8005868:	e002      	b.n	8005870 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 800586a:	237f      	movs	r3, #127	@ 0x7f
 800586c:	73fb      	strb	r3, [r7, #15]
			break;
 800586e:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8005876:	2308      	movs	r3, #8
 8005878:	f64a 5230 	movw	r2, #44336	@ 0xad30
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8a1 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	4313      	orrs	r3, r2
 800588a:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800588c:	f107 0108 	add.w	r1, r7, #8
 8005890:	2304      	movs	r3, #4
 8005892:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f894 	bl	80059c4 <vl53l8cx_dci_write_data>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	@ 0x30
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	330c      	adds	r3, #12
 80058c8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80058ca:	4a3d      	ldr	r2, [pc, #244]	@ (80059c0 <vl53l8cx_dci_read_data+0x110>)
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80058d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80058dc:	d903      	bls.n	80058e6 <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80058de:	23ff      	movs	r3, #255	@ 0xff
 80058e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80058e4:	e065      	b.n	80059b2 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	111b      	asrs	r3, r3, #4
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80058fc:	887b      	ldrh	r3, [r7, #2]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	b2db      	uxtb	r3, r3
 8005904:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f107 0214 	add.w	r2, r7, #20
 800590c:	230c      	movs	r3, #12
 800590e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8005912:	f7fd fa7c 	bl	8002e0e <VL53L8CX_WrMulti>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800591e:	4313      	orrs	r3, r2
 8005920:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8005924:	2303      	movs	r3, #3
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	23ff      	movs	r3, #255	@ 0xff
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005930:	2201      	movs	r2, #1
 8005932:	2104      	movs	r1, #4
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7fe f816 	bl	8003966 <_vl53l8cx_poll_for_answer>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005942:	4313      	orrs	r3, r2
 8005944:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8005948:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8005956:	f7fd fa71 	bl	8002e3c <VL53L8CX_RdMulti>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005962:	4313      	orrs	r3, r2
 8005964:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800596e:	887b      	ldrh	r3, [r7, #2]
 8005970:	330c      	adds	r3, #12
 8005972:	b29b      	uxth	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fd fa77 	bl	8002e6a <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800597c:	2300      	movs	r3, #0
 800597e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005980:	e011      	b.n	80059a6 <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8005982:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	440b      	add	r3, r1
 8005990:	68f9      	ldr	r1, [r7, #12]
 8005992:	440a      	add	r2, r1
 8005994:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8005998:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800599a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3301      	adds	r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80059a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80059ae:	429a      	cmp	r2, r3
 80059b0:	dbe7      	blt.n	8005982 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 80059b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3728      	adds	r7, #40	@ 0x28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	0800c4f4 	.word	0x0800c4f4

080059c4 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	@ 0x30
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80059dc:	2300      	movs	r3, #0
 80059de:	753b      	strb	r3, [r7, #20]
 80059e0:	2300      	movs	r3, #0
 80059e2:	757b      	strb	r3, [r7, #21]
 80059e4:	2300      	movs	r3, #0
 80059e6:	75bb      	strb	r3, [r7, #22]
 80059e8:	230f      	movs	r3, #15
 80059ea:	75fb      	strb	r3, [r7, #23]
 80059ec:	2305      	movs	r3, #5
 80059ee:	763b      	strb	r3, [r7, #24]
 80059f0:	2301      	movs	r3, #1
 80059f2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	3308      	adds	r3, #8
 80059f8:	121b      	asrs	r3, r3, #8
 80059fa:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80059fc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80059fe:	887b      	ldrh	r3, [r7, #2]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	3308      	adds	r3, #8
 8005a04:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005a06:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8005a0e:	3334      	adds	r3, #52	@ 0x34
 8005a10:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8005a18:	d903      	bls.n	8005a22 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8005a1a:	23ff      	movs	r3, #255	@ 0xff
 8005a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a20:	e068      	b.n	8005af4 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	111b      	asrs	r3, r3, #4
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 8005a42:	887b      	ldrh	r3, [r7, #2]
 8005a44:	4619      	mov	r1, r3
 8005a46:	68b8      	ldr	r0, [r7, #8]
 8005a48:	f7fd fa0f 	bl	8002e6a <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005a54:	e012      	b.n	8005a7c <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8005a56:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	441a      	add	r2, r3
 8005a5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005a62:	3304      	adds	r3, #4
 8005a64:	7811      	ldrb	r1, [r2, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005a70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005a7c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dae8      	bge.n	8005a56 <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	3304      	adds	r3, #4
 8005a92:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	cb03      	ldmia	r3!, {r0, r1}
 8005aa2:	6010      	str	r0, [r2, #0]
 8005aa4:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8005aa6:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8005aae:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005ab4:	f7fd f9ab 	bl	8002e0e <VL53L8CX_WrMulti>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	23ff      	movs	r3, #255	@ 0xff
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	2104      	movs	r1, #4
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7fd ff45 	bl	8003966 <_vl53l8cx_poll_for_answer>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	4619      	mov	r1, r3
 8005aee:	68b8      	ldr	r0, [r7, #8]
 8005af0:	f7fd f9bb 	bl	8002e6a <VL53L8CX_SwapBuffer>
	}

	return status;
 8005af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3728      	adds	r7, #40	@ 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fec9 	bl	80058b0 <vl53l8cx_dci_read_data>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8005b28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 f8e5 	bl	8009d02 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff40 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	75fb      	strb	r3, [r7, #23]

	return status;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af04      	add	r7, sp, #16
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8005b68:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005b6c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d104      	bne.n	8005b7e <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8005b74:	2301      	movs	r3, #1
 8005b76:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	73bb      	strb	r3, [r7, #14]
 8005b7c:	e003      	b.n	8005b86 <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8005b82:	230c      	movs	r3, #12
 8005b84:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	2304      	movs	r3, #4
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f107 0308 	add.w	r3, r7, #8
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ffad 	bl	8005b00 <vl53l8cx_dci_replace_data>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8005bb6:	2311      	movs	r3, #17
 8005bb8:	9302      	str	r3, [sp, #8]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	f107 030e 	add.w	r3, r7, #14
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2314      	movs	r3, #20
 8005bc6:	f245 4288 	movw	r2, #21640	@ 0x5488
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ff98 	bl	8005b00 <vl53l8cx_dci_replace_data>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8005bf2:	4aa7      	ldr	r2, [pc, #668]	@ (8005e90 <vl53l8cx_set_detection_thresholds+0x2ac>)
 8005bf4:	f107 030c 	add.w	r3, r7, #12
 8005bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bfc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
 8005c04:	e120      	b.n	8005e48 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	7a1b      	ldrb	r3, [r3, #8]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b12      	cmp	r3, #18
 8005c0e:	f200 8117 	bhi.w	8005e40 <vl53l8cx_set_detection_thresholds+0x25c>
 8005c12:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <vl53l8cx_set_detection_thresholds+0x34>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005cb3 	.word	0x08005cb3
 8005c20:	08005e41 	.word	0x08005e41
 8005c24:	08005d01 	.word	0x08005d01
 8005c28:	08005e41 	.word	0x08005e41
 8005c2c:	08005e41 	.word	0x08005e41
 8005c30:	08005e41 	.word	0x08005e41
 8005c34:	08005d4f 	.word	0x08005d4f
 8005c38:	08005e41 	.word	0x08005e41
 8005c3c:	08005e41 	.word	0x08005e41
 8005c40:	08005e41 	.word	0x08005e41
 8005c44:	08005e41 	.word	0x08005e41
 8005c48:	08005d9d 	.word	0x08005d9d
 8005c4c:	08005e41 	.word	0x08005e41
 8005c50:	08005e41 	.word	0x08005e41
 8005c54:	08005e41 	.word	0x08005e41
 8005c58:	08005e41 	.word	0x08005e41
 8005c5c:	08005e41 	.word	0x08005e41
 8005c60:	08005deb 	.word	0x08005deb
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8005c64:	7dfa      	ldrb	r2, [r7, #23]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	461a      	mov	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4413      	add	r3, r2
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	7dfa      	ldrb	r2, [r7, #23]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	461a      	mov	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	4413      	add	r3, r2
 8005c86:	008a      	lsls	r2, r1, #2
 8005c88:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8005c8a:	7dfa      	ldrb	r2, [r7, #23]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	461a      	mov	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	4413      	add	r3, r2
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	7dfa      	ldrb	r2, [r7, #23]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	4413      	add	r3, r2
 8005cac:	008a      	lsls	r2, r1, #2
 8005cae:	605a      	str	r2, [r3, #4]
				break;
 8005cb0:	e0c7      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8005cb2:	7dfa      	ldrb	r2, [r7, #23]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	7dfa      	ldrb	r2, [r7, #23]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	02ca      	lsls	r2, r1, #11
 8005cd6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8005cd8:	7dfa      	ldrb	r2, [r7, #23]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	7dfa      	ldrb	r2, [r7, #23]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	02ca      	lsls	r2, r1, #11
 8005cfc:	605a      	str	r2, [r3, #4]
				break;
 8005cfe:	e0a0      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8005d00:	7dfa      	ldrb	r2, [r7, #23]
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4413      	add	r3, r2
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	7dfa      	ldrb	r2, [r7, #23]
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	4413      	add	r3, r2
 8005d22:	01ca      	lsls	r2, r1, #7
 8005d24:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8005d26:	7dfa      	ldrb	r2, [r7, #23]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	461a      	mov	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	7dfa      	ldrb	r2, [r7, #23]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4413      	add	r3, r2
 8005d48:	01ca      	lsls	r2, r1, #7
 8005d4a:	605a      	str	r2, [r3, #4]
				break;
 8005d4c:	e079      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8005d4e:	7dfa      	ldrb	r2, [r7, #23]
 8005d50:	4613      	mov	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	7dfa      	ldrb	r2, [r7, #23]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4413      	add	r3, r2
 8005d70:	02ca      	lsls	r2, r1, #11
 8005d72:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8005d74:	7dfa      	ldrb	r2, [r7, #23]
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	461a      	mov	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	7dfa      	ldrb	r2, [r7, #23]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	461a      	mov	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	02ca      	lsls	r2, r1, #11
 8005d98:	605a      	str	r2, [r3, #4]
				break;
 8005d9a:	e052      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8005d9c:	7dfa      	ldrb	r2, [r7, #23]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	461a      	mov	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	7dfa      	ldrb	r2, [r7, #23]
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	461a      	mov	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	020a      	lsls	r2, r1, #8
 8005dc0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8005dc2:	7dfa      	ldrb	r2, [r7, #23]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	6859      	ldr	r1, [r3, #4]
 8005dd4:	7dfa      	ldrb	r2, [r7, #23]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	461a      	mov	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4413      	add	r3, r2
 8005de4:	020a      	lsls	r2, r1, #8
 8005de6:	605a      	str	r2, [r3, #4]
				break;
 8005de8:	e02b      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8005dea:	7dfa      	ldrb	r2, [r7, #23]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	461a      	mov	r2, r3
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	7df9      	ldrb	r1, [r7, #23]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	440b      	add	r3, r1
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4619      	mov	r1, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4419      	add	r1, r3
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8005e14:	7dfa      	ldrb	r2, [r7, #23]
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	461a      	mov	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4413      	add	r3, r2
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	7df9      	ldrb	r1, [r7, #23]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	440b      	add	r3, r1
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4619      	mov	r1, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4419      	add	r1, r3
 8005e36:	4613      	mov	r3, r2
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
				break;
 8005e3e:	e000      	b.n	8005e42 <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8005e40:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	3301      	adds	r3, #1
 8005e46:	75fb      	strb	r3, [r7, #23]
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e4c:	f67f aedb 	bls.w	8005c06 <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8005e50:	f107 010c 	add.w	r1, r7, #12
 8005e54:	2308      	movs	r3, #8
 8005e56:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fdb2 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	7dbb      	ldrb	r3, [r7, #22]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8005e6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005e6e:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fda5 	bl	80059c4 <vl53l8cx_dci_write_data>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	7dbb      	ldrb	r3, [r7, #22]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8005e84:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	0800c500 	.word	0x0800c500

08005e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e98:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <SystemInit+0x20>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	4a05      	ldr	r2, [pc, #20]	@ (8005eb4 <SystemInit+0x20>)
 8005ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef8 <HAL_Init+0x40>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef8 <HAL_Init+0x40>)
 8005ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_Init+0x40>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef8 <HAL_Init+0x40>)
 8005ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_Init+0x40>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a07      	ldr	r2, [pc, #28]	@ (8005ef8 <HAL_Init+0x40>)
 8005eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ee0:	2003      	movs	r0, #3
 8005ee2:	f000 f96f 	bl	80061c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f000 f808 	bl	8005efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005eec:	f7fc fb42 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023c00 	.word	0x40023c00

08005efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f04:	4b12      	ldr	r3, [pc, #72]	@ (8005f50 <HAL_InitTick+0x54>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b12      	ldr	r3, [pc, #72]	@ (8005f54 <HAL_InitTick+0x58>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 f987 	bl	800622e <HAL_SYSTICK_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e00e      	b.n	8005f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b0f      	cmp	r3, #15
 8005f2e:	d80a      	bhi.n	8005f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f30:	2200      	movs	r2, #0
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	f000 f94f 	bl	80061da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f3c:	4a06      	ldr	r2, [pc, #24]	@ (8005f58 <HAL_InitTick+0x5c>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000003c 	.word	0x2000003c
 8005f54:	20000044 	.word	0x20000044
 8005f58:	20000040 	.word	0x20000040

08005f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f60:	4b06      	ldr	r3, [pc, #24]	@ (8005f7c <HAL_IncTick+0x20>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <HAL_IncTick+0x24>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	4a04      	ldr	r2, [pc, #16]	@ (8005f80 <HAL_IncTick+0x24>)
 8005f6e:	6013      	str	r3, [r2, #0]
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000044 	.word	0x20000044
 8005f80:	20001cb8 	.word	0x20001cb8

08005f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return uwTick;
 8005f88:	4b03      	ldr	r3, [pc, #12]	@ (8005f98 <HAL_GetTick+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20001cb8 	.word	0x20001cb8

08005f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fa4:	f7ff ffee 	bl	8005f84 <HAL_GetTick>
 8005fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d005      	beq.n	8005fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <HAL_Delay+0x44>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fc2:	bf00      	nop
 8005fc4:	f7ff ffde 	bl	8005f84 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d8f7      	bhi.n	8005fc4 <HAL_Delay+0x28>
  {
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000044 	.word	0x20000044

08005fe4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_SuspendTick+0x1c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a04      	ldr	r2, [pc, #16]	@ (8006000 <HAL_SuspendTick+0x1c>)
 8005fee:	f023 0302 	bic.w	r3, r3, #2
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e010 	.word	0xe000e010

08006004 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_ResumeTick+0x1c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a04      	ldr	r2, [pc, #16]	@ (8006020 <HAL_ResumeTick+0x1c>)
 800600e:	f043 0302 	orr.w	r3, r3, #2
 8006012:	6013      	str	r3, [r2, #0]
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010

08006024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <__NVIC_SetPriorityGrouping+0x44>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006040:	4013      	ands	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800604c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006056:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <__NVIC_SetPriorityGrouping+0x44>)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	60d3      	str	r3, [r2, #12]
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006070:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <__NVIC_GetPriorityGrouping+0x18>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	0a1b      	lsrs	r3, r3, #8
 8006076:	f003 0307 	and.w	r3, r3, #7
}
 800607a:	4618      	mov	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000ed00 	.word	0xe000ed00

08006088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	2b00      	cmp	r3, #0
 8006098:	db0b      	blt.n	80060b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	f003 021f 	and.w	r2, r3, #31
 80060a0:	4907      	ldr	r1, [pc, #28]	@ (80060c0 <__NVIC_EnableIRQ+0x38>)
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2001      	movs	r0, #1
 80060aa:	fa00 f202 	lsl.w	r2, r0, r2
 80060ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e100 	.word	0xe000e100

080060c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	6039      	str	r1, [r7, #0]
 80060ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	db0a      	blt.n	80060ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	490c      	ldr	r1, [pc, #48]	@ (8006110 <__NVIC_SetPriority+0x4c>)
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	440b      	add	r3, r1
 80060e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060ec:	e00a      	b.n	8006104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	4908      	ldr	r1, [pc, #32]	@ (8006114 <__NVIC_SetPriority+0x50>)
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	3b04      	subs	r3, #4
 80060fc:	0112      	lsls	r2, r2, #4
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	440b      	add	r3, r1
 8006102:	761a      	strb	r2, [r3, #24]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000e100 	.word	0xe000e100
 8006114:	e000ed00 	.word	0xe000ed00

08006118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	@ 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f1c3 0307 	rsb	r3, r3, #7
 8006132:	2b04      	cmp	r3, #4
 8006134:	bf28      	it	cs
 8006136:	2304      	movcs	r3, #4
 8006138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3304      	adds	r3, #4
 800613e:	2b06      	cmp	r3, #6
 8006140:	d902      	bls.n	8006148 <NVIC_EncodePriority+0x30>
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	3b03      	subs	r3, #3
 8006146:	e000      	b.n	800614a <NVIC_EncodePriority+0x32>
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43da      	mvns	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	401a      	ands	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006160:	f04f 31ff 	mov.w	r1, #4294967295
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	43d9      	mvns	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006170:	4313      	orrs	r3, r2
         );
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006190:	d301      	bcc.n	8006196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006192:	2301      	movs	r3, #1
 8006194:	e00f      	b.n	80061b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006196:	4a0a      	ldr	r2, [pc, #40]	@ (80061c0 <SysTick_Config+0x40>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3b01      	subs	r3, #1
 800619c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800619e:	210f      	movs	r1, #15
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	f7ff ff8e 	bl	80060c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <SysTick_Config+0x40>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ae:	4b04      	ldr	r3, [pc, #16]	@ (80061c0 <SysTick_Config+0x40>)
 80061b0:	2207      	movs	r2, #7
 80061b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	e000e010 	.word	0xe000e010

080061c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff29 	bl	8006024 <__NVIC_SetPriorityGrouping>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061ec:	f7ff ff3e 	bl	800606c <__NVIC_GetPriorityGrouping>
 80061f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f7ff ff8e 	bl	8006118 <NVIC_EncodePriority>
 80061fc:	4602      	mov	r2, r0
 80061fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff ff5d 	bl	80060c4 <__NVIC_SetPriority>
}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	4603      	mov	r3, r0
 800621a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800621c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ff31 	bl	8006088 <__NVIC_EnableIRQ>
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff ffa2 	bl	8006180 <SysTick_Config>
 800623c:	4603      	mov	r3, r0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	@ 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e159      	b.n	8006518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006264:	2201      	movs	r2, #1
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4013      	ands	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	429a      	cmp	r2, r3
 800627e:	f040 8148 	bne.w	8006512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d005      	beq.n	800629a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006296:	2b02      	cmp	r3, #2
 8006298:	d130      	bne.n	80062fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	2203      	movs	r2, #3
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062d0:	2201      	movs	r2, #1
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 0201 	and.w	r2, r3, #1
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d017      	beq.n	8006338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	2203      	movs	r2, #3
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	43db      	mvns	r3, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4313      	orrs	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d123      	bne.n	800638c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	08da      	lsrs	r2, r3, #3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3208      	adds	r2, #8
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	220f      	movs	r2, #15
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	08da      	lsrs	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3208      	adds	r2, #8
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	2203      	movs	r2, #3
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 0203 	and.w	r2, r3, #3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80a2 	beq.w	8006512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b57      	ldr	r3, [pc, #348]	@ (8006530 <HAL_GPIO_Init+0x2e8>)
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	4a56      	ldr	r2, [pc, #344]	@ (8006530 <HAL_GPIO_Init+0x2e8>)
 80063d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80063de:	4b54      	ldr	r3, [pc, #336]	@ (8006530 <HAL_GPIO_Init+0x2e8>)
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063ea:	4a52      	ldr	r2, [pc, #328]	@ (8006534 <HAL_GPIO_Init+0x2ec>)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	089b      	lsrs	r3, r3, #2
 80063f0:	3302      	adds	r3, #2
 80063f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	220f      	movs	r2, #15
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	43db      	mvns	r3, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4013      	ands	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a49      	ldr	r2, [pc, #292]	@ (8006538 <HAL_GPIO_Init+0x2f0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d019      	beq.n	800644a <HAL_GPIO_Init+0x202>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a48      	ldr	r2, [pc, #288]	@ (800653c <HAL_GPIO_Init+0x2f4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_GPIO_Init+0x1fe>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <HAL_GPIO_Init+0x2f8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00d      	beq.n	8006442 <HAL_GPIO_Init+0x1fa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a46      	ldr	r2, [pc, #280]	@ (8006544 <HAL_GPIO_Init+0x2fc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d007      	beq.n	800643e <HAL_GPIO_Init+0x1f6>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a45      	ldr	r2, [pc, #276]	@ (8006548 <HAL_GPIO_Init+0x300>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_GPIO_Init+0x1f2>
 8006436:	2304      	movs	r3, #4
 8006438:	e008      	b.n	800644c <HAL_GPIO_Init+0x204>
 800643a:	2307      	movs	r3, #7
 800643c:	e006      	b.n	800644c <HAL_GPIO_Init+0x204>
 800643e:	2303      	movs	r3, #3
 8006440:	e004      	b.n	800644c <HAL_GPIO_Init+0x204>
 8006442:	2302      	movs	r3, #2
 8006444:	e002      	b.n	800644c <HAL_GPIO_Init+0x204>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_GPIO_Init+0x204>
 800644a:	2300      	movs	r3, #0
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	f002 0203 	and.w	r2, r2, #3
 8006452:	0092      	lsls	r2, r2, #2
 8006454:	4093      	lsls	r3, r2
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4313      	orrs	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800645c:	4935      	ldr	r1, [pc, #212]	@ (8006534 <HAL_GPIO_Init+0x2ec>)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	3302      	adds	r3, #2
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800646a:	4b38      	ldr	r3, [pc, #224]	@ (800654c <HAL_GPIO_Init+0x304>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	43db      	mvns	r3, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800648e:	4a2f      	ldr	r2, [pc, #188]	@ (800654c <HAL_GPIO_Init+0x304>)
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006494:	4b2d      	ldr	r3, [pc, #180]	@ (800654c <HAL_GPIO_Init+0x304>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064b8:	4a24      	ldr	r2, [pc, #144]	@ (800654c <HAL_GPIO_Init+0x304>)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064be:	4b23      	ldr	r3, [pc, #140]	@ (800654c <HAL_GPIO_Init+0x304>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	43db      	mvns	r3, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4013      	ands	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064e2:	4a1a      	ldr	r2, [pc, #104]	@ (800654c <HAL_GPIO_Init+0x304>)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064e8:	4b18      	ldr	r3, [pc, #96]	@ (800654c <HAL_GPIO_Init+0x304>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4013      	ands	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800650c:	4a0f      	ldr	r2, [pc, #60]	@ (800654c <HAL_GPIO_Init+0x304>)
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	3301      	adds	r3, #1
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	f67f aea2 	bls.w	8006264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3724      	adds	r7, #36	@ 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40023800 	.word	0x40023800
 8006534:	40013800 	.word	0x40013800
 8006538:	40020000 	.word	0x40020000
 800653c:	40020400 	.word	0x40020400
 8006540:	40020800 	.word	0x40020800
 8006544:	40020c00 	.word	0x40020c00
 8006548:	40021000 	.word	0x40021000
 800654c:	40013c00 	.word	0x40013c00

08006550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e0bb      	b.n	80066e4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800656c:	2201      	movs	r2, #1
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	429a      	cmp	r2, r3
 8006584:	f040 80ab 	bne.w	80066de <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006588:	4a5c      	ldr	r2, [pc, #368]	@ (80066fc <HAL_GPIO_DeInit+0x1ac>)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	089b      	lsrs	r3, r3, #2
 800658e:	3302      	adds	r3, #2
 8006590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006594:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	220f      	movs	r2, #15
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a54      	ldr	r2, [pc, #336]	@ (8006700 <HAL_GPIO_DeInit+0x1b0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d019      	beq.n	80065e6 <HAL_GPIO_DeInit+0x96>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a53      	ldr	r2, [pc, #332]	@ (8006704 <HAL_GPIO_DeInit+0x1b4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_GPIO_DeInit+0x92>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a52      	ldr	r2, [pc, #328]	@ (8006708 <HAL_GPIO_DeInit+0x1b8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00d      	beq.n	80065de <HAL_GPIO_DeInit+0x8e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a51      	ldr	r2, [pc, #324]	@ (800670c <HAL_GPIO_DeInit+0x1bc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <HAL_GPIO_DeInit+0x8a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a50      	ldr	r2, [pc, #320]	@ (8006710 <HAL_GPIO_DeInit+0x1c0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d101      	bne.n	80065d6 <HAL_GPIO_DeInit+0x86>
 80065d2:	2304      	movs	r3, #4
 80065d4:	e008      	b.n	80065e8 <HAL_GPIO_DeInit+0x98>
 80065d6:	2307      	movs	r3, #7
 80065d8:	e006      	b.n	80065e8 <HAL_GPIO_DeInit+0x98>
 80065da:	2303      	movs	r3, #3
 80065dc:	e004      	b.n	80065e8 <HAL_GPIO_DeInit+0x98>
 80065de:	2302      	movs	r3, #2
 80065e0:	e002      	b.n	80065e8 <HAL_GPIO_DeInit+0x98>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <HAL_GPIO_DeInit+0x98>
 80065e6:	2300      	movs	r3, #0
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	f002 0203 	and.w	r2, r2, #3
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	4093      	lsls	r3, r2
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d132      	bne.n	800665e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065f8:	4b46      	ldr	r3, [pc, #280]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	43db      	mvns	r3, r3
 8006600:	4944      	ldr	r1, [pc, #272]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 8006602:	4013      	ands	r3, r2
 8006604:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006606:	4b43      	ldr	r3, [pc, #268]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	4941      	ldr	r1, [pc, #260]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 8006610:	4013      	ands	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006614:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43db      	mvns	r3, r3
 800661c:	493d      	ldr	r1, [pc, #244]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 800661e:	4013      	ands	r3, r2
 8006620:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006622:	4b3c      	ldr	r3, [pc, #240]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	43db      	mvns	r3, r3
 800662a:	493a      	ldr	r1, [pc, #232]	@ (8006714 <HAL_GPIO_DeInit+0x1c4>)
 800662c:	4013      	ands	r3, r2
 800662e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	220f      	movs	r2, #15
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006640:	4a2e      	ldr	r2, [pc, #184]	@ (80066fc <HAL_GPIO_DeInit+0x1ac>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	3302      	adds	r3, #2
 8006648:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	43da      	mvns	r2, r3
 8006650:	482a      	ldr	r0, [pc, #168]	@ (80066fc <HAL_GPIO_DeInit+0x1ac>)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	400a      	ands	r2, r1
 8006658:	3302      	adds	r3, #2
 800665a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	2103      	movs	r1, #3
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	401a      	ands	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	08da      	lsrs	r2, r3, #3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3208      	adds	r2, #8
 800667c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	220f      	movs	r2, #15
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	08d2      	lsrs	r2, r2, #3
 8006694:	4019      	ands	r1, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3208      	adds	r2, #8
 800669a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	2103      	movs	r1, #3
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	2101      	movs	r1, #1
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	fa01 f303 	lsl.w	r3, r1, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	401a      	ands	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	2103      	movs	r1, #3
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	43db      	mvns	r3, r3
 80066d8:	401a      	ands	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	3301      	adds	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	f67f af40 	bls.w	800656c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40013800 	.word	0x40013800
 8006700:	40020000 	.word	0x40020000
 8006704:	40020400 	.word	0x40020400
 8006708:	40020800 	.word	0x40020800
 800670c:	40020c00 	.word	0x40020c00
 8006710:	40021000 	.word	0x40021000
 8006714:	40013c00 	.word	0x40013c00

08006718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
 8006724:	4613      	mov	r3, r2
 8006726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006728:	787b      	ldrb	r3, [r7, #1]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800672e:	887a      	ldrh	r2, [r7, #2]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006734:	e003      	b.n	800673e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006736:	887b      	ldrh	r3, [r7, #2]
 8006738:	041a      	lsls	r2, r3, #16
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	619a      	str	r2, [r3, #24]
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006756:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006762:	4a05      	ldr	r2, [pc, #20]	@ (8006778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	4618      	mov	r0, r3
 800676c:	f7fb fad2 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40013c00 	.word	0x40013c00

0800677c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e12b      	b.n	80069e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fb ff0e 	bl	80025c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	@ 0x24
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0201 	bic.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067e0:	f001 fcaa 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 80067e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4a81      	ldr	r2, [pc, #516]	@ (80069f0 <HAL_I2C_Init+0x274>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d807      	bhi.n	8006800 <HAL_I2C_Init+0x84>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a80      	ldr	r2, [pc, #512]	@ (80069f4 <HAL_I2C_Init+0x278>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	bf94      	ite	ls
 80067f8:	2301      	movls	r3, #1
 80067fa:	2300      	movhi	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e006      	b.n	800680e <HAL_I2C_Init+0x92>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a7d      	ldr	r2, [pc, #500]	@ (80069f8 <HAL_I2C_Init+0x27c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	bf94      	ite	ls
 8006808:	2301      	movls	r3, #1
 800680a:	2300      	movhi	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e0e7      	b.n	80069e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a78      	ldr	r2, [pc, #480]	@ (80069fc <HAL_I2C_Init+0x280>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	0c9b      	lsrs	r3, r3, #18
 8006820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a6a      	ldr	r2, [pc, #424]	@ (80069f0 <HAL_I2C_Init+0x274>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d802      	bhi.n	8006850 <HAL_I2C_Init+0xd4>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3301      	adds	r3, #1
 800684e:	e009      	b.n	8006864 <HAL_I2C_Init+0xe8>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	4a69      	ldr	r2, [pc, #420]	@ (8006a00 <HAL_I2C_Init+0x284>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	099b      	lsrs	r3, r3, #6
 8006862:	3301      	adds	r3, #1
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	430b      	orrs	r3, r1
 800686a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006876:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	495c      	ldr	r1, [pc, #368]	@ (80069f0 <HAL_I2C_Init+0x274>)
 8006880:	428b      	cmp	r3, r1
 8006882:	d819      	bhi.n	80068b8 <HAL_I2C_Init+0x13c>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	1e59      	subs	r1, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006898:	400b      	ands	r3, r1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_I2C_Init+0x138>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1e59      	subs	r1, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ac:	3301      	adds	r3, #1
 80068ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b2:	e051      	b.n	8006958 <HAL_I2C_Init+0x1dc>
 80068b4:	2304      	movs	r3, #4
 80068b6:	e04f      	b.n	8006958 <HAL_I2C_Init+0x1dc>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d111      	bne.n	80068e4 <HAL_I2C_Init+0x168>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	1e58      	subs	r0, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	440b      	add	r3, r1
 80068ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80068d2:	3301      	adds	r3, #1
 80068d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	e012      	b.n	800690a <HAL_I2C_Init+0x18e>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1e58      	subs	r0, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6859      	ldr	r1, [r3, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	0099      	lsls	r1, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068fa:	3301      	adds	r3, #1
 80068fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_Init+0x196>
 800690e:	2301      	movs	r3, #1
 8006910:	e022      	b.n	8006958 <HAL_I2C_Init+0x1dc>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10e      	bne.n	8006938 <HAL_I2C_Init+0x1bc>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1e58      	subs	r0, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6859      	ldr	r1, [r3, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	440b      	add	r3, r1
 8006928:	fbb0 f3f3 	udiv	r3, r0, r3
 800692c:	3301      	adds	r3, #1
 800692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006936:	e00f      	b.n	8006958 <HAL_I2C_Init+0x1dc>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1e58      	subs	r0, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	0099      	lsls	r1, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	fbb0 f3f3 	udiv	r3, r0, r3
 800694e:	3301      	adds	r3, #1
 8006950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006954:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	6809      	ldr	r1, [r1, #0]
 800695c:	4313      	orrs	r3, r2
 800695e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69da      	ldr	r2, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006986:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6911      	ldr	r1, [r2, #16]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68d2      	ldr	r2, [r2, #12]
 8006992:	4311      	orrs	r1, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	430b      	orrs	r3, r1
 800699a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	000186a0 	.word	0x000186a0
 80069f4:	001e847f 	.word	0x001e847f
 80069f8:	003d08ff 	.word	0x003d08ff
 80069fc:	431bde83 	.word	0x431bde83
 8006a00:	10624dd3 	.word	0x10624dd3

08006a04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e021      	b.n	8006a5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	@ 0x24
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb fe30 	bl	8002694 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	460b      	mov	r3, r1
 8006a78:	813b      	strh	r3, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a7e:	f7ff fa81 	bl	8005f84 <HAL_GetTick>
 8006a82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	f040 80d9 	bne.w	8006c44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2319      	movs	r3, #25
 8006a98:	2201      	movs	r2, #1
 8006a9a:	496d      	ldr	r1, [pc, #436]	@ (8006c50 <HAL_I2C_Mem_Write+0x1ec>)
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fca5 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e0cc      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_I2C_Mem_Write+0x56>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0c5      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d007      	beq.n	8006ae0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	@ 0x21
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2240      	movs	r2, #64	@ 0x40
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a3a      	ldr	r2, [r7, #32]
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c54 <HAL_I2C_Mem_Write+0x1f0>)
 8006b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b22:	88f8      	ldrh	r0, [r7, #6]
 8006b24:	893a      	ldrh	r2, [r7, #8]
 8006b26:	8979      	ldrh	r1, [r7, #10]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	4603      	mov	r3, r0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fadc 	bl	80070f0 <I2C_RequestMemoryWrite>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d052      	beq.n	8006be4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e081      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fd6a 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d107      	bne.n	8006b6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e06b      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d11b      	bne.n	8006be4 <HAL_I2C_Mem_Write+0x180>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d017      	beq.n	8006be4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1aa      	bne.n	8006b42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fd5d 	bl	80076b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00d      	beq.n	8006c18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d107      	bne.n	8006c14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e016      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e000      	b.n	8006c46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	00100002 	.word	0x00100002
 8006c54:	ffff0000 	.word	0xffff0000

08006c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	@ 0x30
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	817b      	strh	r3, [r7, #10]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	813b      	strh	r3, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c72:	f7ff f987 	bl	8005f84 <HAL_GetTick>
 8006c76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	f040 8214 	bne.w	80070ae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2319      	movs	r3, #25
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	497b      	ldr	r1, [pc, #492]	@ (8006e7c <HAL_I2C_Mem_Read+0x224>)
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fbab 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e207      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_I2C_Mem_Read+0x56>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e200      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d007      	beq.n	8006cd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2222      	movs	r2, #34	@ 0x22
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a5b      	ldr	r2, [pc, #364]	@ (8006e80 <HAL_I2C_Mem_Read+0x228>)
 8006d14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d16:	88f8      	ldrh	r0, [r7, #6]
 8006d18:	893a      	ldrh	r2, [r7, #8]
 8006d1a:	8979      	ldrh	r1, [r7, #10]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4603      	mov	r3, r0
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fa78 	bl	800721c <I2C_RequestMemoryRead>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e1bc      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d113      	bne.n	8006d66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e190      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d11b      	bne.n	8006da6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e170      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d11b      	bne.n	8006de6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	e150      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dfc:	e144      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	f200 80f1 	bhi.w	8006fea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d123      	bne.n	8006e58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fc93 	bl	8007740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e145      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e56:	e117      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d14e      	bne.n	8006efe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	2200      	movs	r2, #0
 8006e68:	4906      	ldr	r1, [pc, #24]	@ (8006e84 <HAL_I2C_Mem_Read+0x22c>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fabe 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e11a      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
 8006e7a:	bf00      	nop
 8006e7c:	00100002 	.word	0x00100002
 8006e80:	ffff0000 	.word	0xffff0000
 8006e84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006efc:	e0c4      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	2200      	movs	r2, #0
 8006f06:	496c      	ldr	r1, [pc, #432]	@ (80070b8 <HAL_I2C_Mem_Read+0x460>)
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fa6f 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0cb      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f60:	2200      	movs	r2, #0
 8006f62:	4955      	ldr	r1, [pc, #340]	@ (80070b8 <HAL_I2C_Mem_Read+0x460>)
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa41 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e09d      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fe8:	e04e      	b.n	8007088 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fba6 	bl	8007740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e058      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b04      	cmp	r3, #4
 800703c:	d124      	bne.n	8007088 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007042:	2b03      	cmp	r3, #3
 8007044:	d107      	bne.n	8007056 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007054:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f aeb6 	bne.w	8006dfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3728      	adds	r7, #40	@ 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	00010004 	.word	0x00010004

080070bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ca:	b2db      	uxtb	r3, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	817b      	strh	r3, [r7, #10]
 8007102:	460b      	mov	r3, r1
 8007104:	813b      	strh	r3, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	2200      	movs	r2, #0
 8007122:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f960 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007140:	d103      	bne.n	800714a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007148:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e05f      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800714e:	897b      	ldrh	r3, [r7, #10]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800715c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	492d      	ldr	r1, [pc, #180]	@ (8007218 <I2C_RequestMemoryWrite+0x128>)
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f9bb 	bl	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e04c      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718c:	6a39      	ldr	r1, [r7, #32]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fa46 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d107      	bne.n	80071b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e02b      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	611a      	str	r2, [r3, #16]
 80071c6:	e021      	b.n	800720c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071c8:	893b      	ldrh	r3, [r7, #8]
 80071ca:	0a1b      	lsrs	r3, r3, #8
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d8:	6a39      	ldr	r1, [r7, #32]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 fa20 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d107      	bne.n	80071fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e005      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007202:	893b      	ldrh	r3, [r7, #8]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	00010002 	.word	0x00010002

0800721c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4603      	mov	r3, r0
 800722c:	817b      	strh	r3, [r7, #10]
 800722e:	460b      	mov	r3, r1
 8007230:	813b      	strh	r3, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007244:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	2200      	movs	r2, #0
 800725e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f8c2 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727c:	d103      	bne.n	8007286 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e0aa      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800728a:	897b      	ldrh	r3, [r7, #10]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	4952      	ldr	r1, [pc, #328]	@ (80073e8 <I2C_RequestMemoryRead+0x1cc>)
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f91d 	bl	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e097      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c8:	6a39      	ldr	r1, [r7, #32]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f9a8 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d107      	bne.n	80072ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e076      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d105      	bne.n	8007304 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072f8:	893b      	ldrh	r3, [r7, #8]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	611a      	str	r2, [r3, #16]
 8007302:	e021      	b.n	8007348 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007304:	893b      	ldrh	r3, [r7, #8]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	b29b      	uxth	r3, r3
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007314:	6a39      	ldr	r1, [r7, #32]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f982 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00d      	beq.n	800733e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007326:	2b04      	cmp	r3, #4
 8007328:	d107      	bne.n	800733a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e050      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800733e:	893b      	ldrh	r3, [r7, #8]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734a:	6a39      	ldr	r1, [r7, #32]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f967 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735c:	2b04      	cmp	r3, #4
 800735e:	d107      	bne.n	8007370 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800736e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e035      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007382:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2200      	movs	r2, #0
 800738c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f82b 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073aa:	d103      	bne.n	80073b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e013      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073b8:	897b      	ldrh	r3, [r7, #10]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	4906      	ldr	r1, [pc, #24]	@ (80073e8 <I2C_RequestMemoryRead+0x1cc>)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f886 	bl	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	00010002 	.word	0x00010002

080073ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fc:	e048      	b.n	8007490 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d044      	beq.n	8007490 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007406:	f7fe fdbd 	bl	8005f84 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d139      	bne.n	8007490 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d10d      	bne.n	8007442 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	43da      	mvns	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	e00c      	b.n	800745c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	43da      	mvns	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	4013      	ands	r3, r2
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2301      	moveq	r3, #1
 8007456:	2300      	movne	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	429a      	cmp	r2, r3
 8007460:	d116      	bne.n	8007490 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e023      	b.n	80074d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b01      	cmp	r3, #1
 8007498:	d10d      	bne.n	80074b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	43da      	mvns	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	e00c      	b.n	80074d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	43da      	mvns	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4013      	ands	r3, r2
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d093      	beq.n	80073fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ee:	e071      	b.n	80075d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074fe:	d123      	bne.n	8007548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800750e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007534:	f043 0204 	orr.w	r2, r3, #4
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e067      	b.n	8007618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d041      	beq.n	80075d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007550:	f7fe fd18 	bl	8005f84 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d136      	bne.n	80075d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	0c1b      	lsrs	r3, r3, #16
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10c      	bne.n	800758a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	43da      	mvns	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4013      	ands	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	e00b      	b.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	43da      	mvns	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4013      	ands	r3, r2
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	f043 0220 	orr.w	r2, r3, #32
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e021      	b.n	8007618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10c      	bne.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	43da      	mvns	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4013      	ands	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bf14      	ite	ne
 80075f0:	2301      	movne	r3, #1
 80075f2:	2300      	moveq	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	e00b      	b.n	8007610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	43da      	mvns	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4013      	ands	r3, r2
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2301      	movne	r3, #1
 800760c:	2300      	moveq	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f af6d 	bne.w	80074f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800762c:	e034      	b.n	8007698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f8e3 	bl	80077fa <I2C_IsAcknowledgeFailed>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e034      	b.n	80076a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d028      	beq.n	8007698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007646:	f7fe fc9d 	bl	8005f84 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11d      	bne.n	8007698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d016      	beq.n	8007698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e007      	b.n	80076a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b80      	cmp	r3, #128	@ 0x80
 80076a4:	d1c3      	bne.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076bc:	e034      	b.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f89b 	bl	80077fa <I2C_IsAcknowledgeFailed>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e034      	b.n	8007738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d028      	beq.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fe fc55 	bl	8005f84 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d11d      	bne.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d016      	beq.n	8007728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e007      	b.n	8007738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b04      	cmp	r3, #4
 8007734:	d1c3      	bne.n	80076be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800774c:	e049      	b.n	80077e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b10      	cmp	r3, #16
 800775a:	d119      	bne.n	8007790 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0210 	mvn.w	r2, #16
 8007764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e030      	b.n	80077f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007790:	f7fe fbf8 	bl	8005f84 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d11d      	bne.n	80077e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d016      	beq.n	80077e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e007      	b.n	80077f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ec:	2b40      	cmp	r3, #64	@ 0x40
 80077ee:	d1ae      	bne.n	800774e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800780c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007810:	d11b      	bne.n	800784a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800781a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	f043 0204 	orr.w	r2, r3, #4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e267      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d075      	beq.n	8007962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007876:	4b88      	ldr	r3, [pc, #544]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
 800787e:	2b04      	cmp	r3, #4
 8007880:	d00c      	beq.n	800789c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007882:	4b85      	ldr	r3, [pc, #532]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800788a:	2b08      	cmp	r3, #8
 800788c:	d112      	bne.n	80078b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800788e:	4b82      	ldr	r3, [pc, #520]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800789a:	d10b      	bne.n	80078b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800789c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05b      	beq.n	8007960 <HAL_RCC_OscConfig+0x108>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d157      	bne.n	8007960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e242      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d106      	bne.n	80078cc <HAL_RCC_OscConfig+0x74>
 80078be:	4b76      	ldr	r3, [pc, #472]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a75      	ldr	r2, [pc, #468]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e01d      	b.n	8007908 <HAL_RCC_OscConfig+0xb0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d4:	d10c      	bne.n	80078f0 <HAL_RCC_OscConfig+0x98>
 80078d6:	4b70      	ldr	r3, [pc, #448]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a6f      	ldr	r2, [pc, #444]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a6c      	ldr	r2, [pc, #432]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e00b      	b.n	8007908 <HAL_RCC_OscConfig+0xb0>
 80078f0:	4b69      	ldr	r3, [pc, #420]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a68      	ldr	r2, [pc, #416]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b66      	ldr	r3, [pc, #408]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a65      	ldr	r2, [pc, #404]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007910:	f7fe fb38 	bl	8005f84 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007918:	f7fe fb34 	bl	8005f84 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	@ 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e207      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800792a:	4b5b      	ldr	r3, [pc, #364]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCC_OscConfig+0xc0>
 8007936:	e014      	b.n	8007962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007938:	f7fe fb24 	bl	8005f84 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007940:	f7fe fb20 	bl	8005f84 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b64      	cmp	r3, #100	@ 0x64
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e1f3      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007952:	4b51      	ldr	r3, [pc, #324]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0xe8>
 800795e:	e000      	b.n	8007962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d063      	beq.n	8007a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800796e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 030c 	and.w	r3, r3, #12
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800797a:	4b47      	ldr	r3, [pc, #284]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007982:	2b08      	cmp	r3, #8
 8007984:	d11c      	bne.n	80079c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007986:	4b44      	ldr	r3, [pc, #272]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d116      	bne.n	80079c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007992:	4b41      	ldr	r3, [pc, #260]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <HAL_RCC_OscConfig+0x152>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d001      	beq.n	80079aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e1c7      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4937      	ldr	r1, [pc, #220]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079be:	e03a      	b.n	8007a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d020      	beq.n	8007a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079c8:	4b34      	ldr	r3, [pc, #208]	@ (8007a9c <HAL_RCC_OscConfig+0x244>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ce:	f7fe fad9 	bl	8005f84 <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079d6:	f7fe fad5 	bl	8005f84 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e1a8      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0f0      	beq.n	80079d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f4:	4b28      	ldr	r3, [pc, #160]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	4925      	ldr	r1, [pc, #148]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	600b      	str	r3, [r1, #0]
 8007a08:	e015      	b.n	8007a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a0a:	4b24      	ldr	r3, [pc, #144]	@ (8007a9c <HAL_RCC_OscConfig+0x244>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fe fab8 	bl	8005f84 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a18:	f7fe fab4 	bl	8005f84 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e187      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d036      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d016      	beq.n	8007a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a4a:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <HAL_RCC_OscConfig+0x248>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a50:	f7fe fa98 	bl	8005f84 <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a58:	f7fe fa94 	bl	8005f84 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e167      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a98 <HAL_RCC_OscConfig+0x240>)
 8007a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x200>
 8007a76:	e01b      	b.n	8007ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a78:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <HAL_RCC_OscConfig+0x248>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a7e:	f7fe fa81 	bl	8005f84 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a84:	e00e      	b.n	8007aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a86:	f7fe fa7d 	bl	8005f84 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d907      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e150      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	42470000 	.word	0x42470000
 8007aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa4:	4b88      	ldr	r3, [pc, #544]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ea      	bne.n	8007a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8097 	beq.w	8007bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ac2:	4b81      	ldr	r3, [pc, #516]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10f      	bne.n	8007aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ade:	4b7a      	ldr	r3, [pc, #488]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aee:	4b77      	ldr	r3, [pc, #476]	@ (8007ccc <HAL_RCC_OscConfig+0x474>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d118      	bne.n	8007b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007afa:	4b74      	ldr	r3, [pc, #464]	@ (8007ccc <HAL_RCC_OscConfig+0x474>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a73      	ldr	r2, [pc, #460]	@ (8007ccc <HAL_RCC_OscConfig+0x474>)
 8007b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b06:	f7fe fa3d 	bl	8005f84 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b0e:	f7fe fa39 	bl	8005f84 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e10c      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b20:	4b6a      	ldr	r3, [pc, #424]	@ (8007ccc <HAL_RCC_OscConfig+0x474>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0f0      	beq.n	8007b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d106      	bne.n	8007b42 <HAL_RCC_OscConfig+0x2ea>
 8007b34:	4b64      	ldr	r3, [pc, #400]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b38:	4a63      	ldr	r2, [pc, #396]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b40:	e01c      	b.n	8007b7c <HAL_RCC_OscConfig+0x324>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d10c      	bne.n	8007b64 <HAL_RCC_OscConfig+0x30c>
 8007b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b50:	f043 0304 	orr.w	r3, r3, #4
 8007b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b56:	4b5c      	ldr	r3, [pc, #368]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b62:	e00b      	b.n	8007b7c <HAL_RCC_OscConfig+0x324>
 8007b64:	4b58      	ldr	r3, [pc, #352]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b68:	4a57      	ldr	r2, [pc, #348]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b6a:	f023 0301 	bic.w	r3, r3, #1
 8007b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b70:	4b55      	ldr	r3, [pc, #340]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b74:	4a54      	ldr	r2, [pc, #336]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007b76:	f023 0304 	bic.w	r3, r3, #4
 8007b7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d015      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fe f9fe 	bl	8005f84 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b8a:	e00a      	b.n	8007ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8c:	f7fe f9fa 	bl	8005f84 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e0cb      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ba2:	4b49      	ldr	r3, [pc, #292]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ee      	beq.n	8007b8c <HAL_RCC_OscConfig+0x334>
 8007bae:	e014      	b.n	8007bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bb0:	f7fe f9e8 	bl	8005f84 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb6:	e00a      	b.n	8007bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb8:	f7fe f9e4 	bl	8005f84 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e0b5      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bce:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1ee      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d105      	bne.n	8007bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007be0:	4b39      	ldr	r3, [pc, #228]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	4a38      	ldr	r2, [pc, #224]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80a1 	beq.w	8007d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bf6:	4b34      	ldr	r3, [pc, #208]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 030c 	and.w	r3, r3, #12
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d05c      	beq.n	8007cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d141      	bne.n	8007c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0a:	4b31      	ldr	r3, [pc, #196]	@ (8007cd0 <HAL_RCC_OscConfig+0x478>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fe f9b8 	bl	8005f84 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fe f9b4 	bl	8005f84 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e087      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2a:	4b27      	ldr	r3, [pc, #156]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69da      	ldr	r2, [r3, #28]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	019b      	lsls	r3, r3, #6
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	061b      	lsls	r3, r3, #24
 8007c5a:	491b      	ldr	r1, [pc, #108]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c60:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd0 <HAL_RCC_OscConfig+0x478>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c66:	f7fe f98d 	bl	8005f84 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c6e:	f7fe f989 	bl	8005f84 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e05c      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c80:	4b11      	ldr	r3, [pc, #68]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x416>
 8007c8c:	e054      	b.n	8007d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8e:	4b10      	ldr	r3, [pc, #64]	@ (8007cd0 <HAL_RCC_OscConfig+0x478>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c94:	f7fe f976 	bl	8005f84 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7fe f972 	bl	8005f84 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e045      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <HAL_RCC_OscConfig+0x470>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1f0      	bne.n	8007c9c <HAL_RCC_OscConfig+0x444>
 8007cba:	e03d      	b.n	8007d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e038      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40007000 	.word	0x40007000
 8007cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d44 <HAL_RCC_OscConfig+0x4ec>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d028      	beq.n	8007d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d121      	bne.n	8007d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d11a      	bne.n	8007d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d04:	4013      	ands	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d111      	bne.n	8007d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d107      	bne.n	8007d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40023800 	.word	0x40023800

08007d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0cc      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d5c:	4b68      	ldr	r3, [pc, #416]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d90c      	bls.n	8007d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6a:	4b65      	ldr	r3, [pc, #404]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d72:	4b63      	ldr	r3, [pc, #396]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0b8      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d020      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d9c:	4b59      	ldr	r3, [pc, #356]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	4a58      	ldr	r2, [pc, #352]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007db4:	4b53      	ldr	r3, [pc, #332]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	4a52      	ldr	r2, [pc, #328]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dc0:	4b50      	ldr	r3, [pc, #320]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	494d      	ldr	r1, [pc, #308]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d044      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d107      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de6:	4b47      	ldr	r3, [pc, #284]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d119      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e07f      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d107      	bne.n	8007e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e06:	4b3f      	ldr	r3, [pc, #252]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e06f      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e16:	4b3b      	ldr	r3, [pc, #236]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e067      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e26:	4b37      	ldr	r3, [pc, #220]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f023 0203 	bic.w	r2, r3, #3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	4934      	ldr	r1, [pc, #208]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e38:	f7fe f8a4 	bl	8005f84 <HAL_GetTick>
 8007e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3e:	e00a      	b.n	8007e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e40:	f7fe f8a0 	bl	8005f84 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e04f      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e56:	4b2b      	ldr	r3, [pc, #172]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 020c 	and.w	r2, r3, #12
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d1eb      	bne.n	8007e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e68:	4b25      	ldr	r3, [pc, #148]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d20c      	bcs.n	8007e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e76:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7e:	4b20      	ldr	r3, [pc, #128]	@ (8007f00 <HAL_RCC_ClockConfig+0x1b8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d001      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e032      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e9c:	4b19      	ldr	r3, [pc, #100]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4916      	ldr	r1, [pc, #88]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eba:	4b12      	ldr	r3, [pc, #72]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	490e      	ldr	r1, [pc, #56]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ece:	f000 f821 	bl	8007f14 <HAL_RCC_GetSysClockFreq>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	490a      	ldr	r1, [pc, #40]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007ee0:	5ccb      	ldrb	r3, [r1, r3]
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	4a09      	ldr	r2, [pc, #36]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe f804 	bl	8005efc <HAL_InitTick>

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40023c00 	.word	0x40023c00
 8007f04:	40023800 	.word	0x40023800
 8007f08:	08021c04 	.word	0x08021c04
 8007f0c:	2000003c 	.word	0x2000003c
 8007f10:	20000040 	.word	0x20000040

08007f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f18:	b094      	sub	sp, #80	@ 0x50
 8007f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f20:	2300      	movs	r3, #0
 8007f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f24:	2300      	movs	r3, #0
 8007f26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f2c:	4b79      	ldr	r3, [pc, #484]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 030c 	and.w	r3, r3, #12
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d00d      	beq.n	8007f54 <HAL_RCC_GetSysClockFreq+0x40>
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	f200 80e1 	bhi.w	8008100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <HAL_RCC_GetSysClockFreq+0x34>
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d003      	beq.n	8007f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f46:	e0db      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f48:	4b73      	ldr	r3, [pc, #460]	@ (8008118 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007f4c:	e0db      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f4e:	4b73      	ldr	r3, [pc, #460]	@ (800811c <HAL_RCC_GetSysClockFreq+0x208>)
 8007f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f52:	e0d8      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f54:	4b6f      	ldr	r3, [pc, #444]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d063      	beq.n	8008032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	099b      	lsrs	r3, r3, #6
 8007f70:	2200      	movs	r2, #0
 8007f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f7e:	2300      	movs	r3, #0
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f04f 0000 	mov.w	r0, #0
 8007f8e:	f04f 0100 	mov.w	r1, #0
 8007f92:	0159      	lsls	r1, r3, #5
 8007f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f98:	0150      	lsls	r0, r2, #5
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	1a51      	subs	r1, r2, r1
 8007fa2:	6139      	str	r1, [r7, #16]
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb8:	4659      	mov	r1, fp
 8007fba:	018b      	lsls	r3, r1, #6
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	018a      	lsls	r2, r1, #6
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8007fcc:	4659      	mov	r1, fp
 8007fce:	eb63 0901 	sbc.w	r9, r3, r1
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fe6:	4690      	mov	r8, r2
 8007fe8:	4699      	mov	r9, r3
 8007fea:	4623      	mov	r3, r4
 8007fec:	eb18 0303 	adds.w	r3, r8, r3
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	eb49 0303 	adc.w	r3, r9, r3
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008006:	4629      	mov	r1, r5
 8008008:	024b      	lsls	r3, r1, #9
 800800a:	4621      	mov	r1, r4
 800800c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008010:	4621      	mov	r1, r4
 8008012:	024a      	lsls	r2, r1, #9
 8008014:	4610      	mov	r0, r2
 8008016:	4619      	mov	r1, r3
 8008018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801a:	2200      	movs	r2, #0
 800801c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800801e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008024:	f7f8 fe18 	bl	8000c58 <__aeabi_uldivmod>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4613      	mov	r3, r2
 800802e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008030:	e058      	b.n	80080e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008032:	4b38      	ldr	r3, [pc, #224]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	2200      	movs	r2, #0
 800803a:	4618      	mov	r0, r3
 800803c:	4611      	mov	r1, r2
 800803e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008042:	623b      	str	r3, [r7, #32]
 8008044:	2300      	movs	r3, #0
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
 8008048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	f04f 0000 	mov.w	r0, #0
 8008054:	f04f 0100 	mov.w	r1, #0
 8008058:	0159      	lsls	r1, r3, #5
 800805a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800805e:	0150      	lsls	r0, r2, #5
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4641      	mov	r1, r8
 8008066:	ebb2 0a01 	subs.w	sl, r2, r1
 800806a:	4649      	mov	r1, r9
 800806c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800807c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008084:	ebb2 040a 	subs.w	r4, r2, sl
 8008088:	eb63 050b 	sbc.w	r5, r3, fp
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	00eb      	lsls	r3, r5, #3
 8008096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800809a:	00e2      	lsls	r2, r4, #3
 800809c:	4614      	mov	r4, r2
 800809e:	461d      	mov	r5, r3
 80080a0:	4643      	mov	r3, r8
 80080a2:	18e3      	adds	r3, r4, r3
 80080a4:	603b      	str	r3, [r7, #0]
 80080a6:	464b      	mov	r3, r9
 80080a8:	eb45 0303 	adc.w	r3, r5, r3
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080ba:	4629      	mov	r1, r5
 80080bc:	028b      	lsls	r3, r1, #10
 80080be:	4621      	mov	r1, r4
 80080c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080c4:	4621      	mov	r1, r4
 80080c6:	028a      	lsls	r2, r1, #10
 80080c8:	4610      	mov	r0, r2
 80080ca:	4619      	mov	r1, r3
 80080cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ce:	2200      	movs	r2, #0
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	61fa      	str	r2, [r7, #28]
 80080d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d8:	f7f8 fdbe 	bl	8000c58 <__aeabi_uldivmod>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4613      	mov	r3, r2
 80080e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	3301      	adds	r3, #1
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80080f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080fe:	e002      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <HAL_RCC_GetSysClockFreq+0x204>)
 8008102:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008108:	4618      	mov	r0, r3
 800810a:	3750      	adds	r7, #80	@ 0x50
 800810c:	46bd      	mov	sp, r7
 800810e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008112:	bf00      	nop
 8008114:	40023800 	.word	0x40023800
 8008118:	00f42400 	.word	0x00f42400
 800811c:	007a1200 	.word	0x007a1200

08008120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008124:	4b03      	ldr	r3, [pc, #12]	@ (8008134 <HAL_RCC_GetHCLKFreq+0x14>)
 8008126:	681b      	ldr	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000003c 	.word	0x2000003c

08008138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800813c:	f7ff fff0 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008140:	4602      	mov	r2, r0
 8008142:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	0a9b      	lsrs	r3, r3, #10
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	4903      	ldr	r1, [pc, #12]	@ (800815c <HAL_RCC_GetPCLK1Freq+0x24>)
 800814e:	5ccb      	ldrb	r3, [r1, r3]
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40023800 	.word	0x40023800
 800815c:	08021c14 	.word	0x08021c14

08008160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008164:	f7ff ffdc 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008168:	4602      	mov	r2, r0
 800816a:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	0b5b      	lsrs	r3, r3, #13
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	4903      	ldr	r1, [pc, #12]	@ (8008184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008176:	5ccb      	ldrb	r3, [r1, r3]
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40023800 	.word	0x40023800
 8008184:	08021c14 	.word	0x08021c14

08008188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e041      	b.n	800821e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fa fa94 	bl	80026dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f000 f946 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d020      	beq.n	800828a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01b      	beq.n	800828a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f06f 0202 	mvn.w	r2, #2
 800825a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f8d2 	bl	800841a <HAL_TIM_IC_CaptureCallback>
 8008276:	e005      	b.n	8008284 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f8c4 	bl	8008406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8d5 	bl	800842e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01b      	beq.n	80082d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f06f 0204 	mvn.w	r2, #4
 80082a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8ac 	bl	800841a <HAL_TIM_IC_CaptureCallback>
 80082c2:	e005      	b.n	80082d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f89e 	bl	8008406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8af 	bl	800842e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d020      	beq.n	8008322 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01b      	beq.n	8008322 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0208 	mvn.w	r2, #8
 80082f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2204      	movs	r2, #4
 80082f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f886 	bl	800841a <HAL_TIM_IC_CaptureCallback>
 800830e:	e005      	b.n	800831c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f878 	bl	8008406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f889 	bl	800842e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	d020      	beq.n	800836e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01b      	beq.n	800836e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f06f 0210 	mvn.w	r2, #16
 800833e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2208      	movs	r2, #8
 8008344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f860 	bl	800841a <HAL_TIM_IC_CaptureCallback>
 800835a:	e005      	b.n	8008368 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f852 	bl	8008406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f863 	bl	800842e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f06f 0201 	mvn.w	r2, #1
 800838a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7fa f86b 	bl	8002468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00c      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f8e7 	bl	8008584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00c      	beq.n	80083da <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f834 	bl	8008442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00c      	beq.n	80083fe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0220 	mvn.w	r2, #32
 80083f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8b9 	bl	8008570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a3a      	ldr	r2, [pc, #232]	@ (8008554 <TIM_Base_SetConfig+0xfc>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00f      	beq.n	8008490 <TIM_Base_SetConfig+0x38>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008476:	d00b      	beq.n	8008490 <TIM_Base_SetConfig+0x38>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a37      	ldr	r2, [pc, #220]	@ (8008558 <TIM_Base_SetConfig+0x100>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_Base_SetConfig+0x38>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a36      	ldr	r2, [pc, #216]	@ (800855c <TIM_Base_SetConfig+0x104>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_Base_SetConfig+0x38>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a35      	ldr	r2, [pc, #212]	@ (8008560 <TIM_Base_SetConfig+0x108>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d108      	bne.n	80084a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008554 <TIM_Base_SetConfig+0xfc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01b      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b0:	d017      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a28      	ldr	r2, [pc, #160]	@ (8008558 <TIM_Base_SetConfig+0x100>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d013      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a27      	ldr	r2, [pc, #156]	@ (800855c <TIM_Base_SetConfig+0x104>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00f      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a26      	ldr	r2, [pc, #152]	@ (8008560 <TIM_Base_SetConfig+0x108>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a25      	ldr	r2, [pc, #148]	@ (8008564 <TIM_Base_SetConfig+0x10c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <TIM_Base_SetConfig+0x110>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a23      	ldr	r2, [pc, #140]	@ (800856c <TIM_Base_SetConfig+0x114>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d108      	bne.n	80084f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a0e      	ldr	r2, [pc, #56]	@ (8008554 <TIM_Base_SetConfig+0xfc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d103      	bne.n	8008528 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b01      	cmp	r3, #1
 8008538:	d105      	bne.n	8008546 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]
  }
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40010000 	.word	0x40010000
 8008558:	40000400 	.word	0x40000400
 800855c:	40000800 	.word	0x40000800
 8008560:	40000c00 	.word	0x40000c00
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e042      	b.n	8008630 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f83a 	bl	8008638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2224      	movs	r2, #36	@ 0x24
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa13 	bl	8008a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695a      	ldr	r2, [r3, #20]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	@ 0x28
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b20      	cmp	r3, #32
 800866a:	d175      	bne.n	8008758 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_UART_Transmit+0x2c>
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e06e      	b.n	800875a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2221      	movs	r2, #33	@ 0x21
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800868a:	f7fd fc7b 	bl	8005f84 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	88fa      	ldrh	r2, [r7, #6]
 8008694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a4:	d108      	bne.n	80086b8 <HAL_UART_Transmit+0x6c>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	e003      	b.n	80086c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086c0:	e02e      	b.n	8008720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2200      	movs	r2, #0
 80086ca:	2180      	movs	r1, #128	@ 0x80
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f8df 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e03a      	b.n	800875a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	3302      	adds	r3, #2
 80086fe:	61bb      	str	r3, [r7, #24]
 8008700:	e007      	b.n	8008712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	781a      	ldrb	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	3301      	adds	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1cb      	bne.n	80086c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2200      	movs	r2, #0
 8008732:	2140      	movs	r1, #64	@ 0x40
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f8ab 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e006      	b.n	800875a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e000      	b.n	800875a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b08a      	sub	sp, #40	@ 0x28
 8008766:	af02      	add	r7, sp, #8
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b20      	cmp	r3, #32
 8008780:	f040 8081 	bne.w	8008886 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_UART_Receive+0x2e>
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e079      	b.n	8008888 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2222      	movs	r2, #34	@ 0x22
 800879e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087a8:	f7fd fbec 	bl	8005f84 <HAL_GetTick>
 80087ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c2:	d108      	bne.n	80087d6 <HAL_UART_Receive+0x74>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	e003      	b.n	80087de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80087de:	e047      	b.n	8008870 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2200      	movs	r2, #0
 80087e8:	2120      	movs	r1, #32
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f850 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e042      	b.n	8008888 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008814:	b29a      	uxth	r2, r3
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	3302      	adds	r3, #2
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	e01f      	b.n	8008862 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800882a:	d007      	beq.n	800883c <HAL_UART_Receive+0xda>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <HAL_UART_Receive+0xe8>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	b2da      	uxtb	r2, r3
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	701a      	strb	r2, [r3, #0]
 8008848:	e008      	b.n	800885c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008856:	b2da      	uxtb	r2, r3
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1b2      	bne.n	80087e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e000      	b.n	8008888 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008886:	2302      	movs	r3, #2
  }
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a0:	e03b      	b.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d037      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088aa:	f7fd fb6b 	bl	8005f84 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	6a3a      	ldr	r2, [r7, #32]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d302      	bcc.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e03a      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f003 0304 	and.w	r3, r3, #4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d023      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b80      	cmp	r3, #128	@ 0x80
 80088d6:	d020      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d01d      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d116      	bne.n	800891a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 f81d 	bl	8008942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2208      	movs	r2, #8
 800890c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e00f      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4013      	ands	r3, r2
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	429a      	cmp	r2, r3
 8008928:	bf0c      	ite	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	2300      	movne	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	429a      	cmp	r2, r3
 8008936:	d0b4      	beq.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008942:	b480      	push	{r7}
 8008944:	b095      	sub	sp, #84	@ 0x54
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800896a:	643a      	str	r2, [r7, #64]	@ 0x40
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3314      	adds	r3, #20
 8008984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	61fb      	str	r3, [r7, #28]
   return(result);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3314      	adds	r3, #20
 800899c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800899e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d119      	bne.n	80089ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f023 0310 	bic.w	r3, r3, #16
 80089d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089da:	61ba      	str	r2, [r7, #24]
 80089dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80089fc:	bf00      	nop
 80089fe:	3754      	adds	r7, #84	@ 0x54
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a0c:	b0c0      	sub	sp, #256	@ 0x100
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a24:	68d9      	ldr	r1, [r3, #12]
 8008a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	ea40 0301 	orr.w	r3, r0, r1
 8008a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a60:	f021 010c 	bic.w	r1, r1, #12
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a6e:	430b      	orrs	r3, r1
 8008a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a82:	6999      	ldr	r1, [r3, #24]
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	ea40 0301 	orr.w	r3, r0, r1
 8008a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b8f      	ldr	r3, [pc, #572]	@ (8008cd4 <UART_SetConfig+0x2cc>)
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d005      	beq.n	8008aa8 <UART_SetConfig+0xa0>
 8008a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd8 <UART_SetConfig+0x2d0>)
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d104      	bne.n	8008ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008aa8:	f7ff fb5a 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 8008aac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ab0:	e003      	b.n	8008aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ab2:	f7ff fb41 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 8008ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ac4:	f040 810c 	bne.w	8008ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ada:	4622      	mov	r2, r4
 8008adc:	462b      	mov	r3, r5
 8008ade:	1891      	adds	r1, r2, r2
 8008ae0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ae2:	415b      	adcs	r3, r3
 8008ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008aea:	4621      	mov	r1, r4
 8008aec:	eb12 0801 	adds.w	r8, r2, r1
 8008af0:	4629      	mov	r1, r5
 8008af2:	eb43 0901 	adc.w	r9, r3, r1
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b0a:	4690      	mov	r8, r2
 8008b0c:	4699      	mov	r9, r3
 8008b0e:	4623      	mov	r3, r4
 8008b10:	eb18 0303 	adds.w	r3, r8, r3
 8008b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b18:	462b      	mov	r3, r5
 8008b1a:	eb49 0303 	adc.w	r3, r9, r3
 8008b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b36:	460b      	mov	r3, r1
 8008b38:	18db      	adds	r3, r3, r3
 8008b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	eb42 0303 	adc.w	r3, r2, r3
 8008b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b4c:	f7f8 f884 	bl	8000c58 <__aeabi_uldivmod>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4b61      	ldr	r3, [pc, #388]	@ (8008cdc <UART_SetConfig+0x2d4>)
 8008b56:	fba3 2302 	umull	r2, r3, r3, r2
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	011c      	lsls	r4, r3, #4
 8008b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	1891      	adds	r1, r2, r2
 8008b76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008b78:	415b      	adcs	r3, r3
 8008b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b80:	4641      	mov	r1, r8
 8008b82:	eb12 0a01 	adds.w	sl, r2, r1
 8008b86:	4649      	mov	r1, r9
 8008b88:	eb43 0b01 	adc.w	fp, r3, r1
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ba0:	4692      	mov	sl, r2
 8008ba2:	469b      	mov	fp, r3
 8008ba4:	4643      	mov	r3, r8
 8008ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8008baa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bae:	464b      	mov	r3, r9
 8008bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8008bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	18db      	adds	r3, r3, r3
 8008bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	eb42 0303 	adc.w	r3, r2, r3
 8008bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008be2:	f7f8 f839 	bl	8000c58 <__aeabi_uldivmod>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4611      	mov	r1, r2
 8008bec:	4b3b      	ldr	r3, [pc, #236]	@ (8008cdc <UART_SetConfig+0x2d4>)
 8008bee:	fba3 2301 	umull	r2, r3, r3, r1
 8008bf2:	095b      	lsrs	r3, r3, #5
 8008bf4:	2264      	movs	r2, #100	@ 0x64
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	1acb      	subs	r3, r1, r3
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c02:	4b36      	ldr	r3, [pc, #216]	@ (8008cdc <UART_SetConfig+0x2d4>)
 8008c04:	fba3 2302 	umull	r2, r3, r3, r2
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c10:	441c      	add	r4, r3
 8008c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	1891      	adds	r1, r2, r2
 8008c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c2c:	415b      	adcs	r3, r3
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c34:	4641      	mov	r1, r8
 8008c36:	1851      	adds	r1, r2, r1
 8008c38:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	414b      	adcs	r3, r1
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c40:	f04f 0200 	mov.w	r2, #0
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	00cb      	lsls	r3, r1, #3
 8008c50:	4651      	mov	r1, sl
 8008c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c56:	4651      	mov	r1, sl
 8008c58:	00ca      	lsls	r2, r1, #3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4642      	mov	r2, r8
 8008c62:	189b      	adds	r3, r3, r2
 8008c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c68:	464b      	mov	r3, r9
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	eb42 0303 	adc.w	r3, r2, r3
 8008c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c88:	460b      	mov	r3, r1
 8008c8a:	18db      	adds	r3, r3, r3
 8008c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c8e:	4613      	mov	r3, r2
 8008c90:	eb42 0303 	adc.w	r3, r2, r3
 8008c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c9e:	f7f7 ffdb 	bl	8000c58 <__aeabi_uldivmod>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cdc <UART_SetConfig+0x2d4>)
 8008ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	2164      	movs	r1, #100	@ 0x64
 8008cb0:	fb01 f303 	mul.w	r3, r1, r3
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	3332      	adds	r3, #50	@ 0x32
 8008cba:	4a08      	ldr	r2, [pc, #32]	@ (8008cdc <UART_SetConfig+0x2d4>)
 8008cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	f003 0207 	and.w	r2, r3, #7
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4422      	add	r2, r4
 8008cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cd0:	e106      	b.n	8008ee0 <UART_SetConfig+0x4d8>
 8008cd2:	bf00      	nop
 8008cd4:	40011000 	.word	0x40011000
 8008cd8:	40011400 	.word	0x40011400
 8008cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008cea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008cf2:	4642      	mov	r2, r8
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	1891      	adds	r1, r2, r2
 8008cf8:	6239      	str	r1, [r7, #32]
 8008cfa:	415b      	adcs	r3, r3
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d02:	4641      	mov	r1, r8
 8008d04:	1854      	adds	r4, r2, r1
 8008d06:	4649      	mov	r1, r9
 8008d08:	eb43 0501 	adc.w	r5, r3, r1
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	00eb      	lsls	r3, r5, #3
 8008d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d1a:	00e2      	lsls	r2, r4, #3
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	461d      	mov	r5, r3
 8008d20:	4643      	mov	r3, r8
 8008d22:	18e3      	adds	r3, r4, r3
 8008d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d28:	464b      	mov	r3, r9
 8008d2a:	eb45 0303 	adc.w	r3, r5, r3
 8008d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d42:	f04f 0200 	mov.w	r2, #0
 8008d46:	f04f 0300 	mov.w	r3, #0
 8008d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d4e:	4629      	mov	r1, r5
 8008d50:	008b      	lsls	r3, r1, #2
 8008d52:	4621      	mov	r1, r4
 8008d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d58:	4621      	mov	r1, r4
 8008d5a:	008a      	lsls	r2, r1, #2
 8008d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d60:	f7f7 ff7a 	bl	8000c58 <__aeabi_uldivmod>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4b60      	ldr	r3, [pc, #384]	@ (8008eec <UART_SetConfig+0x4e4>)
 8008d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	011c      	lsls	r4, r3, #4
 8008d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008d84:	4642      	mov	r2, r8
 8008d86:	464b      	mov	r3, r9
 8008d88:	1891      	adds	r1, r2, r2
 8008d8a:	61b9      	str	r1, [r7, #24]
 8008d8c:	415b      	adcs	r3, r3
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d94:	4641      	mov	r1, r8
 8008d96:	1851      	adds	r1, r2, r1
 8008d98:	6139      	str	r1, [r7, #16]
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	414b      	adcs	r3, r1
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dac:	4659      	mov	r1, fp
 8008dae:	00cb      	lsls	r3, r1, #3
 8008db0:	4651      	mov	r1, sl
 8008db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008db6:	4651      	mov	r1, sl
 8008db8:	00ca      	lsls	r2, r1, #3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	189b      	adds	r3, r3, r2
 8008dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008dc8:	464b      	mov	r3, r9
 8008dca:	460a      	mov	r2, r1
 8008dcc:	eb42 0303 	adc.w	r3, r2, r3
 8008dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008dec:	4649      	mov	r1, r9
 8008dee:	008b      	lsls	r3, r1, #2
 8008df0:	4641      	mov	r1, r8
 8008df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df6:	4641      	mov	r1, r8
 8008df8:	008a      	lsls	r2, r1, #2
 8008dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008dfe:	f7f7 ff2b 	bl	8000c58 <__aeabi_uldivmod>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	4b38      	ldr	r3, [pc, #224]	@ (8008eec <UART_SetConfig+0x4e4>)
 8008e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	2264      	movs	r2, #100	@ 0x64
 8008e12:	fb02 f303 	mul.w	r3, r2, r3
 8008e16:	1acb      	subs	r3, r1, r3
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	3332      	adds	r3, #50	@ 0x32
 8008e1c:	4a33      	ldr	r2, [pc, #204]	@ (8008eec <UART_SetConfig+0x4e4>)
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e28:	441c      	add	r4, r3
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e2e:	2200      	movs	r2, #0
 8008e30:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e32:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e38:	4642      	mov	r2, r8
 8008e3a:	464b      	mov	r3, r9
 8008e3c:	1891      	adds	r1, r2, r2
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	415b      	adcs	r3, r3
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e48:	4641      	mov	r1, r8
 8008e4a:	1851      	adds	r1, r2, r1
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	4649      	mov	r1, r9
 8008e50:	414b      	adcs	r3, r1
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e60:	4659      	mov	r1, fp
 8008e62:	00cb      	lsls	r3, r1, #3
 8008e64:	4651      	mov	r1, sl
 8008e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e6a:	4651      	mov	r1, sl
 8008e6c:	00ca      	lsls	r2, r1, #3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4619      	mov	r1, r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	4642      	mov	r2, r8
 8008e76:	189b      	adds	r3, r3, r2
 8008e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	460a      	mov	r2, r1
 8008e7e:	eb42 0303 	adc.w	r3, r2, r3
 8008e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	008b      	lsls	r3, r1, #2
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ea6:	4641      	mov	r1, r8
 8008ea8:	008a      	lsls	r2, r1, #2
 8008eaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008eae:	f7f7 fed3 	bl	8000c58 <__aeabi_uldivmod>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <UART_SetConfig+0x4e4>)
 8008eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	2164      	movs	r1, #100	@ 0x64
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	3332      	adds	r3, #50	@ 0x32
 8008eca:	4a08      	ldr	r2, [pc, #32]	@ (8008eec <UART_SetConfig+0x4e4>)
 8008ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	f003 020f 	and.w	r2, r3, #15
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4422      	add	r2, r4
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eec:	51eb851f 	.word	0x51eb851f

08008ef0 <__cvt>:
 8008ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	ec57 6b10 	vmov	r6, r7, d0
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4619      	mov	r1, r3
 8008efe:	463b      	mov	r3, r7
 8008f00:	bfbb      	ittet	lt
 8008f02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f06:	461f      	movlt	r7, r3
 8008f08:	2300      	movge	r3, #0
 8008f0a:	232d      	movlt	r3, #45	@ 0x2d
 8008f0c:	700b      	strb	r3, [r1, #0]
 8008f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f14:	4691      	mov	r9, r2
 8008f16:	f023 0820 	bic.w	r8, r3, #32
 8008f1a:	bfbc      	itt	lt
 8008f1c:	4632      	movlt	r2, r6
 8008f1e:	4616      	movlt	r6, r2
 8008f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f24:	d005      	beq.n	8008f32 <__cvt+0x42>
 8008f26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f2a:	d100      	bne.n	8008f2e <__cvt+0x3e>
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	2102      	movs	r1, #2
 8008f30:	e000      	b.n	8008f34 <__cvt+0x44>
 8008f32:	2103      	movs	r1, #3
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	ab02      	add	r3, sp, #8
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	ec47 6b10 	vmov	d0, r6, r7
 8008f40:	4653      	mov	r3, sl
 8008f42:	4622      	mov	r2, r4
 8008f44:	f000 ff74 	bl	8009e30 <_dtoa_r>
 8008f48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	d119      	bne.n	8008f84 <__cvt+0x94>
 8008f50:	f019 0f01 	tst.w	r9, #1
 8008f54:	d00e      	beq.n	8008f74 <__cvt+0x84>
 8008f56:	eb00 0904 	add.w	r9, r0, r4
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f66:	b108      	cbz	r0, 8008f6c <__cvt+0x7c>
 8008f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f6c:	2230      	movs	r2, #48	@ 0x30
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	454b      	cmp	r3, r9
 8008f72:	d31e      	bcc.n	8008fb2 <__cvt+0xc2>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f78:	1b5b      	subs	r3, r3, r5
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	b004      	add	sp, #16
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f88:	eb00 0904 	add.w	r9, r0, r4
 8008f8c:	d1e5      	bne.n	8008f5a <__cvt+0x6a>
 8008f8e:	7803      	ldrb	r3, [r0, #0]
 8008f90:	2b30      	cmp	r3, #48	@ 0x30
 8008f92:	d10a      	bne.n	8008faa <__cvt+0xba>
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa0:	b918      	cbnz	r0, 8008faa <__cvt+0xba>
 8008fa2:	f1c4 0401 	rsb	r4, r4, #1
 8008fa6:	f8ca 4000 	str.w	r4, [sl]
 8008faa:	f8da 3000 	ldr.w	r3, [sl]
 8008fae:	4499      	add	r9, r3
 8008fb0:	e7d3      	b.n	8008f5a <__cvt+0x6a>
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	e7d9      	b.n	8008f6e <__cvt+0x7e>

08008fba <__exponent>:
 8008fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	bfba      	itte	lt
 8008fc0:	4249      	neglt	r1, r1
 8008fc2:	232d      	movlt	r3, #45	@ 0x2d
 8008fc4:	232b      	movge	r3, #43	@ 0x2b
 8008fc6:	2909      	cmp	r1, #9
 8008fc8:	7002      	strb	r2, [r0, #0]
 8008fca:	7043      	strb	r3, [r0, #1]
 8008fcc:	dd29      	ble.n	8009022 <__exponent+0x68>
 8008fce:	f10d 0307 	add.w	r3, sp, #7
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	270a      	movs	r7, #10
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008fdc:	fb07 1416 	mls	r4, r7, r6, r1
 8008fe0:	3430      	adds	r4, #48	@ 0x30
 8008fe2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	2c63      	cmp	r4, #99	@ 0x63
 8008fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fee:	4631      	mov	r1, r6
 8008ff0:	dcf1      	bgt.n	8008fd6 <__exponent+0x1c>
 8008ff2:	3130      	adds	r1, #48	@ 0x30
 8008ff4:	1e94      	subs	r4, r2, #2
 8008ff6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ffa:	1c41      	adds	r1, r0, #1
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	42ab      	cmp	r3, r5
 8009000:	d30a      	bcc.n	8009018 <__exponent+0x5e>
 8009002:	f10d 0309 	add.w	r3, sp, #9
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ac      	cmp	r4, r5
 800900a:	bf88      	it	hi
 800900c:	2300      	movhi	r3, #0
 800900e:	3302      	adds	r3, #2
 8009010:	4403      	add	r3, r0
 8009012:	1a18      	subs	r0, r3, r0
 8009014:	b003      	add	sp, #12
 8009016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009018:	f813 6b01 	ldrb.w	r6, [r3], #1
 800901c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009020:	e7ed      	b.n	8008ffe <__exponent+0x44>
 8009022:	2330      	movs	r3, #48	@ 0x30
 8009024:	3130      	adds	r1, #48	@ 0x30
 8009026:	7083      	strb	r3, [r0, #2]
 8009028:	70c1      	strb	r1, [r0, #3]
 800902a:	1d03      	adds	r3, r0, #4
 800902c:	e7f1      	b.n	8009012 <__exponent+0x58>
	...

08009030 <_printf_float>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	b08d      	sub	sp, #52	@ 0x34
 8009036:	460c      	mov	r4, r1
 8009038:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800903c:	4616      	mov	r6, r2
 800903e:	461f      	mov	r7, r3
 8009040:	4605      	mov	r5, r0
 8009042:	f000 fde7 	bl	8009c14 <_localeconv_r>
 8009046:	6803      	ldr	r3, [r0, #0]
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 f918 	bl	8000280 <strlen>
 8009050:	2300      	movs	r3, #0
 8009052:	930a      	str	r3, [sp, #40]	@ 0x28
 8009054:	f8d8 3000 	ldr.w	r3, [r8]
 8009058:	9005      	str	r0, [sp, #20]
 800905a:	3307      	adds	r3, #7
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	f103 0208 	add.w	r2, r3, #8
 8009064:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009068:	f8d4 b000 	ldr.w	fp, [r4]
 800906c:	f8c8 2000 	str.w	r2, [r8]
 8009070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009074:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f8cd 8018 	str.w	r8, [sp, #24]
 800907e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009086:	4b9c      	ldr	r3, [pc, #624]	@ (80092f8 <_printf_float+0x2c8>)
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	f7f7 fd56 	bl	8000b3c <__aeabi_dcmpun>
 8009090:	bb70      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 8009092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009096:	4b98      	ldr	r3, [pc, #608]	@ (80092f8 <_printf_float+0x2c8>)
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	f7f7 fd30 	bl	8000b00 <__aeabi_dcmple>
 80090a0:	bb30      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fd1f 	bl	8000aec <__aeabi_dcmplt>
 80090ae:	b110      	cbz	r0, 80090b6 <_printf_float+0x86>
 80090b0:	232d      	movs	r3, #45	@ 0x2d
 80090b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b6:	4a91      	ldr	r2, [pc, #580]	@ (80092fc <_printf_float+0x2cc>)
 80090b8:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <_printf_float+0x2d0>)
 80090ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090be:	bf94      	ite	ls
 80090c0:	4690      	movls	r8, r2
 80090c2:	4698      	movhi	r8, r3
 80090c4:	2303      	movs	r3, #3
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	f02b 0304 	bic.w	r3, fp, #4
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	9700      	str	r7, [sp, #0]
 80090d4:	4633      	mov	r3, r6
 80090d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090d8:	4621      	mov	r1, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f9d2 	bl	8009484 <_printf_common>
 80090e0:	3001      	adds	r0, #1
 80090e2:	f040 808d 	bne.w	8009200 <_printf_float+0x1d0>
 80090e6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ea:	b00d      	add	sp, #52	@ 0x34
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fd20 	bl	8000b3c <__aeabi_dcmpun>
 80090fc:	b140      	cbz	r0, 8009110 <_printf_float+0xe0>
 80090fe:	464b      	mov	r3, r9
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfbc      	itt	lt
 8009104:	232d      	movlt	r3, #45	@ 0x2d
 8009106:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800910a:	4a7e      	ldr	r2, [pc, #504]	@ (8009304 <_printf_float+0x2d4>)
 800910c:	4b7e      	ldr	r3, [pc, #504]	@ (8009308 <_printf_float+0x2d8>)
 800910e:	e7d4      	b.n	80090ba <_printf_float+0x8a>
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009116:	9206      	str	r2, [sp, #24]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	d13b      	bne.n	8009194 <_printf_float+0x164>
 800911c:	2306      	movs	r3, #6
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009124:	2300      	movs	r3, #0
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	ab0a      	add	r3, sp, #40	@ 0x28
 800912c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009130:	ab09      	add	r3, sp, #36	@ 0x24
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	6861      	ldr	r1, [r4, #4]
 8009136:	ec49 8b10 	vmov	d0, r8, r9
 800913a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800913e:	4628      	mov	r0, r5
 8009140:	f7ff fed6 	bl	8008ef0 <__cvt>
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009148:	2b47      	cmp	r3, #71	@ 0x47
 800914a:	4680      	mov	r8, r0
 800914c:	d129      	bne.n	80091a2 <_printf_float+0x172>
 800914e:	1cc8      	adds	r0, r1, #3
 8009150:	db02      	blt.n	8009158 <_printf_float+0x128>
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	4299      	cmp	r1, r3
 8009156:	dd41      	ble.n	80091dc <_printf_float+0x1ac>
 8009158:	f1aa 0a02 	sub.w	sl, sl, #2
 800915c:	fa5f fa8a 	uxtb.w	sl, sl
 8009160:	3901      	subs	r1, #1
 8009162:	4652      	mov	r2, sl
 8009164:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009168:	9109      	str	r1, [sp, #36]	@ 0x24
 800916a:	f7ff ff26 	bl	8008fba <__exponent>
 800916e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009170:	1813      	adds	r3, r2, r0
 8009172:	2a01      	cmp	r2, #1
 8009174:	4681      	mov	r9, r0
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	dc02      	bgt.n	8009180 <_printf_float+0x150>
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	07d2      	lsls	r2, r2, #31
 800917e:	d501      	bpl.n	8009184 <_printf_float+0x154>
 8009180:	3301      	adds	r3, #1
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0a2      	beq.n	80090d2 <_printf_float+0xa2>
 800918c:	232d      	movs	r3, #45	@ 0x2d
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009192:	e79e      	b.n	80090d2 <_printf_float+0xa2>
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	2a47      	cmp	r2, #71	@ 0x47
 8009198:	d1c2      	bne.n	8009120 <_printf_float+0xf0>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1c0      	bne.n	8009120 <_printf_float+0xf0>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7bd      	b.n	800911e <_printf_float+0xee>
 80091a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091a6:	d9db      	bls.n	8009160 <_printf_float+0x130>
 80091a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091ac:	d118      	bne.n	80091e0 <_printf_float+0x1b0>
 80091ae:	2900      	cmp	r1, #0
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	dd0b      	ble.n	80091cc <_printf_float+0x19c>
 80091b4:	6121      	str	r1, [r4, #16]
 80091b6:	b913      	cbnz	r3, 80091be <_printf_float+0x18e>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	07d0      	lsls	r0, r2, #31
 80091bc:	d502      	bpl.n	80091c4 <_printf_float+0x194>
 80091be:	3301      	adds	r3, #1
 80091c0:	440b      	add	r3, r1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091c6:	f04f 0900 	mov.w	r9, #0
 80091ca:	e7db      	b.n	8009184 <_printf_float+0x154>
 80091cc:	b913      	cbnz	r3, 80091d4 <_printf_float+0x1a4>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	07d2      	lsls	r2, r2, #31
 80091d2:	d501      	bpl.n	80091d8 <_printf_float+0x1a8>
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7f4      	b.n	80091c2 <_printf_float+0x192>
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f2      	b.n	80091c2 <_printf_float+0x192>
 80091dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	4299      	cmp	r1, r3
 80091e4:	db05      	blt.n	80091f2 <_printf_float+0x1c2>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	6121      	str	r1, [r4, #16]
 80091ea:	07d8      	lsls	r0, r3, #31
 80091ec:	d5ea      	bpl.n	80091c4 <_printf_float+0x194>
 80091ee:	1c4b      	adds	r3, r1, #1
 80091f0:	e7e7      	b.n	80091c2 <_printf_float+0x192>
 80091f2:	2900      	cmp	r1, #0
 80091f4:	bfd4      	ite	le
 80091f6:	f1c1 0202 	rsble	r2, r1, #2
 80091fa:	2201      	movgt	r2, #1
 80091fc:	4413      	add	r3, r2
 80091fe:	e7e0      	b.n	80091c2 <_printf_float+0x192>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	055a      	lsls	r2, r3, #21
 8009204:	d407      	bmi.n	8009216 <_printf_float+0x1e6>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	4642      	mov	r2, r8
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	d12b      	bne.n	800926c <_printf_float+0x23c>
 8009214:	e767      	b.n	80090e6 <_printf_float+0xb6>
 8009216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921a:	f240 80dd 	bls.w	80093d8 <_printf_float+0x3a8>
 800921e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 800922a:	2800      	cmp	r0, #0
 800922c:	d033      	beq.n	8009296 <_printf_float+0x266>
 800922e:	4a37      	ldr	r2, [pc, #220]	@ (800930c <_printf_float+0x2dc>)
 8009230:	2301      	movs	r3, #1
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f af54 	beq.w	80090e6 <_printf_float+0xb6>
 800923e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009242:	4543      	cmp	r3, r8
 8009244:	db02      	blt.n	800924c <_printf_float+0x21c>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	07d8      	lsls	r0, r3, #31
 800924a:	d50f      	bpl.n	800926c <_printf_float+0x23c>
 800924c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f af45 	beq.w	80090e6 <_printf_float+0xb6>
 800925c:	f04f 0900 	mov.w	r9, #0
 8009260:	f108 38ff 	add.w	r8, r8, #4294967295
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	45c8      	cmp	r8, r9
 800926a:	dc09      	bgt.n	8009280 <_printf_float+0x250>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	079b      	lsls	r3, r3, #30
 8009270:	f100 8103 	bmi.w	800947a <_printf_float+0x44a>
 8009274:	68e0      	ldr	r0, [r4, #12]
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	4298      	cmp	r0, r3
 800927a:	bfb8      	it	lt
 800927c:	4618      	movlt	r0, r3
 800927e:	e734      	b.n	80090ea <_printf_float+0xba>
 8009280:	2301      	movs	r3, #1
 8009282:	4652      	mov	r2, sl
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	f43f af2b 	beq.w	80090e6 <_printf_float+0xb6>
 8009290:	f109 0901 	add.w	r9, r9, #1
 8009294:	e7e8      	b.n	8009268 <_printf_float+0x238>
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	dc39      	bgt.n	8009310 <_printf_float+0x2e0>
 800929c:	4a1b      	ldr	r2, [pc, #108]	@ (800930c <_printf_float+0x2dc>)
 800929e:	2301      	movs	r3, #1
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af1d 	beq.w	80090e6 <_printf_float+0xb6>
 80092ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092b0:	ea59 0303 	orrs.w	r3, r9, r3
 80092b4:	d102      	bne.n	80092bc <_printf_float+0x28c>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d5d7      	bpl.n	800926c <_printf_float+0x23c>
 80092bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af0d 	beq.w	80090e6 <_printf_float+0xb6>
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f104 0b1a 	add.w	fp, r4, #26
 80092d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d6:	425b      	negs	r3, r3
 80092d8:	4553      	cmp	r3, sl
 80092da:	dc01      	bgt.n	80092e0 <_printf_float+0x2b0>
 80092dc:	464b      	mov	r3, r9
 80092de:	e793      	b.n	8009208 <_printf_float+0x1d8>
 80092e0:	2301      	movs	r3, #1
 80092e2:	465a      	mov	r2, fp
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f aefb 	beq.w	80090e6 <_printf_float+0xb6>
 80092f0:	f10a 0a01 	add.w	sl, sl, #1
 80092f4:	e7ee      	b.n	80092d4 <_printf_float+0x2a4>
 80092f6:	bf00      	nop
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	08021c1c 	.word	0x08021c1c
 8009300:	08021c20 	.word	0x08021c20
 8009304:	08021c24 	.word	0x08021c24
 8009308:	08021c28 	.word	0x08021c28
 800930c:	08021c2c 	.word	0x08021c2c
 8009310:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009312:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009316:	4553      	cmp	r3, sl
 8009318:	bfa8      	it	ge
 800931a:	4653      	movge	r3, sl
 800931c:	2b00      	cmp	r3, #0
 800931e:	4699      	mov	r9, r3
 8009320:	dc36      	bgt.n	8009390 <_printf_float+0x360>
 8009322:	f04f 0b00 	mov.w	fp, #0
 8009326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932a:	f104 021a 	add.w	r2, r4, #26
 800932e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009330:	9306      	str	r3, [sp, #24]
 8009332:	eba3 0309 	sub.w	r3, r3, r9
 8009336:	455b      	cmp	r3, fp
 8009338:	dc31      	bgt.n	800939e <_printf_float+0x36e>
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	459a      	cmp	sl, r3
 800933e:	dc3a      	bgt.n	80093b6 <_printf_float+0x386>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	07da      	lsls	r2, r3, #31
 8009344:	d437      	bmi.n	80093b6 <_printf_float+0x386>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	ebaa 0903 	sub.w	r9, sl, r3
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	ebaa 0303 	sub.w	r3, sl, r3
 8009352:	4599      	cmp	r9, r3
 8009354:	bfa8      	it	ge
 8009356:	4699      	movge	r9, r3
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	dc33      	bgt.n	80093c6 <_printf_float+0x396>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009366:	f104 0b1a 	add.w	fp, r4, #26
 800936a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936c:	ebaa 0303 	sub.w	r3, sl, r3
 8009370:	eba3 0309 	sub.w	r3, r3, r9
 8009374:	4543      	cmp	r3, r8
 8009376:	f77f af79 	ble.w	800926c <_printf_float+0x23c>
 800937a:	2301      	movs	r3, #1
 800937c:	465a      	mov	r2, fp
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f aeae 	beq.w	80090e6 <_printf_float+0xb6>
 800938a:	f108 0801 	add.w	r8, r8, #1
 800938e:	e7ec      	b.n	800936a <_printf_float+0x33a>
 8009390:	4642      	mov	r2, r8
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	d1c2      	bne.n	8009322 <_printf_float+0x2f2>
 800939c:	e6a3      	b.n	80090e6 <_printf_float+0xb6>
 800939e:	2301      	movs	r3, #1
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	9206      	str	r2, [sp, #24]
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae9c 	beq.w	80090e6 <_printf_float+0xb6>
 80093ae:	9a06      	ldr	r2, [sp, #24]
 80093b0:	f10b 0b01 	add.w	fp, fp, #1
 80093b4:	e7bb      	b.n	800932e <_printf_float+0x2fe>
 80093b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d1c0      	bne.n	8009346 <_printf_float+0x316>
 80093c4:	e68f      	b.n	80090e6 <_printf_float+0xb6>
 80093c6:	9a06      	ldr	r2, [sp, #24]
 80093c8:	464b      	mov	r3, r9
 80093ca:	4442      	add	r2, r8
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c3      	bne.n	800935e <_printf_float+0x32e>
 80093d6:	e686      	b.n	80090e6 <_printf_float+0xb6>
 80093d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093dc:	f1ba 0f01 	cmp.w	sl, #1
 80093e0:	dc01      	bgt.n	80093e6 <_printf_float+0x3b6>
 80093e2:	07db      	lsls	r3, r3, #31
 80093e4:	d536      	bpl.n	8009454 <_printf_float+0x424>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4642      	mov	r2, r8
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae78 	beq.w	80090e6 <_printf_float+0xb6>
 80093f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f ae70 	beq.w	80090e6 <_printf_float+0xb6>
 8009406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009412:	f7f7 fb61 	bl	8000ad8 <__aeabi_dcmpeq>
 8009416:	b9c0      	cbnz	r0, 800944a <_printf_float+0x41a>
 8009418:	4653      	mov	r3, sl
 800941a:	f108 0201 	add.w	r2, r8, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d10c      	bne.n	8009442 <_printf_float+0x412>
 8009428:	e65d      	b.n	80090e6 <_printf_float+0xb6>
 800942a:	2301      	movs	r3, #1
 800942c:	465a      	mov	r2, fp
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f ae56 	beq.w	80090e6 <_printf_float+0xb6>
 800943a:	f108 0801 	add.w	r8, r8, #1
 800943e:	45d0      	cmp	r8, sl
 8009440:	dbf3      	blt.n	800942a <_printf_float+0x3fa>
 8009442:	464b      	mov	r3, r9
 8009444:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009448:	e6df      	b.n	800920a <_printf_float+0x1da>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	f104 0b1a 	add.w	fp, r4, #26
 8009452:	e7f4      	b.n	800943e <_printf_float+0x40e>
 8009454:	2301      	movs	r3, #1
 8009456:	4642      	mov	r2, r8
 8009458:	e7e1      	b.n	800941e <_printf_float+0x3ee>
 800945a:	2301      	movs	r3, #1
 800945c:	464a      	mov	r2, r9
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f ae3e 	beq.w	80090e6 <_printf_float+0xb6>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	4543      	cmp	r3, r8
 8009476:	dcf0      	bgt.n	800945a <_printf_float+0x42a>
 8009478:	e6fc      	b.n	8009274 <_printf_float+0x244>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	f104 0919 	add.w	r9, r4, #25
 8009482:	e7f4      	b.n	800946e <_printf_float+0x43e>

08009484 <_printf_common>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	4616      	mov	r6, r2
 800948a:	4698      	mov	r8, r3
 800948c:	688a      	ldr	r2, [r1, #8]
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009494:	4293      	cmp	r3, r2
 8009496:	bfb8      	it	lt
 8009498:	4613      	movlt	r3, r2
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a0:	4607      	mov	r7, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b10a      	cbz	r2, 80094aa <_printf_common+0x26>
 80094a6:	3301      	adds	r3, #1
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	0699      	lsls	r1, r3, #26
 80094ae:	bf42      	ittt	mi
 80094b0:	6833      	ldrmi	r3, [r6, #0]
 80094b2:	3302      	addmi	r3, #2
 80094b4:	6033      	strmi	r3, [r6, #0]
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	f015 0506 	ands.w	r5, r5, #6
 80094bc:	d106      	bne.n	80094cc <_printf_common+0x48>
 80094be:	f104 0a19 	add.w	sl, r4, #25
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc26      	bgt.n	800951a <_printf_common+0x96>
 80094cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	3b00      	subs	r3, #0
 80094d4:	bf18      	it	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	0692      	lsls	r2, r2, #26
 80094da:	d42b      	bmi.n	8009534 <_printf_common+0xb0>
 80094dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d01e      	beq.n	8009528 <_printf_common+0xa4>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	f003 0306 	and.w	r3, r3, #6
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	bf02      	ittt	eq
 80094f6:	68e5      	ldreq	r5, [r4, #12]
 80094f8:	6833      	ldreq	r3, [r6, #0]
 80094fa:	1aed      	subeq	r5, r5, r3
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	bf0c      	ite	eq
 8009500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009504:	2500      	movne	r5, #0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfc4      	itt	gt
 800950a:	1a9b      	subgt	r3, r3, r2
 800950c:	18ed      	addgt	r5, r5, r3
 800950e:	2600      	movs	r6, #0
 8009510:	341a      	adds	r4, #26
 8009512:	42b5      	cmp	r5, r6
 8009514:	d11a      	bne.n	800954c <_printf_common+0xc8>
 8009516:	2000      	movs	r0, #0
 8009518:	e008      	b.n	800952c <_printf_common+0xa8>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4641      	mov	r1, r8
 8009520:	4638      	mov	r0, r7
 8009522:	47c8      	blx	r9
 8009524:	3001      	adds	r0, #1
 8009526:	d103      	bne.n	8009530 <_printf_common+0xac>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	3501      	adds	r5, #1
 8009532:	e7c6      	b.n	80094c2 <_printf_common+0x3e>
 8009534:	18e1      	adds	r1, r4, r3
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	2030      	movs	r0, #48	@ 0x30
 800953a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800953e:	4422      	add	r2, r4
 8009540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009548:	3302      	adds	r3, #2
 800954a:	e7c7      	b.n	80094dc <_printf_common+0x58>
 800954c:	2301      	movs	r3, #1
 800954e:	4622      	mov	r2, r4
 8009550:	4641      	mov	r1, r8
 8009552:	4638      	mov	r0, r7
 8009554:	47c8      	blx	r9
 8009556:	3001      	adds	r0, #1
 8009558:	d0e6      	beq.n	8009528 <_printf_common+0xa4>
 800955a:	3601      	adds	r6, #1
 800955c:	e7d9      	b.n	8009512 <_printf_common+0x8e>
	...

08009560 <_printf_i>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	7e0f      	ldrb	r7, [r1, #24]
 8009566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009568:	2f78      	cmp	r7, #120	@ 0x78
 800956a:	4691      	mov	r9, r2
 800956c:	4680      	mov	r8, r0
 800956e:	460c      	mov	r4, r1
 8009570:	469a      	mov	sl, r3
 8009572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009576:	d807      	bhi.n	8009588 <_printf_i+0x28>
 8009578:	2f62      	cmp	r7, #98	@ 0x62
 800957a:	d80a      	bhi.n	8009592 <_printf_i+0x32>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f000 80d2 	beq.w	8009726 <_printf_i+0x1c6>
 8009582:	2f58      	cmp	r7, #88	@ 0x58
 8009584:	f000 80b9 	beq.w	80096fa <_printf_i+0x19a>
 8009588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800958c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009590:	e03a      	b.n	8009608 <_printf_i+0xa8>
 8009592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009596:	2b15      	cmp	r3, #21
 8009598:	d8f6      	bhi.n	8009588 <_printf_i+0x28>
 800959a:	a101      	add	r1, pc, #4	@ (adr r1, 80095a0 <_printf_i+0x40>)
 800959c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009589 	.word	0x08009589
 80095ac:	08009589 	.word	0x08009589
 80095b0:	08009589 	.word	0x08009589
 80095b4:	08009589 	.word	0x08009589
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	08009589 	.word	0x08009589
 80095c0:	08009589 	.word	0x08009589
 80095c4:	08009589 	.word	0x08009589
 80095c8:	08009589 	.word	0x08009589
 80095cc:	0800970d 	.word	0x0800970d
 80095d0:	08009637 	.word	0x08009637
 80095d4:	080096c7 	.word	0x080096c7
 80095d8:	08009589 	.word	0x08009589
 80095dc:	08009589 	.word	0x08009589
 80095e0:	0800972f 	.word	0x0800972f
 80095e4:	08009589 	.word	0x08009589
 80095e8:	08009637 	.word	0x08009637
 80095ec:	08009589 	.word	0x08009589
 80095f0:	08009589 	.word	0x08009589
 80095f4:	080096cf 	.word	0x080096cf
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6032      	str	r2, [r6, #0]
 8009600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009608:	2301      	movs	r3, #1
 800960a:	e09d      	b.n	8009748 <_printf_i+0x1e8>
 800960c:	6833      	ldr	r3, [r6, #0]
 800960e:	6820      	ldr	r0, [r4, #0]
 8009610:	1d19      	adds	r1, r3, #4
 8009612:	6031      	str	r1, [r6, #0]
 8009614:	0606      	lsls	r6, r0, #24
 8009616:	d501      	bpl.n	800961c <_printf_i+0xbc>
 8009618:	681d      	ldr	r5, [r3, #0]
 800961a:	e003      	b.n	8009624 <_printf_i+0xc4>
 800961c:	0645      	lsls	r5, r0, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0xb8>
 8009620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009624:	2d00      	cmp	r5, #0
 8009626:	da03      	bge.n	8009630 <_printf_i+0xd0>
 8009628:	232d      	movs	r3, #45	@ 0x2d
 800962a:	426d      	negs	r5, r5
 800962c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009630:	4859      	ldr	r0, [pc, #356]	@ (8009798 <_printf_i+0x238>)
 8009632:	230a      	movs	r3, #10
 8009634:	e011      	b.n	800965a <_printf_i+0xfa>
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	6833      	ldr	r3, [r6, #0]
 800963a:	0608      	lsls	r0, r1, #24
 800963c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0xe8>
 8009642:	0649      	lsls	r1, r1, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	2f6f      	cmp	r7, #111	@ 0x6f
 800964a:	4853      	ldr	r0, [pc, #332]	@ (8009798 <_printf_i+0x238>)
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	bf14      	ite	ne
 8009650:	230a      	movne	r3, #10
 8009652:	2308      	moveq	r3, #8
 8009654:	2100      	movs	r1, #0
 8009656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965a:	6866      	ldr	r6, [r4, #4]
 800965c:	60a6      	str	r6, [r4, #8]
 800965e:	2e00      	cmp	r6, #0
 8009660:	bfa2      	ittt	ge
 8009662:	6821      	ldrge	r1, [r4, #0]
 8009664:	f021 0104 	bicge.w	r1, r1, #4
 8009668:	6021      	strge	r1, [r4, #0]
 800966a:	b90d      	cbnz	r5, 8009670 <_printf_i+0x110>
 800966c:	2e00      	cmp	r6, #0
 800966e:	d04b      	beq.n	8009708 <_printf_i+0x1a8>
 8009670:	4616      	mov	r6, r2
 8009672:	fbb5 f1f3 	udiv	r1, r5, r3
 8009676:	fb03 5711 	mls	r7, r3, r1, r5
 800967a:	5dc7      	ldrb	r7, [r0, r7]
 800967c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009680:	462f      	mov	r7, r5
 8009682:	42bb      	cmp	r3, r7
 8009684:	460d      	mov	r5, r1
 8009686:	d9f4      	bls.n	8009672 <_printf_i+0x112>
 8009688:	2b08      	cmp	r3, #8
 800968a:	d10b      	bne.n	80096a4 <_printf_i+0x144>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07df      	lsls	r7, r3, #31
 8009690:	d508      	bpl.n	80096a4 <_printf_i+0x144>
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	6861      	ldr	r1, [r4, #4]
 8009696:	4299      	cmp	r1, r3
 8009698:	bfde      	ittt	le
 800969a:	2330      	movle	r3, #48	@ 0x30
 800969c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a4:	1b92      	subs	r2, r2, r6
 80096a6:	6122      	str	r2, [r4, #16]
 80096a8:	f8cd a000 	str.w	sl, [sp]
 80096ac:	464b      	mov	r3, r9
 80096ae:	aa03      	add	r2, sp, #12
 80096b0:	4621      	mov	r1, r4
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff fee6 	bl	8009484 <_printf_common>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d14a      	bne.n	8009752 <_printf_i+0x1f2>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b004      	add	sp, #16
 80096c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	f043 0320 	orr.w	r3, r3, #32
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	4833      	ldr	r0, [pc, #204]	@ (800979c <_printf_i+0x23c>)
 80096d0:	2778      	movs	r7, #120	@ 0x78
 80096d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	6831      	ldr	r1, [r6, #0]
 80096da:	061f      	lsls	r7, r3, #24
 80096dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80096e0:	d402      	bmi.n	80096e8 <_printf_i+0x188>
 80096e2:	065f      	lsls	r7, r3, #25
 80096e4:	bf48      	it	mi
 80096e6:	b2ad      	uxthmi	r5, r5
 80096e8:	6031      	str	r1, [r6, #0]
 80096ea:	07d9      	lsls	r1, r3, #31
 80096ec:	bf44      	itt	mi
 80096ee:	f043 0320 	orrmi.w	r3, r3, #32
 80096f2:	6023      	strmi	r3, [r4, #0]
 80096f4:	b11d      	cbz	r5, 80096fe <_printf_i+0x19e>
 80096f6:	2310      	movs	r3, #16
 80096f8:	e7ac      	b.n	8009654 <_printf_i+0xf4>
 80096fa:	4827      	ldr	r0, [pc, #156]	@ (8009798 <_printf_i+0x238>)
 80096fc:	e7e9      	b.n	80096d2 <_printf_i+0x172>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	f023 0320 	bic.w	r3, r3, #32
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	e7f6      	b.n	80096f6 <_printf_i+0x196>
 8009708:	4616      	mov	r6, r2
 800970a:	e7bd      	b.n	8009688 <_printf_i+0x128>
 800970c:	6833      	ldr	r3, [r6, #0]
 800970e:	6825      	ldr	r5, [r4, #0]
 8009710:	6961      	ldr	r1, [r4, #20]
 8009712:	1d18      	adds	r0, r3, #4
 8009714:	6030      	str	r0, [r6, #0]
 8009716:	062e      	lsls	r6, r5, #24
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	d501      	bpl.n	8009720 <_printf_i+0x1c0>
 800971c:	6019      	str	r1, [r3, #0]
 800971e:	e002      	b.n	8009726 <_printf_i+0x1c6>
 8009720:	0668      	lsls	r0, r5, #25
 8009722:	d5fb      	bpl.n	800971c <_printf_i+0x1bc>
 8009724:	8019      	strh	r1, [r3, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	4616      	mov	r6, r2
 800972c:	e7bc      	b.n	80096a8 <_printf_i+0x148>
 800972e:	6833      	ldr	r3, [r6, #0]
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	6032      	str	r2, [r6, #0]
 8009734:	681e      	ldr	r6, [r3, #0]
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	4630      	mov	r0, r6
 800973c:	f7f6 fd50 	bl	80001e0 <memchr>
 8009740:	b108      	cbz	r0, 8009746 <_printf_i+0x1e6>
 8009742:	1b80      	subs	r0, r0, r6
 8009744:	6060      	str	r0, [r4, #4]
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	2300      	movs	r3, #0
 800974c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009750:	e7aa      	b.n	80096a8 <_printf_i+0x148>
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	4632      	mov	r2, r6
 8009756:	4649      	mov	r1, r9
 8009758:	4640      	mov	r0, r8
 800975a:	47d0      	blx	sl
 800975c:	3001      	adds	r0, #1
 800975e:	d0ad      	beq.n	80096bc <_printf_i+0x15c>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	079b      	lsls	r3, r3, #30
 8009764:	d413      	bmi.n	800978e <_printf_i+0x22e>
 8009766:	68e0      	ldr	r0, [r4, #12]
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	4298      	cmp	r0, r3
 800976c:	bfb8      	it	lt
 800976e:	4618      	movlt	r0, r3
 8009770:	e7a6      	b.n	80096c0 <_printf_i+0x160>
 8009772:	2301      	movs	r3, #1
 8009774:	4632      	mov	r2, r6
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d09d      	beq.n	80096bc <_printf_i+0x15c>
 8009780:	3501      	adds	r5, #1
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	1a5b      	subs	r3, r3, r1
 8009788:	42ab      	cmp	r3, r5
 800978a:	dcf2      	bgt.n	8009772 <_printf_i+0x212>
 800978c:	e7eb      	b.n	8009766 <_printf_i+0x206>
 800978e:	2500      	movs	r5, #0
 8009790:	f104 0619 	add.w	r6, r4, #25
 8009794:	e7f5      	b.n	8009782 <_printf_i+0x222>
 8009796:	bf00      	nop
 8009798:	08021c2e 	.word	0x08021c2e
 800979c:	08021c3f 	.word	0x08021c3f

080097a0 <std>:
 80097a0:	2300      	movs	r3, #0
 80097a2:	b510      	push	{r4, lr}
 80097a4:	4604      	mov	r4, r0
 80097a6:	e9c0 3300 	strd	r3, r3, [r0]
 80097aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ae:	6083      	str	r3, [r0, #8]
 80097b0:	8181      	strh	r1, [r0, #12]
 80097b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b4:	81c2      	strh	r2, [r0, #14]
 80097b6:	6183      	str	r3, [r0, #24]
 80097b8:	4619      	mov	r1, r3
 80097ba:	2208      	movs	r2, #8
 80097bc:	305c      	adds	r0, #92	@ 0x5c
 80097be:	f000 fa21 	bl	8009c04 <memset>
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x58>)
 80097c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x5c>)
 80097c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x60>)
 80097cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x64>)
 80097d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x68>)
 80097d4:	6224      	str	r4, [r4, #32]
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d006      	beq.n	80097e8 <std+0x48>
 80097da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097de:	4294      	cmp	r4, r2
 80097e0:	d002      	beq.n	80097e8 <std+0x48>
 80097e2:	33d0      	adds	r3, #208	@ 0xd0
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d105      	bne.n	80097f4 <std+0x54>
 80097e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f0:	f000 ba84 	b.w	8009cfc <__retarget_lock_init_recursive>
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	bf00      	nop
 80097f8:	08009a55 	.word	0x08009a55
 80097fc:	08009a77 	.word	0x08009a77
 8009800:	08009aaf 	.word	0x08009aaf
 8009804:	08009ad3 	.word	0x08009ad3
 8009808:	20001cbc 	.word	0x20001cbc

0800980c <stdio_exit_handler>:
 800980c:	4a02      	ldr	r2, [pc, #8]	@ (8009818 <stdio_exit_handler+0xc>)
 800980e:	4903      	ldr	r1, [pc, #12]	@ (800981c <stdio_exit_handler+0x10>)
 8009810:	4803      	ldr	r0, [pc, #12]	@ (8009820 <stdio_exit_handler+0x14>)
 8009812:	f000 b869 	b.w	80098e8 <_fwalk_sglue>
 8009816:	bf00      	nop
 8009818:	20000048 	.word	0x20000048
 800981c:	0800b8f9 	.word	0x0800b8f9
 8009820:	20000058 	.word	0x20000058

08009824 <cleanup_stdio>:
 8009824:	6841      	ldr	r1, [r0, #4]
 8009826:	4b0c      	ldr	r3, [pc, #48]	@ (8009858 <cleanup_stdio+0x34>)
 8009828:	4299      	cmp	r1, r3
 800982a:	b510      	push	{r4, lr}
 800982c:	4604      	mov	r4, r0
 800982e:	d001      	beq.n	8009834 <cleanup_stdio+0x10>
 8009830:	f002 f862 	bl	800b8f8 <_fflush_r>
 8009834:	68a1      	ldr	r1, [r4, #8]
 8009836:	4b09      	ldr	r3, [pc, #36]	@ (800985c <cleanup_stdio+0x38>)
 8009838:	4299      	cmp	r1, r3
 800983a:	d002      	beq.n	8009842 <cleanup_stdio+0x1e>
 800983c:	4620      	mov	r0, r4
 800983e:	f002 f85b 	bl	800b8f8 <_fflush_r>
 8009842:	68e1      	ldr	r1, [r4, #12]
 8009844:	4b06      	ldr	r3, [pc, #24]	@ (8009860 <cleanup_stdio+0x3c>)
 8009846:	4299      	cmp	r1, r3
 8009848:	d004      	beq.n	8009854 <cleanup_stdio+0x30>
 800984a:	4620      	mov	r0, r4
 800984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009850:	f002 b852 	b.w	800b8f8 <_fflush_r>
 8009854:	bd10      	pop	{r4, pc}
 8009856:	bf00      	nop
 8009858:	20001cbc 	.word	0x20001cbc
 800985c:	20001d24 	.word	0x20001d24
 8009860:	20001d8c 	.word	0x20001d8c

08009864 <global_stdio_init.part.0>:
 8009864:	b510      	push	{r4, lr}
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x30>)
 8009868:	4c0b      	ldr	r4, [pc, #44]	@ (8009898 <global_stdio_init.part.0+0x34>)
 800986a:	4a0c      	ldr	r2, [pc, #48]	@ (800989c <global_stdio_init.part.0+0x38>)
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	4620      	mov	r0, r4
 8009870:	2200      	movs	r2, #0
 8009872:	2104      	movs	r1, #4
 8009874:	f7ff ff94 	bl	80097a0 <std>
 8009878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800987c:	2201      	movs	r2, #1
 800987e:	2109      	movs	r1, #9
 8009880:	f7ff ff8e 	bl	80097a0 <std>
 8009884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009888:	2202      	movs	r2, #2
 800988a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988e:	2112      	movs	r1, #18
 8009890:	f7ff bf86 	b.w	80097a0 <std>
 8009894:	20001df4 	.word	0x20001df4
 8009898:	20001cbc 	.word	0x20001cbc
 800989c:	0800980d 	.word	0x0800980d

080098a0 <__sfp_lock_acquire>:
 80098a0:	4801      	ldr	r0, [pc, #4]	@ (80098a8 <__sfp_lock_acquire+0x8>)
 80098a2:	f000 ba2c 	b.w	8009cfe <__retarget_lock_acquire_recursive>
 80098a6:	bf00      	nop
 80098a8:	20001dfd 	.word	0x20001dfd

080098ac <__sfp_lock_release>:
 80098ac:	4801      	ldr	r0, [pc, #4]	@ (80098b4 <__sfp_lock_release+0x8>)
 80098ae:	f000 ba27 	b.w	8009d00 <__retarget_lock_release_recursive>
 80098b2:	bf00      	nop
 80098b4:	20001dfd 	.word	0x20001dfd

080098b8 <__sinit>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	4604      	mov	r4, r0
 80098bc:	f7ff fff0 	bl	80098a0 <__sfp_lock_acquire>
 80098c0:	6a23      	ldr	r3, [r4, #32]
 80098c2:	b11b      	cbz	r3, 80098cc <__sinit+0x14>
 80098c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c8:	f7ff bff0 	b.w	80098ac <__sfp_lock_release>
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x28>)
 80098ce:	6223      	str	r3, [r4, #32]
 80098d0:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <__sinit+0x2c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f5      	bne.n	80098c4 <__sinit+0xc>
 80098d8:	f7ff ffc4 	bl	8009864 <global_stdio_init.part.0>
 80098dc:	e7f2      	b.n	80098c4 <__sinit+0xc>
 80098de:	bf00      	nop
 80098e0:	08009825 	.word	0x08009825
 80098e4:	20001df4 	.word	0x20001df4

080098e8 <_fwalk_sglue>:
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4607      	mov	r7, r0
 80098ee:	4688      	mov	r8, r1
 80098f0:	4614      	mov	r4, r2
 80098f2:	2600      	movs	r6, #0
 80098f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f8:	f1b9 0901 	subs.w	r9, r9, #1
 80098fc:	d505      	bpl.n	800990a <_fwalk_sglue+0x22>
 80098fe:	6824      	ldr	r4, [r4, #0]
 8009900:	2c00      	cmp	r4, #0
 8009902:	d1f7      	bne.n	80098f4 <_fwalk_sglue+0xc>
 8009904:	4630      	mov	r0, r6
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d907      	bls.n	8009920 <_fwalk_sglue+0x38>
 8009910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009914:	3301      	adds	r3, #1
 8009916:	d003      	beq.n	8009920 <_fwalk_sglue+0x38>
 8009918:	4629      	mov	r1, r5
 800991a:	4638      	mov	r0, r7
 800991c:	47c0      	blx	r8
 800991e:	4306      	orrs	r6, r0
 8009920:	3568      	adds	r5, #104	@ 0x68
 8009922:	e7e9      	b.n	80098f8 <_fwalk_sglue+0x10>

08009924 <iprintf>:
 8009924:	b40f      	push	{r0, r1, r2, r3}
 8009926:	b507      	push	{r0, r1, r2, lr}
 8009928:	4906      	ldr	r1, [pc, #24]	@ (8009944 <iprintf+0x20>)
 800992a:	ab04      	add	r3, sp, #16
 800992c:	6808      	ldr	r0, [r1, #0]
 800992e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009932:	6881      	ldr	r1, [r0, #8]
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	f001 fe43 	bl	800b5c0 <_vfiprintf_r>
 800993a:	b003      	add	sp, #12
 800993c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009940:	b004      	add	sp, #16
 8009942:	4770      	bx	lr
 8009944:	20000054 	.word	0x20000054

08009948 <putchar>:
 8009948:	4b02      	ldr	r3, [pc, #8]	@ (8009954 <putchar+0xc>)
 800994a:	4601      	mov	r1, r0
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	6882      	ldr	r2, [r0, #8]
 8009950:	f002 b85c 	b.w	800ba0c <_putc_r>
 8009954:	20000054 	.word	0x20000054

08009958 <_puts_r>:
 8009958:	6a03      	ldr	r3, [r0, #32]
 800995a:	b570      	push	{r4, r5, r6, lr}
 800995c:	6884      	ldr	r4, [r0, #8]
 800995e:	4605      	mov	r5, r0
 8009960:	460e      	mov	r6, r1
 8009962:	b90b      	cbnz	r3, 8009968 <_puts_r+0x10>
 8009964:	f7ff ffa8 	bl	80098b8 <__sinit>
 8009968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800996a:	07db      	lsls	r3, r3, #31
 800996c:	d405      	bmi.n	800997a <_puts_r+0x22>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	0598      	lsls	r0, r3, #22
 8009972:	d402      	bmi.n	800997a <_puts_r+0x22>
 8009974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009976:	f000 f9c2 	bl	8009cfe <__retarget_lock_acquire_recursive>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	0719      	lsls	r1, r3, #28
 800997e:	d502      	bpl.n	8009986 <_puts_r+0x2e>
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d135      	bne.n	80099f2 <_puts_r+0x9a>
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 f8e5 	bl	8009b58 <__swsetup_r>
 800998e:	b380      	cbz	r0, 80099f2 <_puts_r+0x9a>
 8009990:	f04f 35ff 	mov.w	r5, #4294967295
 8009994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009996:	07da      	lsls	r2, r3, #31
 8009998:	d405      	bmi.n	80099a6 <_puts_r+0x4e>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	059b      	lsls	r3, r3, #22
 800999e:	d402      	bmi.n	80099a6 <_puts_r+0x4e>
 80099a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099a2:	f000 f9ad 	bl	8009d00 <__retarget_lock_release_recursive>
 80099a6:	4628      	mov	r0, r5
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da04      	bge.n	80099b8 <_puts_r+0x60>
 80099ae:	69a2      	ldr	r2, [r4, #24]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	dc17      	bgt.n	80099e4 <_puts_r+0x8c>
 80099b4:	290a      	cmp	r1, #10
 80099b6:	d015      	beq.n	80099e4 <_puts_r+0x8c>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	6022      	str	r2, [r4, #0]
 80099be:	7019      	strb	r1, [r3, #0]
 80099c0:	68a3      	ldr	r3, [r4, #8]
 80099c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099c6:	3b01      	subs	r3, #1
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	2900      	cmp	r1, #0
 80099cc:	d1ed      	bne.n	80099aa <_puts_r+0x52>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da11      	bge.n	80099f6 <_puts_r+0x9e>
 80099d2:	4622      	mov	r2, r4
 80099d4:	210a      	movs	r1, #10
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 f87f 	bl	8009ada <__swbuf_r>
 80099dc:	3001      	adds	r0, #1
 80099de:	d0d7      	beq.n	8009990 <_puts_r+0x38>
 80099e0:	250a      	movs	r5, #10
 80099e2:	e7d7      	b.n	8009994 <_puts_r+0x3c>
 80099e4:	4622      	mov	r2, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f877 	bl	8009ada <__swbuf_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d1e7      	bne.n	80099c0 <_puts_r+0x68>
 80099f0:	e7ce      	b.n	8009990 <_puts_r+0x38>
 80099f2:	3e01      	subs	r6, #1
 80099f4:	e7e4      	b.n	80099c0 <_puts_r+0x68>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	6022      	str	r2, [r4, #0]
 80099fc:	220a      	movs	r2, #10
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	e7ee      	b.n	80099e0 <_puts_r+0x88>
	...

08009a04 <puts>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	@ (8009a10 <puts+0xc>)
 8009a06:	4601      	mov	r1, r0
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f7ff bfa5 	b.w	8009958 <_puts_r>
 8009a0e:	bf00      	nop
 8009a10:	20000054 	.word	0x20000054

08009a14 <siprintf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	b500      	push	{lr}
 8009a18:	b09c      	sub	sp, #112	@ 0x70
 8009a1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a1c:	9002      	str	r0, [sp, #8]
 8009a1e:	9006      	str	r0, [sp, #24]
 8009a20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a24:	4809      	ldr	r0, [pc, #36]	@ (8009a4c <siprintf+0x38>)
 8009a26:	9107      	str	r1, [sp, #28]
 8009a28:	9104      	str	r1, [sp, #16]
 8009a2a:	4909      	ldr	r1, [pc, #36]	@ (8009a50 <siprintf+0x3c>)
 8009a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	6800      	ldr	r0, [r0, #0]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	a902      	add	r1, sp, #8
 8009a38:	f001 fc9c 	bl	800b374 <_svfiprintf_r>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	b01c      	add	sp, #112	@ 0x70
 8009a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a48:	b003      	add	sp, #12
 8009a4a:	4770      	bx	lr
 8009a4c:	20000054 	.word	0x20000054
 8009a50:	ffff0208 	.word	0xffff0208

08009a54 <__sread>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	460c      	mov	r4, r1
 8009a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5c:	f000 f900 	bl	8009c60 <_read_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	bfab      	itete	ge
 8009a64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a66:	89a3      	ldrhlt	r3, [r4, #12]
 8009a68:	181b      	addge	r3, r3, r0
 8009a6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a6e:	bfac      	ite	ge
 8009a70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a72:	81a3      	strhlt	r3, [r4, #12]
 8009a74:	bd10      	pop	{r4, pc}

08009a76 <__swrite>:
 8009a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7a:	461f      	mov	r7, r3
 8009a7c:	898b      	ldrh	r3, [r1, #12]
 8009a7e:	05db      	lsls	r3, r3, #23
 8009a80:	4605      	mov	r5, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	4616      	mov	r6, r2
 8009a86:	d505      	bpl.n	8009a94 <__swrite+0x1e>
 8009a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f000 f8d4 	bl	8009c3c <_lseek_r>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a9e:	81a3      	strh	r3, [r4, #12]
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aaa:	f000 b8eb 	b.w	8009c84 <_write_r>

08009aae <__sseek>:
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab6:	f000 f8c1 	bl	8009c3c <_lseek_r>
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	bf15      	itete	ne
 8009ac0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ac2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ac6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009aca:	81a3      	strheq	r3, [r4, #12]
 8009acc:	bf18      	it	ne
 8009ace:	81a3      	strhne	r3, [r4, #12]
 8009ad0:	bd10      	pop	{r4, pc}

08009ad2 <__sclose>:
 8009ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad6:	f000 b8a1 	b.w	8009c1c <_close_r>

08009ada <__swbuf_r>:
 8009ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009adc:	460e      	mov	r6, r1
 8009ade:	4614      	mov	r4, r2
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	b118      	cbz	r0, 8009aec <__swbuf_r+0x12>
 8009ae4:	6a03      	ldr	r3, [r0, #32]
 8009ae6:	b90b      	cbnz	r3, 8009aec <__swbuf_r+0x12>
 8009ae8:	f7ff fee6 	bl	80098b8 <__sinit>
 8009aec:	69a3      	ldr	r3, [r4, #24]
 8009aee:	60a3      	str	r3, [r4, #8]
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	071a      	lsls	r2, r3, #28
 8009af4:	d501      	bpl.n	8009afa <__swbuf_r+0x20>
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	b943      	cbnz	r3, 8009b0c <__swbuf_r+0x32>
 8009afa:	4621      	mov	r1, r4
 8009afc:	4628      	mov	r0, r5
 8009afe:	f000 f82b 	bl	8009b58 <__swsetup_r>
 8009b02:	b118      	cbz	r0, 8009b0c <__swbuf_r+0x32>
 8009b04:	f04f 37ff 	mov.w	r7, #4294967295
 8009b08:	4638      	mov	r0, r7
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	6922      	ldr	r2, [r4, #16]
 8009b10:	1a98      	subs	r0, r3, r2
 8009b12:	6963      	ldr	r3, [r4, #20]
 8009b14:	b2f6      	uxtb	r6, r6
 8009b16:	4283      	cmp	r3, r0
 8009b18:	4637      	mov	r7, r6
 8009b1a:	dc05      	bgt.n	8009b28 <__swbuf_r+0x4e>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f001 feea 	bl	800b8f8 <_fflush_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1ed      	bne.n	8009b04 <__swbuf_r+0x2a>
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	701e      	strb	r6, [r3, #0]
 8009b36:	6962      	ldr	r2, [r4, #20]
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d004      	beq.n	8009b48 <__swbuf_r+0x6e>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	07db      	lsls	r3, r3, #31
 8009b42:	d5e1      	bpl.n	8009b08 <__swbuf_r+0x2e>
 8009b44:	2e0a      	cmp	r6, #10
 8009b46:	d1df      	bne.n	8009b08 <__swbuf_r+0x2e>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f001 fed4 	bl	800b8f8 <_fflush_r>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d0d9      	beq.n	8009b08 <__swbuf_r+0x2e>
 8009b54:	e7d6      	b.n	8009b04 <__swbuf_r+0x2a>
	...

08009b58 <__swsetup_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4b29      	ldr	r3, [pc, #164]	@ (8009c00 <__swsetup_r+0xa8>)
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	460c      	mov	r4, r1
 8009b62:	b118      	cbz	r0, 8009b6c <__swsetup_r+0x14>
 8009b64:	6a03      	ldr	r3, [r0, #32]
 8009b66:	b90b      	cbnz	r3, 8009b6c <__swsetup_r+0x14>
 8009b68:	f7ff fea6 	bl	80098b8 <__sinit>
 8009b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b70:	0719      	lsls	r1, r3, #28
 8009b72:	d422      	bmi.n	8009bba <__swsetup_r+0x62>
 8009b74:	06da      	lsls	r2, r3, #27
 8009b76:	d407      	bmi.n	8009b88 <__swsetup_r+0x30>
 8009b78:	2209      	movs	r2, #9
 8009b7a:	602a      	str	r2, [r5, #0]
 8009b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	e033      	b.n	8009bf0 <__swsetup_r+0x98>
 8009b88:	0758      	lsls	r0, r3, #29
 8009b8a:	d512      	bpl.n	8009bb2 <__swsetup_r+0x5a>
 8009b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b8e:	b141      	cbz	r1, 8009ba2 <__swsetup_r+0x4a>
 8009b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b94:	4299      	cmp	r1, r3
 8009b96:	d002      	beq.n	8009b9e <__swsetup_r+0x46>
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 ff0d 	bl	800a9b8 <_free_r>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	2300      	movs	r3, #0
 8009bac:	6063      	str	r3, [r4, #4]
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f043 0308 	orr.w	r3, r3, #8
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	b94b      	cbnz	r3, 8009bd2 <__swsetup_r+0x7a>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc8:	d003      	beq.n	8009bd2 <__swsetup_r+0x7a>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f001 fee1 	bl	800b994 <__smakebuf_r>
 8009bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd6:	f013 0201 	ands.w	r2, r3, #1
 8009bda:	d00a      	beq.n	8009bf2 <__swsetup_r+0x9a>
 8009bdc:	2200      	movs	r2, #0
 8009bde:	60a2      	str	r2, [r4, #8]
 8009be0:	6962      	ldr	r2, [r4, #20]
 8009be2:	4252      	negs	r2, r2
 8009be4:	61a2      	str	r2, [r4, #24]
 8009be6:	6922      	ldr	r2, [r4, #16]
 8009be8:	b942      	cbnz	r2, 8009bfc <__swsetup_r+0xa4>
 8009bea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bee:	d1c5      	bne.n	8009b7c <__swsetup_r+0x24>
 8009bf0:	bd38      	pop	{r3, r4, r5, pc}
 8009bf2:	0799      	lsls	r1, r3, #30
 8009bf4:	bf58      	it	pl
 8009bf6:	6962      	ldrpl	r2, [r4, #20]
 8009bf8:	60a2      	str	r2, [r4, #8]
 8009bfa:	e7f4      	b.n	8009be6 <__swsetup_r+0x8e>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	e7f7      	b.n	8009bf0 <__swsetup_r+0x98>
 8009c00:	20000054 	.word	0x20000054

08009c04 <memset>:
 8009c04:	4402      	add	r2, r0
 8009c06:	4603      	mov	r3, r0
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d100      	bne.n	8009c0e <memset+0xa>
 8009c0c:	4770      	bx	lr
 8009c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c12:	e7f9      	b.n	8009c08 <memset+0x4>

08009c14 <_localeconv_r>:
 8009c14:	4800      	ldr	r0, [pc, #0]	@ (8009c18 <_localeconv_r+0x4>)
 8009c16:	4770      	bx	lr
 8009c18:	20000194 	.word	0x20000194

08009c1c <_close_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d06      	ldr	r5, [pc, #24]	@ (8009c38 <_close_r+0x1c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f9 f85c 	bl	8002ce4 <_close>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_close_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_close_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20001df8 	.word	0x20001df8

08009c3c <_lseek_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	@ (8009c5c <_lseek_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f9 f871 	bl	8002d32 <_lseek>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_lseek_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_lseek_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20001df8 	.word	0x20001df8

08009c60 <_read_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	@ (8009c80 <_read_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7f8 ffff 	bl	8002c72 <_read>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_read_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_read_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20001df8 	.word	0x20001df8

08009c84 <_write_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d07      	ldr	r5, [pc, #28]	@ (8009ca4 <_write_r+0x20>)
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4608      	mov	r0, r1
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	602a      	str	r2, [r5, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	f7f9 f80a 	bl	8002cac <_write>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_write_r+0x1e>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_write_r+0x1e>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20001df8 	.word	0x20001df8

08009ca8 <__errno>:
 8009ca8:	4b01      	ldr	r3, [pc, #4]	@ (8009cb0 <__errno+0x8>)
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20000054 	.word	0x20000054

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cec <__libc_init_array+0x38>)
 8009cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8009cf0 <__libc_init_array+0x3c>)
 8009cba:	1b64      	subs	r4, r4, r5
 8009cbc:	10a4      	asrs	r4, r4, #2
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8009cf4 <__libc_init_array+0x40>)
 8009cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8009cf8 <__libc_init_array+0x44>)
 8009cc8:	f002 fa72 	bl	800c1b0 <_init>
 8009ccc:	1b64      	subs	r4, r4, r5
 8009cce:	10a4      	asrs	r4, r4, #2
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	08022008 	.word	0x08022008
 8009cf0:	08022008 	.word	0x08022008
 8009cf4:	08022008 	.word	0x08022008
 8009cf8:	0802200c 	.word	0x0802200c

08009cfc <__retarget_lock_init_recursive>:
 8009cfc:	4770      	bx	lr

08009cfe <__retarget_lock_acquire_recursive>:
 8009cfe:	4770      	bx	lr

08009d00 <__retarget_lock_release_recursive>:
 8009d00:	4770      	bx	lr

08009d02 <memcpy>:
 8009d02:	440a      	add	r2, r1
 8009d04:	4291      	cmp	r1, r2
 8009d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d0a:	d100      	bne.n	8009d0e <memcpy+0xc>
 8009d0c:	4770      	bx	lr
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d18:	4291      	cmp	r1, r2
 8009d1a:	d1f9      	bne.n	8009d10 <memcpy+0xe>
 8009d1c:	bd10      	pop	{r4, pc}

08009d1e <quorem>:
 8009d1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d22:	6903      	ldr	r3, [r0, #16]
 8009d24:	690c      	ldr	r4, [r1, #16]
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	4607      	mov	r7, r0
 8009d2a:	db7e      	blt.n	8009e2a <quorem+0x10c>
 8009d2c:	3c01      	subs	r4, #1
 8009d2e:	f101 0814 	add.w	r8, r1, #20
 8009d32:	00a3      	lsls	r3, r4, #2
 8009d34:	f100 0514 	add.w	r5, r0, #20
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d50:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d54:	d32e      	bcc.n	8009db4 <quorem+0x96>
 8009d56:	f04f 0a00 	mov.w	sl, #0
 8009d5a:	46c4      	mov	ip, r8
 8009d5c:	46ae      	mov	lr, r5
 8009d5e:	46d3      	mov	fp, sl
 8009d60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d64:	b298      	uxth	r0, r3
 8009d66:	fb06 a000 	mla	r0, r6, r0, sl
 8009d6a:	0c02      	lsrs	r2, r0, #16
 8009d6c:	0c1b      	lsrs	r3, r3, #16
 8009d6e:	fb06 2303 	mla	r3, r6, r3, r2
 8009d72:	f8de 2000 	ldr.w	r2, [lr]
 8009d76:	b280      	uxth	r0, r0
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	1a12      	subs	r2, r2, r0
 8009d7c:	445a      	add	r2, fp
 8009d7e:	f8de 0000 	ldr.w	r0, [lr]
 8009d82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d90:	b292      	uxth	r2, r2
 8009d92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d96:	45e1      	cmp	r9, ip
 8009d98:	f84e 2b04 	str.w	r2, [lr], #4
 8009d9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009da0:	d2de      	bcs.n	8009d60 <quorem+0x42>
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	58eb      	ldr	r3, [r5, r3]
 8009da6:	b92b      	cbnz	r3, 8009db4 <quorem+0x96>
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	3b04      	subs	r3, #4
 8009dac:	429d      	cmp	r5, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	d32f      	bcc.n	8009e12 <quorem+0xf4>
 8009db2:	613c      	str	r4, [r7, #16]
 8009db4:	4638      	mov	r0, r7
 8009db6:	f001 f979 	bl	800b0ac <__mcmp>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	db25      	blt.n	8009e0a <quorem+0xec>
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009dc6:	f8d1 c000 	ldr.w	ip, [r1]
 8009dca:	fa1f fe82 	uxth.w	lr, r2
 8009dce:	fa1f f38c 	uxth.w	r3, ip
 8009dd2:	eba3 030e 	sub.w	r3, r3, lr
 8009dd6:	4403      	add	r3, r0
 8009dd8:	0c12      	lsrs	r2, r2, #16
 8009dda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009dde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009de8:	45c1      	cmp	r9, r8
 8009dea:	f841 3b04 	str.w	r3, [r1], #4
 8009dee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009df2:	d2e6      	bcs.n	8009dc2 <quorem+0xa4>
 8009df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009df8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dfc:	b922      	cbnz	r2, 8009e08 <quorem+0xea>
 8009dfe:	3b04      	subs	r3, #4
 8009e00:	429d      	cmp	r5, r3
 8009e02:	461a      	mov	r2, r3
 8009e04:	d30b      	bcc.n	8009e1e <quorem+0x100>
 8009e06:	613c      	str	r4, [r7, #16]
 8009e08:	3601      	adds	r6, #1
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	b003      	add	sp, #12
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	3b04      	subs	r3, #4
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	d1cb      	bne.n	8009db2 <quorem+0x94>
 8009e1a:	3c01      	subs	r4, #1
 8009e1c:	e7c6      	b.n	8009dac <quorem+0x8e>
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	3b04      	subs	r3, #4
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	d1ef      	bne.n	8009e06 <quorem+0xe8>
 8009e26:	3c01      	subs	r4, #1
 8009e28:	e7ea      	b.n	8009e00 <quorem+0xe2>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e7ee      	b.n	8009e0c <quorem+0xee>
	...

08009e30 <_dtoa_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	69c7      	ldr	r7, [r0, #28]
 8009e36:	b099      	sub	sp, #100	@ 0x64
 8009e38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e3c:	ec55 4b10 	vmov	r4, r5, d0
 8009e40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e44:	4683      	mov	fp, r0
 8009e46:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e4a:	b97f      	cbnz	r7, 8009e6c <_dtoa_r+0x3c>
 8009e4c:	2010      	movs	r0, #16
 8009e4e:	f000 fdfd 	bl	800aa4c <malloc>
 8009e52:	4602      	mov	r2, r0
 8009e54:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e58:	b920      	cbnz	r0, 8009e64 <_dtoa_r+0x34>
 8009e5a:	4ba7      	ldr	r3, [pc, #668]	@ (800a0f8 <_dtoa_r+0x2c8>)
 8009e5c:	21ef      	movs	r1, #239	@ 0xef
 8009e5e:	48a7      	ldr	r0, [pc, #668]	@ (800a0fc <_dtoa_r+0x2cc>)
 8009e60:	f001 fe54 	bl	800bb0c <__assert_func>
 8009e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e68:	6007      	str	r7, [r0, #0]
 8009e6a:	60c7      	str	r7, [r0, #12]
 8009e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e70:	6819      	ldr	r1, [r3, #0]
 8009e72:	b159      	cbz	r1, 8009e8c <_dtoa_r+0x5c>
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	604a      	str	r2, [r1, #4]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	4093      	lsls	r3, r2
 8009e7c:	608b      	str	r3, [r1, #8]
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 feda 	bl	800ac38 <_Bfree>
 8009e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	1e2b      	subs	r3, r5, #0
 8009e8e:	bfb9      	ittee	lt
 8009e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e94:	9303      	strlt	r3, [sp, #12]
 8009e96:	2300      	movge	r3, #0
 8009e98:	6033      	strge	r3, [r6, #0]
 8009e9a:	9f03      	ldr	r7, [sp, #12]
 8009e9c:	4b98      	ldr	r3, [pc, #608]	@ (800a100 <_dtoa_r+0x2d0>)
 8009e9e:	bfbc      	itt	lt
 8009ea0:	2201      	movlt	r2, #1
 8009ea2:	6032      	strlt	r2, [r6, #0]
 8009ea4:	43bb      	bics	r3, r7
 8009ea6:	d112      	bne.n	8009ece <_dtoa_r+0x9e>
 8009ea8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009eb4:	4323      	orrs	r3, r4
 8009eb6:	f000 854d 	beq.w	800a954 <_dtoa_r+0xb24>
 8009eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a114 <_dtoa_r+0x2e4>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 854f 	beq.w	800a964 <_dtoa_r+0xb34>
 8009ec6:	f10a 0303 	add.w	r3, sl, #3
 8009eca:	f000 bd49 	b.w	800a960 <_dtoa_r+0xb30>
 8009ece:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	ec51 0b17 	vmov	r0, r1, d7
 8009ed8:	2300      	movs	r3, #0
 8009eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ede:	f7f6 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	b158      	cbz	r0, 8009efe <_dtoa_r+0xce>
 8009ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ee8:	2301      	movs	r3, #1
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eee:	b113      	cbz	r3, 8009ef6 <_dtoa_r+0xc6>
 8009ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ef2:	4b84      	ldr	r3, [pc, #528]	@ (800a104 <_dtoa_r+0x2d4>)
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a118 <_dtoa_r+0x2e8>
 8009efa:	f000 bd33 	b.w	800a964 <_dtoa_r+0xb34>
 8009efe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f02:	aa16      	add	r2, sp, #88	@ 0x58
 8009f04:	a917      	add	r1, sp, #92	@ 0x5c
 8009f06:	4658      	mov	r0, fp
 8009f08:	f001 f980 	bl	800b20c <__d2b>
 8009f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f10:	4681      	mov	r9, r0
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	d077      	beq.n	800a006 <_dtoa_r+0x1d6>
 8009f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f30:	4619      	mov	r1, r3
 8009f32:	2200      	movs	r2, #0
 8009f34:	4b74      	ldr	r3, [pc, #464]	@ (800a108 <_dtoa_r+0x2d8>)
 8009f36:	f7f6 f9af 	bl	8000298 <__aeabi_dsub>
 8009f3a:	a369      	add	r3, pc, #420	@ (adr r3, 800a0e0 <_dtoa_r+0x2b0>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 fb62 	bl	8000608 <__aeabi_dmul>
 8009f44:	a368      	add	r3, pc, #416	@ (adr r3, 800a0e8 <_dtoa_r+0x2b8>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f9a7 	bl	800029c <__adddf3>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4630      	mov	r0, r6
 8009f52:	460d      	mov	r5, r1
 8009f54:	f7f6 faee 	bl	8000534 <__aeabi_i2d>
 8009f58:	a365      	add	r3, pc, #404	@ (adr r3, 800a0f0 <_dtoa_r+0x2c0>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 fb53 	bl	8000608 <__aeabi_dmul>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 f997 	bl	800029c <__adddf3>
 8009f6e:	4604      	mov	r4, r0
 8009f70:	460d      	mov	r5, r1
 8009f72:	f7f6 fdf9 	bl	8000b68 <__aeabi_d2iz>
 8009f76:	2200      	movs	r2, #0
 8009f78:	4607      	mov	r7, r0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8009f84:	b140      	cbz	r0, 8009f98 <_dtoa_r+0x168>
 8009f86:	4638      	mov	r0, r7
 8009f88:	f7f6 fad4 	bl	8000534 <__aeabi_i2d>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	f7f6 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f94:	b900      	cbnz	r0, 8009f98 <_dtoa_r+0x168>
 8009f96:	3f01      	subs	r7, #1
 8009f98:	2f16      	cmp	r7, #22
 8009f9a:	d851      	bhi.n	800a040 <_dtoa_r+0x210>
 8009f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800a10c <_dtoa_r+0x2dc>)
 8009f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009faa:	f7f6 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d048      	beq.n	800a044 <_dtoa_r+0x214>
 8009fb2:	3f01      	subs	r7, #1
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fba:	1b9b      	subs	r3, r3, r6
 8009fbc:	1e5a      	subs	r2, r3, #1
 8009fbe:	bf44      	itt	mi
 8009fc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009fc4:	2300      	movmi	r3, #0
 8009fc6:	9208      	str	r2, [sp, #32]
 8009fc8:	bf54      	ite	pl
 8009fca:	f04f 0800 	movpl.w	r8, #0
 8009fce:	9308      	strmi	r3, [sp, #32]
 8009fd0:	2f00      	cmp	r7, #0
 8009fd2:	db39      	blt.n	800a048 <_dtoa_r+0x218>
 8009fd4:	9b08      	ldr	r3, [sp, #32]
 8009fd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009fd8:	443b      	add	r3, r7
 8009fda:	9308      	str	r3, [sp, #32]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe2:	2b09      	cmp	r3, #9
 8009fe4:	d864      	bhi.n	800a0b0 <_dtoa_r+0x280>
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	bfc4      	itt	gt
 8009fea:	3b04      	subgt	r3, #4
 8009fec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ff4:	bfcc      	ite	gt
 8009ff6:	2400      	movgt	r4, #0
 8009ff8:	2401      	movle	r4, #1
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d863      	bhi.n	800a0c6 <_dtoa_r+0x296>
 8009ffe:	e8df f003 	tbb	[pc, r3]
 800a002:	372a      	.short	0x372a
 800a004:	5535      	.short	0x5535
 800a006:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a00a:	441e      	add	r6, r3
 800a00c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a010:	2b20      	cmp	r3, #32
 800a012:	bfc1      	itttt	gt
 800a014:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a018:	409f      	lslgt	r7, r3
 800a01a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a01e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a022:	bfd6      	itet	le
 800a024:	f1c3 0320 	rsble	r3, r3, #32
 800a028:	ea47 0003 	orrgt.w	r0, r7, r3
 800a02c:	fa04 f003 	lslle.w	r0, r4, r3
 800a030:	f7f6 fa70 	bl	8000514 <__aeabi_ui2d>
 800a034:	2201      	movs	r2, #1
 800a036:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a03a:	3e01      	subs	r6, #1
 800a03c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a03e:	e777      	b.n	8009f30 <_dtoa_r+0x100>
 800a040:	2301      	movs	r3, #1
 800a042:	e7b8      	b.n	8009fb6 <_dtoa_r+0x186>
 800a044:	9012      	str	r0, [sp, #72]	@ 0x48
 800a046:	e7b7      	b.n	8009fb8 <_dtoa_r+0x188>
 800a048:	427b      	negs	r3, r7
 800a04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a04c:	2300      	movs	r3, #0
 800a04e:	eba8 0807 	sub.w	r8, r8, r7
 800a052:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a054:	e7c4      	b.n	8009fe0 <_dtoa_r+0x1b0>
 800a056:	2300      	movs	r3, #0
 800a058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dc35      	bgt.n	800a0cc <_dtoa_r+0x29c>
 800a060:	2301      	movs	r3, #1
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	461a      	mov	r2, r3
 800a068:	920e      	str	r2, [sp, #56]	@ 0x38
 800a06a:	e00b      	b.n	800a084 <_dtoa_r+0x254>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e7f3      	b.n	800a058 <_dtoa_r+0x228>
 800a070:	2300      	movs	r3, #0
 800a072:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	3301      	adds	r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	bfb8      	it	lt
 800a082:	2301      	movlt	r3, #1
 800a084:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a088:	2100      	movs	r1, #0
 800a08a:	2204      	movs	r2, #4
 800a08c:	f102 0514 	add.w	r5, r2, #20
 800a090:	429d      	cmp	r5, r3
 800a092:	d91f      	bls.n	800a0d4 <_dtoa_r+0x2a4>
 800a094:	6041      	str	r1, [r0, #4]
 800a096:	4658      	mov	r0, fp
 800a098:	f000 fd8e 	bl	800abb8 <_Balloc>
 800a09c:	4682      	mov	sl, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d13c      	bne.n	800a11c <_dtoa_r+0x2ec>
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <_dtoa_r+0x2e0>)
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0aa:	e6d8      	b.n	8009e5e <_dtoa_r+0x2e>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e7e0      	b.n	800a072 <_dtoa_r+0x242>
 800a0b0:	2401      	movs	r4, #1
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	9307      	str	r3, [sp, #28]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2312      	movs	r3, #18
 800a0c4:	e7d0      	b.n	800a068 <_dtoa_r+0x238>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0ca:	e7f5      	b.n	800a0b8 <_dtoa_r+0x288>
 800a0cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	9307      	str	r3, [sp, #28]
 800a0d2:	e7d7      	b.n	800a084 <_dtoa_r+0x254>
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	0052      	lsls	r2, r2, #1
 800a0d8:	e7d8      	b.n	800a08c <_dtoa_r+0x25c>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	636f4361 	.word	0x636f4361
 800a0e4:	3fd287a7 	.word	0x3fd287a7
 800a0e8:	8b60c8b3 	.word	0x8b60c8b3
 800a0ec:	3fc68a28 	.word	0x3fc68a28
 800a0f0:	509f79fb 	.word	0x509f79fb
 800a0f4:	3fd34413 	.word	0x3fd34413
 800a0f8:	08021c5d 	.word	0x08021c5d
 800a0fc:	08021c74 	.word	0x08021c74
 800a100:	7ff00000 	.word	0x7ff00000
 800a104:	08021c2d 	.word	0x08021c2d
 800a108:	3ff80000 	.word	0x3ff80000
 800a10c:	08021d70 	.word	0x08021d70
 800a110:	08021ccc 	.word	0x08021ccc
 800a114:	08021c59 	.word	0x08021c59
 800a118:	08021c2c 	.word	0x08021c2c
 800a11c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a120:	6018      	str	r0, [r3, #0]
 800a122:	9b07      	ldr	r3, [sp, #28]
 800a124:	2b0e      	cmp	r3, #14
 800a126:	f200 80a4 	bhi.w	800a272 <_dtoa_r+0x442>
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	f000 80a1 	beq.w	800a272 <_dtoa_r+0x442>
 800a130:	2f00      	cmp	r7, #0
 800a132:	dd33      	ble.n	800a19c <_dtoa_r+0x36c>
 800a134:	4bad      	ldr	r3, [pc, #692]	@ (800a3ec <_dtoa_r+0x5bc>)
 800a136:	f007 020f 	and.w	r2, r7, #15
 800a13a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a13e:	ed93 7b00 	vldr	d7, [r3]
 800a142:	05f8      	lsls	r0, r7, #23
 800a144:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a148:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a14c:	d516      	bpl.n	800a17c <_dtoa_r+0x34c>
 800a14e:	4ba8      	ldr	r3, [pc, #672]	@ (800a3f0 <_dtoa_r+0x5c0>)
 800a150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a158:	f7f6 fb80 	bl	800085c <__aeabi_ddiv>
 800a15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a160:	f004 040f 	and.w	r4, r4, #15
 800a164:	2603      	movs	r6, #3
 800a166:	4da2      	ldr	r5, [pc, #648]	@ (800a3f0 <_dtoa_r+0x5c0>)
 800a168:	b954      	cbnz	r4, 800a180 <_dtoa_r+0x350>
 800a16a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a172:	f7f6 fb73 	bl	800085c <__aeabi_ddiv>
 800a176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a17a:	e028      	b.n	800a1ce <_dtoa_r+0x39e>
 800a17c:	2602      	movs	r6, #2
 800a17e:	e7f2      	b.n	800a166 <_dtoa_r+0x336>
 800a180:	07e1      	lsls	r1, r4, #31
 800a182:	d508      	bpl.n	800a196 <_dtoa_r+0x366>
 800a184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a18c:	f7f6 fa3c 	bl	8000608 <__aeabi_dmul>
 800a190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a194:	3601      	adds	r6, #1
 800a196:	1064      	asrs	r4, r4, #1
 800a198:	3508      	adds	r5, #8
 800a19a:	e7e5      	b.n	800a168 <_dtoa_r+0x338>
 800a19c:	f000 80d2 	beq.w	800a344 <_dtoa_r+0x514>
 800a1a0:	427c      	negs	r4, r7
 800a1a2:	4b92      	ldr	r3, [pc, #584]	@ (800a3ec <_dtoa_r+0x5bc>)
 800a1a4:	4d92      	ldr	r5, [pc, #584]	@ (800a3f0 <_dtoa_r+0x5c0>)
 800a1a6:	f004 020f 	and.w	r2, r4, #15
 800a1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1b6:	f7f6 fa27 	bl	8000608 <__aeabi_dmul>
 800a1ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1be:	1124      	asrs	r4, r4, #4
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2602      	movs	r6, #2
 800a1c4:	2c00      	cmp	r4, #0
 800a1c6:	f040 80b2 	bne.w	800a32e <_dtoa_r+0x4fe>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1d3      	bne.n	800a176 <_dtoa_r+0x346>
 800a1ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80b7 	beq.w	800a348 <_dtoa_r+0x518>
 800a1da:	4b86      	ldr	r3, [pc, #536]	@ (800a3f4 <_dtoa_r+0x5c4>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 fc83 	bl	8000aec <__aeabi_dcmplt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f000 80ae 	beq.w	800a348 <_dtoa_r+0x518>
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 80aa 	beq.w	800a348 <_dtoa_r+0x518>
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	dd37      	ble.n	800a26a <_dtoa_r+0x43a>
 800a1fa:	1e7b      	subs	r3, r7, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	4620      	mov	r0, r4
 800a200:	4b7d      	ldr	r3, [pc, #500]	@ (800a3f8 <_dtoa_r+0x5c8>)
 800a202:	2200      	movs	r2, #0
 800a204:	4629      	mov	r1, r5
 800a206:	f7f6 f9ff 	bl	8000608 <__aeabi_dmul>
 800a20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20e:	9c00      	ldr	r4, [sp, #0]
 800a210:	3601      	adds	r6, #1
 800a212:	4630      	mov	r0, r6
 800a214:	f7f6 f98e 	bl	8000534 <__aeabi_i2d>
 800a218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a21c:	f7f6 f9f4 	bl	8000608 <__aeabi_dmul>
 800a220:	4b76      	ldr	r3, [pc, #472]	@ (800a3fc <_dtoa_r+0x5cc>)
 800a222:	2200      	movs	r2, #0
 800a224:	f7f6 f83a 	bl	800029c <__adddf3>
 800a228:	4605      	mov	r5, r0
 800a22a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a22e:	2c00      	cmp	r4, #0
 800a230:	f040 808d 	bne.w	800a34e <_dtoa_r+0x51e>
 800a234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a238:	4b71      	ldr	r3, [pc, #452]	@ (800a400 <_dtoa_r+0x5d0>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	f7f6 f82c 	bl	8000298 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a248:	462a      	mov	r2, r5
 800a24a:	4633      	mov	r3, r6
 800a24c:	f7f6 fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 800a250:	2800      	cmp	r0, #0
 800a252:	f040 828b 	bne.w	800a76c <_dtoa_r+0x93c>
 800a256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25a:	462a      	mov	r2, r5
 800a25c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a260:	f7f6 fc44 	bl	8000aec <__aeabi_dcmplt>
 800a264:	2800      	cmp	r0, #0
 800a266:	f040 8128 	bne.w	800a4ba <_dtoa_r+0x68a>
 800a26a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a26e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a274:	2b00      	cmp	r3, #0
 800a276:	f2c0 815a 	blt.w	800a52e <_dtoa_r+0x6fe>
 800a27a:	2f0e      	cmp	r7, #14
 800a27c:	f300 8157 	bgt.w	800a52e <_dtoa_r+0x6fe>
 800a280:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ec <_dtoa_r+0x5bc>)
 800a282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a286:	ed93 7b00 	vldr	d7, [r3]
 800a28a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	ed8d 7b00 	vstr	d7, [sp]
 800a292:	da03      	bge.n	800a29c <_dtoa_r+0x46c>
 800a294:	9b07      	ldr	r3, [sp, #28]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f340 8101 	ble.w	800a49e <_dtoa_r+0x66e>
 800a29c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2a0:	4656      	mov	r6, sl
 800a2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fad7 	bl	800085c <__aeabi_ddiv>
 800a2ae:	f7f6 fc5b 	bl	8000b68 <__aeabi_d2iz>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	f7f6 f93e 	bl	8000534 <__aeabi_i2d>
 800a2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2bc:	f7f6 f9a4 	bl	8000608 <__aeabi_dmul>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2cc:	f7f5 ffe4 	bl	8000298 <__aeabi_dsub>
 800a2d0:	f806 4b01 	strb.w	r4, [r6], #1
 800a2d4:	9d07      	ldr	r5, [sp, #28]
 800a2d6:	eba6 040a 	sub.w	r4, r6, sl
 800a2da:	42a5      	cmp	r5, r4
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	f040 8117 	bne.w	800a512 <_dtoa_r+0x6e2>
 800a2e4:	f7f5 ffda 	bl	800029c <__adddf3>
 800a2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	f7f6 fc1a 	bl	8000b28 <__aeabi_dcmpgt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f040 80f9 	bne.w	800a4ec <_dtoa_r+0x6bc>
 800a2fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	f7f6 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a306:	b118      	cbz	r0, 800a310 <_dtoa_r+0x4e0>
 800a308:	f018 0f01 	tst.w	r8, #1
 800a30c:	f040 80ee 	bne.w	800a4ec <_dtoa_r+0x6bc>
 800a310:	4649      	mov	r1, r9
 800a312:	4658      	mov	r0, fp
 800a314:	f000 fc90 	bl	800ac38 <_Bfree>
 800a318:	2300      	movs	r3, #0
 800a31a:	7033      	strb	r3, [r6, #0]
 800a31c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a31e:	3701      	adds	r7, #1
 800a320:	601f      	str	r7, [r3, #0]
 800a322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 831d 	beq.w	800a964 <_dtoa_r+0xb34>
 800a32a:	601e      	str	r6, [r3, #0]
 800a32c:	e31a      	b.n	800a964 <_dtoa_r+0xb34>
 800a32e:	07e2      	lsls	r2, r4, #31
 800a330:	d505      	bpl.n	800a33e <_dtoa_r+0x50e>
 800a332:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a336:	f7f6 f967 	bl	8000608 <__aeabi_dmul>
 800a33a:	3601      	adds	r6, #1
 800a33c:	2301      	movs	r3, #1
 800a33e:	1064      	asrs	r4, r4, #1
 800a340:	3508      	adds	r5, #8
 800a342:	e73f      	b.n	800a1c4 <_dtoa_r+0x394>
 800a344:	2602      	movs	r6, #2
 800a346:	e742      	b.n	800a1ce <_dtoa_r+0x39e>
 800a348:	9c07      	ldr	r4, [sp, #28]
 800a34a:	9704      	str	r7, [sp, #16]
 800a34c:	e761      	b.n	800a212 <_dtoa_r+0x3e2>
 800a34e:	4b27      	ldr	r3, [pc, #156]	@ (800a3ec <_dtoa_r+0x5bc>)
 800a350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a35a:	4454      	add	r4, sl
 800a35c:	2900      	cmp	r1, #0
 800a35e:	d053      	beq.n	800a408 <_dtoa_r+0x5d8>
 800a360:	4928      	ldr	r1, [pc, #160]	@ (800a404 <_dtoa_r+0x5d4>)
 800a362:	2000      	movs	r0, #0
 800a364:	f7f6 fa7a 	bl	800085c <__aeabi_ddiv>
 800a368:	4633      	mov	r3, r6
 800a36a:	462a      	mov	r2, r5
 800a36c:	f7f5 ff94 	bl	8000298 <__aeabi_dsub>
 800a370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a374:	4656      	mov	r6, sl
 800a376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37a:	f7f6 fbf5 	bl	8000b68 <__aeabi_d2iz>
 800a37e:	4605      	mov	r5, r0
 800a380:	f7f6 f8d8 	bl	8000534 <__aeabi_i2d>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38c:	f7f5 ff84 	bl	8000298 <__aeabi_dsub>
 800a390:	3530      	adds	r5, #48	@ 0x30
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a39a:	f806 5b01 	strb.w	r5, [r6], #1
 800a39e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3a2:	f7f6 fba3 	bl	8000aec <__aeabi_dcmplt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d171      	bne.n	800a48e <_dtoa_r+0x65e>
 800a3aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ae:	4911      	ldr	r1, [pc, #68]	@ (800a3f4 <_dtoa_r+0x5c4>)
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	f7f5 ff71 	bl	8000298 <__aeabi_dsub>
 800a3b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3ba:	f7f6 fb97 	bl	8000aec <__aeabi_dcmplt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	f040 8095 	bne.w	800a4ee <_dtoa_r+0x6be>
 800a3c4:	42a6      	cmp	r6, r4
 800a3c6:	f43f af50 	beq.w	800a26a <_dtoa_r+0x43a>
 800a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f8 <_dtoa_r+0x5c8>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f7f6 f919 	bl	8000608 <__aeabi_dmul>
 800a3d6:	4b08      	ldr	r3, [pc, #32]	@ (800a3f8 <_dtoa_r+0x5c8>)
 800a3d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3e2:	f7f6 f911 	bl	8000608 <__aeabi_dmul>
 800a3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ea:	e7c4      	b.n	800a376 <_dtoa_r+0x546>
 800a3ec:	08021d70 	.word	0x08021d70
 800a3f0:	08021d48 	.word	0x08021d48
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	40240000 	.word	0x40240000
 800a3fc:	401c0000 	.word	0x401c0000
 800a400:	40140000 	.word	0x40140000
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	f7f6 f8fc 	bl	8000608 <__aeabi_dmul>
 800a410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a414:	9415      	str	r4, [sp, #84]	@ 0x54
 800a416:	4656      	mov	r6, sl
 800a418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a41c:	f7f6 fba4 	bl	8000b68 <__aeabi_d2iz>
 800a420:	4605      	mov	r5, r0
 800a422:	f7f6 f887 	bl	8000534 <__aeabi_i2d>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42e:	f7f5 ff33 	bl	8000298 <__aeabi_dsub>
 800a432:	3530      	adds	r5, #48	@ 0x30
 800a434:	f806 5b01 	strb.w	r5, [r6], #1
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	42a6      	cmp	r6, r4
 800a43e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	d124      	bne.n	800a492 <_dtoa_r+0x662>
 800a448:	4bac      	ldr	r3, [pc, #688]	@ (800a6fc <_dtoa_r+0x8cc>)
 800a44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a44e:	f7f5 ff25 	bl	800029c <__adddf3>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45a:	f7f6 fb65 	bl	8000b28 <__aeabi_dcmpgt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d145      	bne.n	800a4ee <_dtoa_r+0x6be>
 800a462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a466:	49a5      	ldr	r1, [pc, #660]	@ (800a6fc <_dtoa_r+0x8cc>)
 800a468:	2000      	movs	r0, #0
 800a46a:	f7f5 ff15 	bl	8000298 <__aeabi_dsub>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a476:	f7f6 fb39 	bl	8000aec <__aeabi_dcmplt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	f43f aef5 	beq.w	800a26a <_dtoa_r+0x43a>
 800a480:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a482:	1e73      	subs	r3, r6, #1
 800a484:	9315      	str	r3, [sp, #84]	@ 0x54
 800a486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a48a:	2b30      	cmp	r3, #48	@ 0x30
 800a48c:	d0f8      	beq.n	800a480 <_dtoa_r+0x650>
 800a48e:	9f04      	ldr	r7, [sp, #16]
 800a490:	e73e      	b.n	800a310 <_dtoa_r+0x4e0>
 800a492:	4b9b      	ldr	r3, [pc, #620]	@ (800a700 <_dtoa_r+0x8d0>)
 800a494:	f7f6 f8b8 	bl	8000608 <__aeabi_dmul>
 800a498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a49c:	e7bc      	b.n	800a418 <_dtoa_r+0x5e8>
 800a49e:	d10c      	bne.n	800a4ba <_dtoa_r+0x68a>
 800a4a0:	4b98      	ldr	r3, [pc, #608]	@ (800a704 <_dtoa_r+0x8d4>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4a8:	f7f6 f8ae 	bl	8000608 <__aeabi_dmul>
 800a4ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b0:	f7f6 fb30 	bl	8000b14 <__aeabi_dcmpge>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f000 8157 	beq.w	800a768 <_dtoa_r+0x938>
 800a4ba:	2400      	movs	r4, #0
 800a4bc:	4625      	mov	r5, r4
 800a4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c0:	43db      	mvns	r3, r3
 800a4c2:	9304      	str	r3, [sp, #16]
 800a4c4:	4656      	mov	r6, sl
 800a4c6:	2700      	movs	r7, #0
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4658      	mov	r0, fp
 800a4cc:	f000 fbb4 	bl	800ac38 <_Bfree>
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	d0dc      	beq.n	800a48e <_dtoa_r+0x65e>
 800a4d4:	b12f      	cbz	r7, 800a4e2 <_dtoa_r+0x6b2>
 800a4d6:	42af      	cmp	r7, r5
 800a4d8:	d003      	beq.n	800a4e2 <_dtoa_r+0x6b2>
 800a4da:	4639      	mov	r1, r7
 800a4dc:	4658      	mov	r0, fp
 800a4de:	f000 fbab 	bl	800ac38 <_Bfree>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4658      	mov	r0, fp
 800a4e6:	f000 fba7 	bl	800ac38 <_Bfree>
 800a4ea:	e7d0      	b.n	800a48e <_dtoa_r+0x65e>
 800a4ec:	9704      	str	r7, [sp, #16]
 800a4ee:	4633      	mov	r3, r6
 800a4f0:	461e      	mov	r6, r3
 800a4f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4f6:	2a39      	cmp	r2, #57	@ 0x39
 800a4f8:	d107      	bne.n	800a50a <_dtoa_r+0x6da>
 800a4fa:	459a      	cmp	sl, r3
 800a4fc:	d1f8      	bne.n	800a4f0 <_dtoa_r+0x6c0>
 800a4fe:	9a04      	ldr	r2, [sp, #16]
 800a500:	3201      	adds	r2, #1
 800a502:	9204      	str	r2, [sp, #16]
 800a504:	2230      	movs	r2, #48	@ 0x30
 800a506:	f88a 2000 	strb.w	r2, [sl]
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	3201      	adds	r2, #1
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	e7bd      	b.n	800a48e <_dtoa_r+0x65e>
 800a512:	4b7b      	ldr	r3, [pc, #492]	@ (800a700 <_dtoa_r+0x8d0>)
 800a514:	2200      	movs	r2, #0
 800a516:	f7f6 f877 	bl	8000608 <__aeabi_dmul>
 800a51a:	2200      	movs	r2, #0
 800a51c:	2300      	movs	r3, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	460d      	mov	r5, r1
 800a522:	f7f6 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f aebb 	beq.w	800a2a2 <_dtoa_r+0x472>
 800a52c:	e6f0      	b.n	800a310 <_dtoa_r+0x4e0>
 800a52e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a530:	2a00      	cmp	r2, #0
 800a532:	f000 80db 	beq.w	800a6ec <_dtoa_r+0x8bc>
 800a536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a538:	2a01      	cmp	r2, #1
 800a53a:	f300 80bf 	bgt.w	800a6bc <_dtoa_r+0x88c>
 800a53e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a540:	2a00      	cmp	r2, #0
 800a542:	f000 80b7 	beq.w	800a6b4 <_dtoa_r+0x884>
 800a546:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a54a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a54c:	4646      	mov	r6, r8
 800a54e:	9a08      	ldr	r2, [sp, #32]
 800a550:	2101      	movs	r1, #1
 800a552:	441a      	add	r2, r3
 800a554:	4658      	mov	r0, fp
 800a556:	4498      	add	r8, r3
 800a558:	9208      	str	r2, [sp, #32]
 800a55a:	f000 fc21 	bl	800ada0 <__i2b>
 800a55e:	4605      	mov	r5, r0
 800a560:	b15e      	cbz	r6, 800a57a <_dtoa_r+0x74a>
 800a562:	9b08      	ldr	r3, [sp, #32]
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd08      	ble.n	800a57a <_dtoa_r+0x74a>
 800a568:	42b3      	cmp	r3, r6
 800a56a:	9a08      	ldr	r2, [sp, #32]
 800a56c:	bfa8      	it	ge
 800a56e:	4633      	movge	r3, r6
 800a570:	eba8 0803 	sub.w	r8, r8, r3
 800a574:	1af6      	subs	r6, r6, r3
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	9308      	str	r3, [sp, #32]
 800a57a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a57c:	b1f3      	cbz	r3, 800a5bc <_dtoa_r+0x78c>
 800a57e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 80b7 	beq.w	800a6f4 <_dtoa_r+0x8c4>
 800a586:	b18c      	cbz	r4, 800a5ac <_dtoa_r+0x77c>
 800a588:	4629      	mov	r1, r5
 800a58a:	4622      	mov	r2, r4
 800a58c:	4658      	mov	r0, fp
 800a58e:	f000 fcc7 	bl	800af20 <__pow5mult>
 800a592:	464a      	mov	r2, r9
 800a594:	4601      	mov	r1, r0
 800a596:	4605      	mov	r5, r0
 800a598:	4658      	mov	r0, fp
 800a59a:	f000 fc17 	bl	800adcc <__multiply>
 800a59e:	4649      	mov	r1, r9
 800a5a0:	9004      	str	r0, [sp, #16]
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	f000 fb48 	bl	800ac38 <_Bfree>
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ae:	1b1a      	subs	r2, r3, r4
 800a5b0:	d004      	beq.n	800a5bc <_dtoa_r+0x78c>
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	4658      	mov	r0, fp
 800a5b6:	f000 fcb3 	bl	800af20 <__pow5mult>
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	2101      	movs	r1, #1
 800a5be:	4658      	mov	r0, fp
 800a5c0:	f000 fbee 	bl	800ada0 <__i2b>
 800a5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 81cf 	beq.w	800a96c <_dtoa_r+0xb3c>
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	4658      	mov	r0, fp
 800a5d4:	f000 fca4 	bl	800af20 <__pow5mult>
 800a5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	4604      	mov	r4, r0
 800a5de:	f300 8095 	bgt.w	800a70c <_dtoa_r+0x8dc>
 800a5e2:	9b02      	ldr	r3, [sp, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 8087 	bne.w	800a6f8 <_dtoa_r+0x8c8>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f040 8089 	bne.w	800a708 <_dtoa_r+0x8d8>
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5fc:	0d1b      	lsrs	r3, r3, #20
 800a5fe:	051b      	lsls	r3, r3, #20
 800a600:	b12b      	cbz	r3, 800a60e <_dtoa_r+0x7de>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	3301      	adds	r3, #1
 800a606:	9308      	str	r3, [sp, #32]
 800a608:	f108 0801 	add.w	r8, r8, #1
 800a60c:	2301      	movs	r3, #1
 800a60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 81b0 	beq.w	800a978 <_dtoa_r+0xb48>
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a61e:	6918      	ldr	r0, [r3, #16]
 800a620:	f000 fb72 	bl	800ad08 <__hi0bits>
 800a624:	f1c0 0020 	rsb	r0, r0, #32
 800a628:	9b08      	ldr	r3, [sp, #32]
 800a62a:	4418      	add	r0, r3
 800a62c:	f010 001f 	ands.w	r0, r0, #31
 800a630:	d077      	beq.n	800a722 <_dtoa_r+0x8f2>
 800a632:	f1c0 0320 	rsb	r3, r0, #32
 800a636:	2b04      	cmp	r3, #4
 800a638:	dd6b      	ble.n	800a712 <_dtoa_r+0x8e2>
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	f1c0 001c 	rsb	r0, r0, #28
 800a640:	4403      	add	r3, r0
 800a642:	4480      	add	r8, r0
 800a644:	4406      	add	r6, r0
 800a646:	9308      	str	r3, [sp, #32]
 800a648:	f1b8 0f00 	cmp.w	r8, #0
 800a64c:	dd05      	ble.n	800a65a <_dtoa_r+0x82a>
 800a64e:	4649      	mov	r1, r9
 800a650:	4642      	mov	r2, r8
 800a652:	4658      	mov	r0, fp
 800a654:	f000 fcbe 	bl	800afd4 <__lshift>
 800a658:	4681      	mov	r9, r0
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd05      	ble.n	800a66c <_dtoa_r+0x83c>
 800a660:	4621      	mov	r1, r4
 800a662:	461a      	mov	r2, r3
 800a664:	4658      	mov	r0, fp
 800a666:	f000 fcb5 	bl	800afd4 <__lshift>
 800a66a:	4604      	mov	r4, r0
 800a66c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d059      	beq.n	800a726 <_dtoa_r+0x8f6>
 800a672:	4621      	mov	r1, r4
 800a674:	4648      	mov	r0, r9
 800a676:	f000 fd19 	bl	800b0ac <__mcmp>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	da53      	bge.n	800a726 <_dtoa_r+0x8f6>
 800a67e:	1e7b      	subs	r3, r7, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	4649      	mov	r1, r9
 800a684:	2300      	movs	r3, #0
 800a686:	220a      	movs	r2, #10
 800a688:	4658      	mov	r0, fp
 800a68a:	f000 faf7 	bl	800ac7c <__multadd>
 800a68e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a690:	4681      	mov	r9, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 8172 	beq.w	800a97c <_dtoa_r+0xb4c>
 800a698:	2300      	movs	r3, #0
 800a69a:	4629      	mov	r1, r5
 800a69c:	220a      	movs	r2, #10
 800a69e:	4658      	mov	r0, fp
 800a6a0:	f000 faec 	bl	800ac7c <__multadd>
 800a6a4:	9b00      	ldr	r3, [sp, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	dc67      	bgt.n	800a77c <_dtoa_r+0x94c>
 800a6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	dc41      	bgt.n	800a736 <_dtoa_r+0x906>
 800a6b2:	e063      	b.n	800a77c <_dtoa_r+0x94c>
 800a6b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6ba:	e746      	b.n	800a54a <_dtoa_r+0x71a>
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	1e5c      	subs	r4, r3, #1
 800a6c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	bfbf      	itttt	lt
 800a6c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6cc:	1ae3      	sublt	r3, r4, r3
 800a6ce:	bfb4      	ite	lt
 800a6d0:	18d2      	addlt	r2, r2, r3
 800a6d2:	1b1c      	subge	r4, r3, r4
 800a6d4:	9b07      	ldr	r3, [sp, #28]
 800a6d6:	bfbc      	itt	lt
 800a6d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a6da:	2400      	movlt	r4, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfb5      	itete	lt
 800a6e0:	eba8 0603 	sublt.w	r6, r8, r3
 800a6e4:	9b07      	ldrge	r3, [sp, #28]
 800a6e6:	2300      	movlt	r3, #0
 800a6e8:	4646      	movge	r6, r8
 800a6ea:	e730      	b.n	800a54e <_dtoa_r+0x71e>
 800a6ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6f0:	4646      	mov	r6, r8
 800a6f2:	e735      	b.n	800a560 <_dtoa_r+0x730>
 800a6f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6f6:	e75c      	b.n	800a5b2 <_dtoa_r+0x782>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e788      	b.n	800a60e <_dtoa_r+0x7de>
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	40240000 	.word	0x40240000
 800a704:	40140000 	.word	0x40140000
 800a708:	9b02      	ldr	r3, [sp, #8]
 800a70a:	e780      	b.n	800a60e <_dtoa_r+0x7de>
 800a70c:	2300      	movs	r3, #0
 800a70e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a710:	e782      	b.n	800a618 <_dtoa_r+0x7e8>
 800a712:	d099      	beq.n	800a648 <_dtoa_r+0x818>
 800a714:	9a08      	ldr	r2, [sp, #32]
 800a716:	331c      	adds	r3, #28
 800a718:	441a      	add	r2, r3
 800a71a:	4498      	add	r8, r3
 800a71c:	441e      	add	r6, r3
 800a71e:	9208      	str	r2, [sp, #32]
 800a720:	e792      	b.n	800a648 <_dtoa_r+0x818>
 800a722:	4603      	mov	r3, r0
 800a724:	e7f6      	b.n	800a714 <_dtoa_r+0x8e4>
 800a726:	9b07      	ldr	r3, [sp, #28]
 800a728:	9704      	str	r7, [sp, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dc20      	bgt.n	800a770 <_dtoa_r+0x940>
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a732:	2b02      	cmp	r3, #2
 800a734:	dd1e      	ble.n	800a774 <_dtoa_r+0x944>
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f47f aec0 	bne.w	800a4be <_dtoa_r+0x68e>
 800a73e:	4621      	mov	r1, r4
 800a740:	2205      	movs	r2, #5
 800a742:	4658      	mov	r0, fp
 800a744:	f000 fa9a 	bl	800ac7c <__multadd>
 800a748:	4601      	mov	r1, r0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4648      	mov	r0, r9
 800a74e:	f000 fcad 	bl	800b0ac <__mcmp>
 800a752:	2800      	cmp	r0, #0
 800a754:	f77f aeb3 	ble.w	800a4be <_dtoa_r+0x68e>
 800a758:	4656      	mov	r6, sl
 800a75a:	2331      	movs	r3, #49	@ 0x31
 800a75c:	f806 3b01 	strb.w	r3, [r6], #1
 800a760:	9b04      	ldr	r3, [sp, #16]
 800a762:	3301      	adds	r3, #1
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	e6ae      	b.n	800a4c6 <_dtoa_r+0x696>
 800a768:	9c07      	ldr	r4, [sp, #28]
 800a76a:	9704      	str	r7, [sp, #16]
 800a76c:	4625      	mov	r5, r4
 800a76e:	e7f3      	b.n	800a758 <_dtoa_r+0x928>
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 8104 	beq.w	800a984 <_dtoa_r+0xb54>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	dd05      	ble.n	800a78c <_dtoa_r+0x95c>
 800a780:	4629      	mov	r1, r5
 800a782:	4632      	mov	r2, r6
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fc25 	bl	800afd4 <__lshift>
 800a78a:	4605      	mov	r5, r0
 800a78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d05a      	beq.n	800a848 <_dtoa_r+0xa18>
 800a792:	6869      	ldr	r1, [r5, #4]
 800a794:	4658      	mov	r0, fp
 800a796:	f000 fa0f 	bl	800abb8 <_Balloc>
 800a79a:	4606      	mov	r6, r0
 800a79c:	b928      	cbnz	r0, 800a7aa <_dtoa_r+0x97a>
 800a79e:	4b84      	ldr	r3, [pc, #528]	@ (800a9b0 <_dtoa_r+0xb80>)
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7a6:	f7ff bb5a 	b.w	8009e5e <_dtoa_r+0x2e>
 800a7aa:	692a      	ldr	r2, [r5, #16]
 800a7ac:	3202      	adds	r2, #2
 800a7ae:	0092      	lsls	r2, r2, #2
 800a7b0:	f105 010c 	add.w	r1, r5, #12
 800a7b4:	300c      	adds	r0, #12
 800a7b6:	f7ff faa4 	bl	8009d02 <memcpy>
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f000 fc08 	bl	800afd4 <__lshift>
 800a7c4:	f10a 0301 	add.w	r3, sl, #1
 800a7c8:	9307      	str	r3, [sp, #28]
 800a7ca:	9b00      	ldr	r3, [sp, #0]
 800a7cc:	4453      	add	r3, sl
 800a7ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	462f      	mov	r7, r5
 800a7d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7da:	4605      	mov	r5, r0
 800a7dc:	9b07      	ldr	r3, [sp, #28]
 800a7de:	4621      	mov	r1, r4
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	f7ff fa9a 	bl	8009d1e <quorem>
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	9002      	str	r0, [sp, #8]
 800a7ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7f2:	4648      	mov	r0, r9
 800a7f4:	f000 fc5a 	bl	800b0ac <__mcmp>
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	9008      	str	r0, [sp, #32]
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4658      	mov	r0, fp
 800a800:	f000 fc70 	bl	800b0e4 <__mdiff>
 800a804:	68c2      	ldr	r2, [r0, #12]
 800a806:	4606      	mov	r6, r0
 800a808:	bb02      	cbnz	r2, 800a84c <_dtoa_r+0xa1c>
 800a80a:	4601      	mov	r1, r0
 800a80c:	4648      	mov	r0, r9
 800a80e:	f000 fc4d 	bl	800b0ac <__mcmp>
 800a812:	4602      	mov	r2, r0
 800a814:	4631      	mov	r1, r6
 800a816:	4658      	mov	r0, fp
 800a818:	920e      	str	r2, [sp, #56]	@ 0x38
 800a81a:	f000 fa0d 	bl	800ac38 <_Bfree>
 800a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a822:	9e07      	ldr	r6, [sp, #28]
 800a824:	ea43 0102 	orr.w	r1, r3, r2
 800a828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a82a:	4319      	orrs	r1, r3
 800a82c:	d110      	bne.n	800a850 <_dtoa_r+0xa20>
 800a82e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a832:	d029      	beq.n	800a888 <_dtoa_r+0xa58>
 800a834:	9b08      	ldr	r3, [sp, #32]
 800a836:	2b00      	cmp	r3, #0
 800a838:	dd02      	ble.n	800a840 <_dtoa_r+0xa10>
 800a83a:	9b02      	ldr	r3, [sp, #8]
 800a83c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a840:	9b00      	ldr	r3, [sp, #0]
 800a842:	f883 8000 	strb.w	r8, [r3]
 800a846:	e63f      	b.n	800a4c8 <_dtoa_r+0x698>
 800a848:	4628      	mov	r0, r5
 800a84a:	e7bb      	b.n	800a7c4 <_dtoa_r+0x994>
 800a84c:	2201      	movs	r2, #1
 800a84e:	e7e1      	b.n	800a814 <_dtoa_r+0x9e4>
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	2b00      	cmp	r3, #0
 800a854:	db04      	blt.n	800a860 <_dtoa_r+0xa30>
 800a856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a858:	430b      	orrs	r3, r1
 800a85a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a85c:	430b      	orrs	r3, r1
 800a85e:	d120      	bne.n	800a8a2 <_dtoa_r+0xa72>
 800a860:	2a00      	cmp	r2, #0
 800a862:	dded      	ble.n	800a840 <_dtoa_r+0xa10>
 800a864:	4649      	mov	r1, r9
 800a866:	2201      	movs	r2, #1
 800a868:	4658      	mov	r0, fp
 800a86a:	f000 fbb3 	bl	800afd4 <__lshift>
 800a86e:	4621      	mov	r1, r4
 800a870:	4681      	mov	r9, r0
 800a872:	f000 fc1b 	bl	800b0ac <__mcmp>
 800a876:	2800      	cmp	r0, #0
 800a878:	dc03      	bgt.n	800a882 <_dtoa_r+0xa52>
 800a87a:	d1e1      	bne.n	800a840 <_dtoa_r+0xa10>
 800a87c:	f018 0f01 	tst.w	r8, #1
 800a880:	d0de      	beq.n	800a840 <_dtoa_r+0xa10>
 800a882:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a886:	d1d8      	bne.n	800a83a <_dtoa_r+0xa0a>
 800a888:	9a00      	ldr	r2, [sp, #0]
 800a88a:	2339      	movs	r3, #57	@ 0x39
 800a88c:	7013      	strb	r3, [r2, #0]
 800a88e:	4633      	mov	r3, r6
 800a890:	461e      	mov	r6, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a898:	2a39      	cmp	r2, #57	@ 0x39
 800a89a:	d052      	beq.n	800a942 <_dtoa_r+0xb12>
 800a89c:	3201      	adds	r2, #1
 800a89e:	701a      	strb	r2, [r3, #0]
 800a8a0:	e612      	b.n	800a4c8 <_dtoa_r+0x698>
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	dd07      	ble.n	800a8b6 <_dtoa_r+0xa86>
 800a8a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8aa:	d0ed      	beq.n	800a888 <_dtoa_r+0xa58>
 800a8ac:	9a00      	ldr	r2, [sp, #0]
 800a8ae:	f108 0301 	add.w	r3, r8, #1
 800a8b2:	7013      	strb	r3, [r2, #0]
 800a8b4:	e608      	b.n	800a4c8 <_dtoa_r+0x698>
 800a8b6:	9b07      	ldr	r3, [sp, #28]
 800a8b8:	9a07      	ldr	r2, [sp, #28]
 800a8ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d028      	beq.n	800a916 <_dtoa_r+0xae6>
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	220a      	movs	r2, #10
 800a8ca:	4658      	mov	r0, fp
 800a8cc:	f000 f9d6 	bl	800ac7c <__multadd>
 800a8d0:	42af      	cmp	r7, r5
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	f04f 020a 	mov.w	r2, #10
 800a8dc:	4639      	mov	r1, r7
 800a8de:	4658      	mov	r0, fp
 800a8e0:	d107      	bne.n	800a8f2 <_dtoa_r+0xac2>
 800a8e2:	f000 f9cb 	bl	800ac7c <__multadd>
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	9b07      	ldr	r3, [sp, #28]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	e774      	b.n	800a7dc <_dtoa_r+0x9ac>
 800a8f2:	f000 f9c3 	bl	800ac7c <__multadd>
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	220a      	movs	r2, #10
 800a8fe:	4658      	mov	r0, fp
 800a900:	f000 f9bc 	bl	800ac7c <__multadd>
 800a904:	4605      	mov	r5, r0
 800a906:	e7f0      	b.n	800a8ea <_dtoa_r+0xaba>
 800a908:	9b00      	ldr	r3, [sp, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bfcc      	ite	gt
 800a90e:	461e      	movgt	r6, r3
 800a910:	2601      	movle	r6, #1
 800a912:	4456      	add	r6, sl
 800a914:	2700      	movs	r7, #0
 800a916:	4649      	mov	r1, r9
 800a918:	2201      	movs	r2, #1
 800a91a:	4658      	mov	r0, fp
 800a91c:	f000 fb5a 	bl	800afd4 <__lshift>
 800a920:	4621      	mov	r1, r4
 800a922:	4681      	mov	r9, r0
 800a924:	f000 fbc2 	bl	800b0ac <__mcmp>
 800a928:	2800      	cmp	r0, #0
 800a92a:	dcb0      	bgt.n	800a88e <_dtoa_r+0xa5e>
 800a92c:	d102      	bne.n	800a934 <_dtoa_r+0xb04>
 800a92e:	f018 0f01 	tst.w	r8, #1
 800a932:	d1ac      	bne.n	800a88e <_dtoa_r+0xa5e>
 800a934:	4633      	mov	r3, r6
 800a936:	461e      	mov	r6, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a30      	cmp	r2, #48	@ 0x30
 800a93e:	d0fa      	beq.n	800a936 <_dtoa_r+0xb06>
 800a940:	e5c2      	b.n	800a4c8 <_dtoa_r+0x698>
 800a942:	459a      	cmp	sl, r3
 800a944:	d1a4      	bne.n	800a890 <_dtoa_r+0xa60>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	3301      	adds	r3, #1
 800a94a:	9304      	str	r3, [sp, #16]
 800a94c:	2331      	movs	r3, #49	@ 0x31
 800a94e:	f88a 3000 	strb.w	r3, [sl]
 800a952:	e5b9      	b.n	800a4c8 <_dtoa_r+0x698>
 800a954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a956:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9b4 <_dtoa_r+0xb84>
 800a95a:	b11b      	cbz	r3, 800a964 <_dtoa_r+0xb34>
 800a95c:	f10a 0308 	add.w	r3, sl, #8
 800a960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	4650      	mov	r0, sl
 800a966:	b019      	add	sp, #100	@ 0x64
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96e:	2b01      	cmp	r3, #1
 800a970:	f77f ae37 	ble.w	800a5e2 <_dtoa_r+0x7b2>
 800a974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a976:	930a      	str	r3, [sp, #40]	@ 0x28
 800a978:	2001      	movs	r0, #1
 800a97a:	e655      	b.n	800a628 <_dtoa_r+0x7f8>
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f77f aed6 	ble.w	800a730 <_dtoa_r+0x900>
 800a984:	4656      	mov	r6, sl
 800a986:	4621      	mov	r1, r4
 800a988:	4648      	mov	r0, r9
 800a98a:	f7ff f9c8 	bl	8009d1e <quorem>
 800a98e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a992:	f806 8b01 	strb.w	r8, [r6], #1
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	eba6 020a 	sub.w	r2, r6, sl
 800a99c:	4293      	cmp	r3, r2
 800a99e:	ddb3      	ble.n	800a908 <_dtoa_r+0xad8>
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	4658      	mov	r0, fp
 800a9a8:	f000 f968 	bl	800ac7c <__multadd>
 800a9ac:	4681      	mov	r9, r0
 800a9ae:	e7ea      	b.n	800a986 <_dtoa_r+0xb56>
 800a9b0:	08021ccc 	.word	0x08021ccc
 800a9b4:	08021c50 	.word	0x08021c50

0800a9b8 <_free_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d041      	beq.n	800aa44 <_free_r+0x8c>
 800a9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c4:	1f0c      	subs	r4, r1, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	bfb8      	it	lt
 800a9ca:	18e4      	addlt	r4, r4, r3
 800a9cc:	f000 f8e8 	bl	800aba0 <__malloc_lock>
 800a9d0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa48 <_free_r+0x90>)
 800a9d2:	6813      	ldr	r3, [r2, #0]
 800a9d4:	b933      	cbnz	r3, 800a9e4 <_free_r+0x2c>
 800a9d6:	6063      	str	r3, [r4, #4]
 800a9d8:	6014      	str	r4, [r2, #0]
 800a9da:	4628      	mov	r0, r5
 800a9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9e0:	f000 b8e4 	b.w	800abac <__malloc_unlock>
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	d908      	bls.n	800a9fa <_free_r+0x42>
 800a9e8:	6820      	ldr	r0, [r4, #0]
 800a9ea:	1821      	adds	r1, r4, r0
 800a9ec:	428b      	cmp	r3, r1
 800a9ee:	bf01      	itttt	eq
 800a9f0:	6819      	ldreq	r1, [r3, #0]
 800a9f2:	685b      	ldreq	r3, [r3, #4]
 800a9f4:	1809      	addeq	r1, r1, r0
 800a9f6:	6021      	streq	r1, [r4, #0]
 800a9f8:	e7ed      	b.n	800a9d6 <_free_r+0x1e>
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	b10b      	cbz	r3, 800aa04 <_free_r+0x4c>
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	d9fa      	bls.n	800a9fa <_free_r+0x42>
 800aa04:	6811      	ldr	r1, [r2, #0]
 800aa06:	1850      	adds	r0, r2, r1
 800aa08:	42a0      	cmp	r0, r4
 800aa0a:	d10b      	bne.n	800aa24 <_free_r+0x6c>
 800aa0c:	6820      	ldr	r0, [r4, #0]
 800aa0e:	4401      	add	r1, r0
 800aa10:	1850      	adds	r0, r2, r1
 800aa12:	4283      	cmp	r3, r0
 800aa14:	6011      	str	r1, [r2, #0]
 800aa16:	d1e0      	bne.n	800a9da <_free_r+0x22>
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	6053      	str	r3, [r2, #4]
 800aa1e:	4408      	add	r0, r1
 800aa20:	6010      	str	r0, [r2, #0]
 800aa22:	e7da      	b.n	800a9da <_free_r+0x22>
 800aa24:	d902      	bls.n	800aa2c <_free_r+0x74>
 800aa26:	230c      	movs	r3, #12
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	e7d6      	b.n	800a9da <_free_r+0x22>
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	1821      	adds	r1, r4, r0
 800aa30:	428b      	cmp	r3, r1
 800aa32:	bf04      	itt	eq
 800aa34:	6819      	ldreq	r1, [r3, #0]
 800aa36:	685b      	ldreq	r3, [r3, #4]
 800aa38:	6063      	str	r3, [r4, #4]
 800aa3a:	bf04      	itt	eq
 800aa3c:	1809      	addeq	r1, r1, r0
 800aa3e:	6021      	streq	r1, [r4, #0]
 800aa40:	6054      	str	r4, [r2, #4]
 800aa42:	e7ca      	b.n	800a9da <_free_r+0x22>
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	bf00      	nop
 800aa48:	20001e04 	.word	0x20001e04

0800aa4c <malloc>:
 800aa4c:	4b02      	ldr	r3, [pc, #8]	@ (800aa58 <malloc+0xc>)
 800aa4e:	4601      	mov	r1, r0
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	f000 b825 	b.w	800aaa0 <_malloc_r>
 800aa56:	bf00      	nop
 800aa58:	20000054 	.word	0x20000054

0800aa5c <sbrk_aligned>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa9c <sbrk_aligned+0x40>)
 800aa60:	460c      	mov	r4, r1
 800aa62:	6831      	ldr	r1, [r6, #0]
 800aa64:	4605      	mov	r5, r0
 800aa66:	b911      	cbnz	r1, 800aa6e <sbrk_aligned+0x12>
 800aa68:	f001 f840 	bl	800baec <_sbrk_r>
 800aa6c:	6030      	str	r0, [r6, #0]
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f001 f83b 	bl	800baec <_sbrk_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d103      	bne.n	800aa82 <sbrk_aligned+0x26>
 800aa7a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa7e:	4620      	mov	r0, r4
 800aa80:	bd70      	pop	{r4, r5, r6, pc}
 800aa82:	1cc4      	adds	r4, r0, #3
 800aa84:	f024 0403 	bic.w	r4, r4, #3
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d0f8      	beq.n	800aa7e <sbrk_aligned+0x22>
 800aa8c:	1a21      	subs	r1, r4, r0
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f001 f82c 	bl	800baec <_sbrk_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	d1f2      	bne.n	800aa7e <sbrk_aligned+0x22>
 800aa98:	e7ef      	b.n	800aa7a <sbrk_aligned+0x1e>
 800aa9a:	bf00      	nop
 800aa9c:	20001e00 	.word	0x20001e00

0800aaa0 <_malloc_r>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	1ccd      	adds	r5, r1, #3
 800aaa6:	f025 0503 	bic.w	r5, r5, #3
 800aaaa:	3508      	adds	r5, #8
 800aaac:	2d0c      	cmp	r5, #12
 800aaae:	bf38      	it	cc
 800aab0:	250c      	movcc	r5, #12
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	4606      	mov	r6, r0
 800aab6:	db01      	blt.n	800aabc <_malloc_r+0x1c>
 800aab8:	42a9      	cmp	r1, r5
 800aaba:	d904      	bls.n	800aac6 <_malloc_r+0x26>
 800aabc:	230c      	movs	r3, #12
 800aabe:	6033      	str	r3, [r6, #0]
 800aac0:	2000      	movs	r0, #0
 800aac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab9c <_malloc_r+0xfc>
 800aaca:	f000 f869 	bl	800aba0 <__malloc_lock>
 800aace:	f8d8 3000 	ldr.w	r3, [r8]
 800aad2:	461c      	mov	r4, r3
 800aad4:	bb44      	cbnz	r4, 800ab28 <_malloc_r+0x88>
 800aad6:	4629      	mov	r1, r5
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff ffbf 	bl	800aa5c <sbrk_aligned>
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	4604      	mov	r4, r0
 800aae2:	d158      	bne.n	800ab96 <_malloc_r+0xf6>
 800aae4:	f8d8 4000 	ldr.w	r4, [r8]
 800aae8:	4627      	mov	r7, r4
 800aaea:	2f00      	cmp	r7, #0
 800aaec:	d143      	bne.n	800ab76 <_malloc_r+0xd6>
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	d04b      	beq.n	800ab8a <_malloc_r+0xea>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	eb04 0903 	add.w	r9, r4, r3
 800aafc:	f000 fff6 	bl	800baec <_sbrk_r>
 800ab00:	4581      	cmp	r9, r0
 800ab02:	d142      	bne.n	800ab8a <_malloc_r+0xea>
 800ab04:	6821      	ldr	r1, [r4, #0]
 800ab06:	1a6d      	subs	r5, r5, r1
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7ff ffa6 	bl	800aa5c <sbrk_aligned>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d03a      	beq.n	800ab8a <_malloc_r+0xea>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	442b      	add	r3, r5
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	bb62      	cbnz	r2, 800ab7c <_malloc_r+0xdc>
 800ab22:	f8c8 7000 	str.w	r7, [r8]
 800ab26:	e00f      	b.n	800ab48 <_malloc_r+0xa8>
 800ab28:	6822      	ldr	r2, [r4, #0]
 800ab2a:	1b52      	subs	r2, r2, r5
 800ab2c:	d420      	bmi.n	800ab70 <_malloc_r+0xd0>
 800ab2e:	2a0b      	cmp	r2, #11
 800ab30:	d917      	bls.n	800ab62 <_malloc_r+0xc2>
 800ab32:	1961      	adds	r1, r4, r5
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	6025      	str	r5, [r4, #0]
 800ab38:	bf18      	it	ne
 800ab3a:	6059      	strne	r1, [r3, #4]
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	bf08      	it	eq
 800ab40:	f8c8 1000 	streq.w	r1, [r8]
 800ab44:	5162      	str	r2, [r4, r5]
 800ab46:	604b      	str	r3, [r1, #4]
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f000 f82f 	bl	800abac <__malloc_unlock>
 800ab4e:	f104 000b 	add.w	r0, r4, #11
 800ab52:	1d23      	adds	r3, r4, #4
 800ab54:	f020 0007 	bic.w	r0, r0, #7
 800ab58:	1ac2      	subs	r2, r0, r3
 800ab5a:	bf1c      	itt	ne
 800ab5c:	1a1b      	subne	r3, r3, r0
 800ab5e:	50a3      	strne	r3, [r4, r2]
 800ab60:	e7af      	b.n	800aac2 <_malloc_r+0x22>
 800ab62:	6862      	ldr	r2, [r4, #4]
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	bf0c      	ite	eq
 800ab68:	f8c8 2000 	streq.w	r2, [r8]
 800ab6c:	605a      	strne	r2, [r3, #4]
 800ab6e:	e7eb      	b.n	800ab48 <_malloc_r+0xa8>
 800ab70:	4623      	mov	r3, r4
 800ab72:	6864      	ldr	r4, [r4, #4]
 800ab74:	e7ae      	b.n	800aad4 <_malloc_r+0x34>
 800ab76:	463c      	mov	r4, r7
 800ab78:	687f      	ldr	r7, [r7, #4]
 800ab7a:	e7b6      	b.n	800aaea <_malloc_r+0x4a>
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	d1fb      	bne.n	800ab7c <_malloc_r+0xdc>
 800ab84:	2300      	movs	r3, #0
 800ab86:	6053      	str	r3, [r2, #4]
 800ab88:	e7de      	b.n	800ab48 <_malloc_r+0xa8>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 f80c 	bl	800abac <__malloc_unlock>
 800ab94:	e794      	b.n	800aac0 <_malloc_r+0x20>
 800ab96:	6005      	str	r5, [r0, #0]
 800ab98:	e7d6      	b.n	800ab48 <_malloc_r+0xa8>
 800ab9a:	bf00      	nop
 800ab9c:	20001e04 	.word	0x20001e04

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff b8ac 	b.w	8009cfe <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	20001dfc 	.word	0x20001dfc

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff b8a7 	b.w	8009d00 <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	20001dfc 	.word	0x20001dfc

0800abb8 <_Balloc>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	69c6      	ldr	r6, [r0, #28]
 800abbc:	4604      	mov	r4, r0
 800abbe:	460d      	mov	r5, r1
 800abc0:	b976      	cbnz	r6, 800abe0 <_Balloc+0x28>
 800abc2:	2010      	movs	r0, #16
 800abc4:	f7ff ff42 	bl	800aa4c <malloc>
 800abc8:	4602      	mov	r2, r0
 800abca:	61e0      	str	r0, [r4, #28]
 800abcc:	b920      	cbnz	r0, 800abd8 <_Balloc+0x20>
 800abce:	4b18      	ldr	r3, [pc, #96]	@ (800ac30 <_Balloc+0x78>)
 800abd0:	4818      	ldr	r0, [pc, #96]	@ (800ac34 <_Balloc+0x7c>)
 800abd2:	216b      	movs	r1, #107	@ 0x6b
 800abd4:	f000 ff9a 	bl	800bb0c <__assert_func>
 800abd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abdc:	6006      	str	r6, [r0, #0]
 800abde:	60c6      	str	r6, [r0, #12]
 800abe0:	69e6      	ldr	r6, [r4, #28]
 800abe2:	68f3      	ldr	r3, [r6, #12]
 800abe4:	b183      	cbz	r3, 800ac08 <_Balloc+0x50>
 800abe6:	69e3      	ldr	r3, [r4, #28]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abee:	b9b8      	cbnz	r0, 800ac20 <_Balloc+0x68>
 800abf0:	2101      	movs	r1, #1
 800abf2:	fa01 f605 	lsl.w	r6, r1, r5
 800abf6:	1d72      	adds	r2, r6, #5
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 ffa4 	bl	800bb48 <_calloc_r>
 800ac00:	b160      	cbz	r0, 800ac1c <_Balloc+0x64>
 800ac02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac06:	e00e      	b.n	800ac26 <_Balloc+0x6e>
 800ac08:	2221      	movs	r2, #33	@ 0x21
 800ac0a:	2104      	movs	r1, #4
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 ff9b 	bl	800bb48 <_calloc_r>
 800ac12:	69e3      	ldr	r3, [r4, #28]
 800ac14:	60f0      	str	r0, [r6, #12]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e4      	bne.n	800abe6 <_Balloc+0x2e>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	6802      	ldr	r2, [r0, #0]
 800ac22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac26:	2300      	movs	r3, #0
 800ac28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac2c:	e7f7      	b.n	800ac1e <_Balloc+0x66>
 800ac2e:	bf00      	nop
 800ac30:	08021c5d 	.word	0x08021c5d
 800ac34:	08021cdd 	.word	0x08021cdd

0800ac38 <_Bfree>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	69c6      	ldr	r6, [r0, #28]
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	b976      	cbnz	r6, 800ac60 <_Bfree+0x28>
 800ac42:	2010      	movs	r0, #16
 800ac44:	f7ff ff02 	bl	800aa4c <malloc>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	61e8      	str	r0, [r5, #28]
 800ac4c:	b920      	cbnz	r0, 800ac58 <_Bfree+0x20>
 800ac4e:	4b09      	ldr	r3, [pc, #36]	@ (800ac74 <_Bfree+0x3c>)
 800ac50:	4809      	ldr	r0, [pc, #36]	@ (800ac78 <_Bfree+0x40>)
 800ac52:	218f      	movs	r1, #143	@ 0x8f
 800ac54:	f000 ff5a 	bl	800bb0c <__assert_func>
 800ac58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac5c:	6006      	str	r6, [r0, #0]
 800ac5e:	60c6      	str	r6, [r0, #12]
 800ac60:	b13c      	cbz	r4, 800ac72 <_Bfree+0x3a>
 800ac62:	69eb      	ldr	r3, [r5, #28]
 800ac64:	6862      	ldr	r2, [r4, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac6c:	6021      	str	r1, [r4, #0]
 800ac6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	08021c5d 	.word	0x08021c5d
 800ac78:	08021cdd 	.word	0x08021cdd

0800ac7c <__multadd>:
 800ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac80:	690d      	ldr	r5, [r1, #16]
 800ac82:	4607      	mov	r7, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	461e      	mov	r6, r3
 800ac88:	f101 0c14 	add.w	ip, r1, #20
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac92:	b299      	uxth	r1, r3
 800ac94:	fb02 6101 	mla	r1, r2, r1, r6
 800ac98:	0c1e      	lsrs	r6, r3, #16
 800ac9a:	0c0b      	lsrs	r3, r1, #16
 800ac9c:	fb02 3306 	mla	r3, r2, r6, r3
 800aca0:	b289      	uxth	r1, r1
 800aca2:	3001      	adds	r0, #1
 800aca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aca8:	4285      	cmp	r5, r0
 800acaa:	f84c 1b04 	str.w	r1, [ip], #4
 800acae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acb2:	dcec      	bgt.n	800ac8e <__multadd+0x12>
 800acb4:	b30e      	cbz	r6, 800acfa <__multadd+0x7e>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc19      	bgt.n	800acf0 <__multadd+0x74>
 800acbc:	6861      	ldr	r1, [r4, #4]
 800acbe:	4638      	mov	r0, r7
 800acc0:	3101      	adds	r1, #1
 800acc2:	f7ff ff79 	bl	800abb8 <_Balloc>
 800acc6:	4680      	mov	r8, r0
 800acc8:	b928      	cbnz	r0, 800acd6 <__multadd+0x5a>
 800acca:	4602      	mov	r2, r0
 800accc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad00 <__multadd+0x84>)
 800acce:	480d      	ldr	r0, [pc, #52]	@ (800ad04 <__multadd+0x88>)
 800acd0:	21ba      	movs	r1, #186	@ 0xba
 800acd2:	f000 ff1b 	bl	800bb0c <__assert_func>
 800acd6:	6922      	ldr	r2, [r4, #16]
 800acd8:	3202      	adds	r2, #2
 800acda:	f104 010c 	add.w	r1, r4, #12
 800acde:	0092      	lsls	r2, r2, #2
 800ace0:	300c      	adds	r0, #12
 800ace2:	f7ff f80e 	bl	8009d02 <memcpy>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4638      	mov	r0, r7
 800acea:	f7ff ffa5 	bl	800ac38 <_Bfree>
 800acee:	4644      	mov	r4, r8
 800acf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acf4:	3501      	adds	r5, #1
 800acf6:	615e      	str	r6, [r3, #20]
 800acf8:	6125      	str	r5, [r4, #16]
 800acfa:	4620      	mov	r0, r4
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	08021ccc 	.word	0x08021ccc
 800ad04:	08021cdd 	.word	0x08021cdd

0800ad08 <__hi0bits>:
 800ad08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	bf36      	itet	cc
 800ad10:	0403      	lslcc	r3, r0, #16
 800ad12:	2000      	movcs	r0, #0
 800ad14:	2010      	movcc	r0, #16
 800ad16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad1a:	bf3c      	itt	cc
 800ad1c:	021b      	lslcc	r3, r3, #8
 800ad1e:	3008      	addcc	r0, #8
 800ad20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad24:	bf3c      	itt	cc
 800ad26:	011b      	lslcc	r3, r3, #4
 800ad28:	3004      	addcc	r0, #4
 800ad2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad2e:	bf3c      	itt	cc
 800ad30:	009b      	lslcc	r3, r3, #2
 800ad32:	3002      	addcc	r0, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	db05      	blt.n	800ad44 <__hi0bits+0x3c>
 800ad38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad3c:	f100 0001 	add.w	r0, r0, #1
 800ad40:	bf08      	it	eq
 800ad42:	2020      	moveq	r0, #32
 800ad44:	4770      	bx	lr

0800ad46 <__lo0bits>:
 800ad46:	6803      	ldr	r3, [r0, #0]
 800ad48:	4602      	mov	r2, r0
 800ad4a:	f013 0007 	ands.w	r0, r3, #7
 800ad4e:	d00b      	beq.n	800ad68 <__lo0bits+0x22>
 800ad50:	07d9      	lsls	r1, r3, #31
 800ad52:	d421      	bmi.n	800ad98 <__lo0bits+0x52>
 800ad54:	0798      	lsls	r0, r3, #30
 800ad56:	bf49      	itett	mi
 800ad58:	085b      	lsrmi	r3, r3, #1
 800ad5a:	089b      	lsrpl	r3, r3, #2
 800ad5c:	2001      	movmi	r0, #1
 800ad5e:	6013      	strmi	r3, [r2, #0]
 800ad60:	bf5c      	itt	pl
 800ad62:	6013      	strpl	r3, [r2, #0]
 800ad64:	2002      	movpl	r0, #2
 800ad66:	4770      	bx	lr
 800ad68:	b299      	uxth	r1, r3
 800ad6a:	b909      	cbnz	r1, 800ad70 <__lo0bits+0x2a>
 800ad6c:	0c1b      	lsrs	r3, r3, #16
 800ad6e:	2010      	movs	r0, #16
 800ad70:	b2d9      	uxtb	r1, r3
 800ad72:	b909      	cbnz	r1, 800ad78 <__lo0bits+0x32>
 800ad74:	3008      	adds	r0, #8
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	0719      	lsls	r1, r3, #28
 800ad7a:	bf04      	itt	eq
 800ad7c:	091b      	lsreq	r3, r3, #4
 800ad7e:	3004      	addeq	r0, #4
 800ad80:	0799      	lsls	r1, r3, #30
 800ad82:	bf04      	itt	eq
 800ad84:	089b      	lsreq	r3, r3, #2
 800ad86:	3002      	addeq	r0, #2
 800ad88:	07d9      	lsls	r1, r3, #31
 800ad8a:	d403      	bmi.n	800ad94 <__lo0bits+0x4e>
 800ad8c:	085b      	lsrs	r3, r3, #1
 800ad8e:	f100 0001 	add.w	r0, r0, #1
 800ad92:	d003      	beq.n	800ad9c <__lo0bits+0x56>
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	4770      	bx	lr
 800ad98:	2000      	movs	r0, #0
 800ad9a:	4770      	bx	lr
 800ad9c:	2020      	movs	r0, #32
 800ad9e:	4770      	bx	lr

0800ada0 <__i2b>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	460c      	mov	r4, r1
 800ada4:	2101      	movs	r1, #1
 800ada6:	f7ff ff07 	bl	800abb8 <_Balloc>
 800adaa:	4602      	mov	r2, r0
 800adac:	b928      	cbnz	r0, 800adba <__i2b+0x1a>
 800adae:	4b05      	ldr	r3, [pc, #20]	@ (800adc4 <__i2b+0x24>)
 800adb0:	4805      	ldr	r0, [pc, #20]	@ (800adc8 <__i2b+0x28>)
 800adb2:	f240 1145 	movw	r1, #325	@ 0x145
 800adb6:	f000 fea9 	bl	800bb0c <__assert_func>
 800adba:	2301      	movs	r3, #1
 800adbc:	6144      	str	r4, [r0, #20]
 800adbe:	6103      	str	r3, [r0, #16]
 800adc0:	bd10      	pop	{r4, pc}
 800adc2:	bf00      	nop
 800adc4:	08021ccc 	.word	0x08021ccc
 800adc8:	08021cdd 	.word	0x08021cdd

0800adcc <__multiply>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	4614      	mov	r4, r2
 800add2:	690a      	ldr	r2, [r1, #16]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	429a      	cmp	r2, r3
 800add8:	bfa8      	it	ge
 800adda:	4623      	movge	r3, r4
 800addc:	460f      	mov	r7, r1
 800adde:	bfa4      	itt	ge
 800ade0:	460c      	movge	r4, r1
 800ade2:	461f      	movge	r7, r3
 800ade4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ade8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800adec:	68a3      	ldr	r3, [r4, #8]
 800adee:	6861      	ldr	r1, [r4, #4]
 800adf0:	eb0a 0609 	add.w	r6, sl, r9
 800adf4:	42b3      	cmp	r3, r6
 800adf6:	b085      	sub	sp, #20
 800adf8:	bfb8      	it	lt
 800adfa:	3101      	addlt	r1, #1
 800adfc:	f7ff fedc 	bl	800abb8 <_Balloc>
 800ae00:	b930      	cbnz	r0, 800ae10 <__multiply+0x44>
 800ae02:	4602      	mov	r2, r0
 800ae04:	4b44      	ldr	r3, [pc, #272]	@ (800af18 <__multiply+0x14c>)
 800ae06:	4845      	ldr	r0, [pc, #276]	@ (800af1c <__multiply+0x150>)
 800ae08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae0c:	f000 fe7e 	bl	800bb0c <__assert_func>
 800ae10:	f100 0514 	add.w	r5, r0, #20
 800ae14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae18:	462b      	mov	r3, r5
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4543      	cmp	r3, r8
 800ae1e:	d321      	bcc.n	800ae64 <__multiply+0x98>
 800ae20:	f107 0114 	add.w	r1, r7, #20
 800ae24:	f104 0214 	add.w	r2, r4, #20
 800ae28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae30:	9302      	str	r3, [sp, #8]
 800ae32:	1b13      	subs	r3, r2, r4
 800ae34:	3b15      	subs	r3, #21
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	f104 0715 	add.w	r7, r4, #21
 800ae40:	42ba      	cmp	r2, r7
 800ae42:	bf38      	it	cc
 800ae44:	2304      	movcc	r3, #4
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	9103      	str	r1, [sp, #12]
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	d80c      	bhi.n	800ae6a <__multiply+0x9e>
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	dd03      	ble.n	800ae5c <__multiply+0x90>
 800ae54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d05b      	beq.n	800af14 <__multiply+0x148>
 800ae5c:	6106      	str	r6, [r0, #16]
 800ae5e:	b005      	add	sp, #20
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	f843 2b04 	str.w	r2, [r3], #4
 800ae68:	e7d8      	b.n	800ae1c <__multiply+0x50>
 800ae6a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae6e:	f1ba 0f00 	cmp.w	sl, #0
 800ae72:	d024      	beq.n	800aebe <__multiply+0xf2>
 800ae74:	f104 0e14 	add.w	lr, r4, #20
 800ae78:	46a9      	mov	r9, r5
 800ae7a:	f04f 0c00 	mov.w	ip, #0
 800ae7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae82:	f8d9 3000 	ldr.w	r3, [r9]
 800ae86:	fa1f fb87 	uxth.w	fp, r7
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae94:	f8d9 7000 	ldr.w	r7, [r9]
 800ae98:	4463      	add	r3, ip
 800ae9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae9e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aea2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aeac:	4572      	cmp	r2, lr
 800aeae:	f849 3b04 	str.w	r3, [r9], #4
 800aeb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aeb6:	d8e2      	bhi.n	800ae7e <__multiply+0xb2>
 800aeb8:	9b01      	ldr	r3, [sp, #4]
 800aeba:	f845 c003 	str.w	ip, [r5, r3]
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aec4:	3104      	adds	r1, #4
 800aec6:	f1b9 0f00 	cmp.w	r9, #0
 800aeca:	d021      	beq.n	800af10 <__multiply+0x144>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	f104 0c14 	add.w	ip, r4, #20
 800aed2:	46ae      	mov	lr, r5
 800aed4:	f04f 0a00 	mov.w	sl, #0
 800aed8:	f8bc b000 	ldrh.w	fp, [ip]
 800aedc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aee0:	fb09 770b 	mla	r7, r9, fp, r7
 800aee4:	4457      	add	r7, sl
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aeec:	f84e 3b04 	str.w	r3, [lr], #4
 800aef0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aef8:	f8be 3000 	ldrh.w	r3, [lr]
 800aefc:	fb09 330a 	mla	r3, r9, sl, r3
 800af00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af04:	4562      	cmp	r2, ip
 800af06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af0a:	d8e5      	bhi.n	800aed8 <__multiply+0x10c>
 800af0c:	9f01      	ldr	r7, [sp, #4]
 800af0e:	51eb      	str	r3, [r5, r7]
 800af10:	3504      	adds	r5, #4
 800af12:	e799      	b.n	800ae48 <__multiply+0x7c>
 800af14:	3e01      	subs	r6, #1
 800af16:	e79b      	b.n	800ae50 <__multiply+0x84>
 800af18:	08021ccc 	.word	0x08021ccc
 800af1c:	08021cdd 	.word	0x08021cdd

0800af20 <__pow5mult>:
 800af20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af24:	4615      	mov	r5, r2
 800af26:	f012 0203 	ands.w	r2, r2, #3
 800af2a:	4607      	mov	r7, r0
 800af2c:	460e      	mov	r6, r1
 800af2e:	d007      	beq.n	800af40 <__pow5mult+0x20>
 800af30:	4c25      	ldr	r4, [pc, #148]	@ (800afc8 <__pow5mult+0xa8>)
 800af32:	3a01      	subs	r2, #1
 800af34:	2300      	movs	r3, #0
 800af36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af3a:	f7ff fe9f 	bl	800ac7c <__multadd>
 800af3e:	4606      	mov	r6, r0
 800af40:	10ad      	asrs	r5, r5, #2
 800af42:	d03d      	beq.n	800afc0 <__pow5mult+0xa0>
 800af44:	69fc      	ldr	r4, [r7, #28]
 800af46:	b97c      	cbnz	r4, 800af68 <__pow5mult+0x48>
 800af48:	2010      	movs	r0, #16
 800af4a:	f7ff fd7f 	bl	800aa4c <malloc>
 800af4e:	4602      	mov	r2, r0
 800af50:	61f8      	str	r0, [r7, #28]
 800af52:	b928      	cbnz	r0, 800af60 <__pow5mult+0x40>
 800af54:	4b1d      	ldr	r3, [pc, #116]	@ (800afcc <__pow5mult+0xac>)
 800af56:	481e      	ldr	r0, [pc, #120]	@ (800afd0 <__pow5mult+0xb0>)
 800af58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af5c:	f000 fdd6 	bl	800bb0c <__assert_func>
 800af60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af64:	6004      	str	r4, [r0, #0]
 800af66:	60c4      	str	r4, [r0, #12]
 800af68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af70:	b94c      	cbnz	r4, 800af86 <__pow5mult+0x66>
 800af72:	f240 2171 	movw	r1, #625	@ 0x271
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff ff12 	bl	800ada0 <__i2b>
 800af7c:	2300      	movs	r3, #0
 800af7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af82:	4604      	mov	r4, r0
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	f04f 0900 	mov.w	r9, #0
 800af8a:	07eb      	lsls	r3, r5, #31
 800af8c:	d50a      	bpl.n	800afa4 <__pow5mult+0x84>
 800af8e:	4631      	mov	r1, r6
 800af90:	4622      	mov	r2, r4
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ff1a 	bl	800adcc <__multiply>
 800af98:	4631      	mov	r1, r6
 800af9a:	4680      	mov	r8, r0
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff fe4b 	bl	800ac38 <_Bfree>
 800afa2:	4646      	mov	r6, r8
 800afa4:	106d      	asrs	r5, r5, #1
 800afa6:	d00b      	beq.n	800afc0 <__pow5mult+0xa0>
 800afa8:	6820      	ldr	r0, [r4, #0]
 800afaa:	b938      	cbnz	r0, 800afbc <__pow5mult+0x9c>
 800afac:	4622      	mov	r2, r4
 800afae:	4621      	mov	r1, r4
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ff0b 	bl	800adcc <__multiply>
 800afb6:	6020      	str	r0, [r4, #0]
 800afb8:	f8c0 9000 	str.w	r9, [r0]
 800afbc:	4604      	mov	r4, r0
 800afbe:	e7e4      	b.n	800af8a <__pow5mult+0x6a>
 800afc0:	4630      	mov	r0, r6
 800afc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc6:	bf00      	nop
 800afc8:	08021d38 	.word	0x08021d38
 800afcc:	08021c5d 	.word	0x08021c5d
 800afd0:	08021cdd 	.word	0x08021cdd

0800afd4 <__lshift>:
 800afd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd8:	460c      	mov	r4, r1
 800afda:	6849      	ldr	r1, [r1, #4]
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	4607      	mov	r7, r0
 800afe6:	4691      	mov	r9, r2
 800afe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afec:	f108 0601 	add.w	r6, r8, #1
 800aff0:	42b3      	cmp	r3, r6
 800aff2:	db0b      	blt.n	800b00c <__lshift+0x38>
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7ff fddf 	bl	800abb8 <_Balloc>
 800affa:	4605      	mov	r5, r0
 800affc:	b948      	cbnz	r0, 800b012 <__lshift+0x3e>
 800affe:	4602      	mov	r2, r0
 800b000:	4b28      	ldr	r3, [pc, #160]	@ (800b0a4 <__lshift+0xd0>)
 800b002:	4829      	ldr	r0, [pc, #164]	@ (800b0a8 <__lshift+0xd4>)
 800b004:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b008:	f000 fd80 	bl	800bb0c <__assert_func>
 800b00c:	3101      	adds	r1, #1
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	e7ee      	b.n	800aff0 <__lshift+0x1c>
 800b012:	2300      	movs	r3, #0
 800b014:	f100 0114 	add.w	r1, r0, #20
 800b018:	f100 0210 	add.w	r2, r0, #16
 800b01c:	4618      	mov	r0, r3
 800b01e:	4553      	cmp	r3, sl
 800b020:	db33      	blt.n	800b08a <__lshift+0xb6>
 800b022:	6920      	ldr	r0, [r4, #16]
 800b024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b028:	f104 0314 	add.w	r3, r4, #20
 800b02c:	f019 091f 	ands.w	r9, r9, #31
 800b030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b038:	d02b      	beq.n	800b092 <__lshift+0xbe>
 800b03a:	f1c9 0e20 	rsb	lr, r9, #32
 800b03e:	468a      	mov	sl, r1
 800b040:	2200      	movs	r2, #0
 800b042:	6818      	ldr	r0, [r3, #0]
 800b044:	fa00 f009 	lsl.w	r0, r0, r9
 800b048:	4310      	orrs	r0, r2
 800b04a:	f84a 0b04 	str.w	r0, [sl], #4
 800b04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b052:	459c      	cmp	ip, r3
 800b054:	fa22 f20e 	lsr.w	r2, r2, lr
 800b058:	d8f3      	bhi.n	800b042 <__lshift+0x6e>
 800b05a:	ebac 0304 	sub.w	r3, ip, r4
 800b05e:	3b15      	subs	r3, #21
 800b060:	f023 0303 	bic.w	r3, r3, #3
 800b064:	3304      	adds	r3, #4
 800b066:	f104 0015 	add.w	r0, r4, #21
 800b06a:	4584      	cmp	ip, r0
 800b06c:	bf38      	it	cc
 800b06e:	2304      	movcc	r3, #4
 800b070:	50ca      	str	r2, [r1, r3]
 800b072:	b10a      	cbz	r2, 800b078 <__lshift+0xa4>
 800b074:	f108 0602 	add.w	r6, r8, #2
 800b078:	3e01      	subs	r6, #1
 800b07a:	4638      	mov	r0, r7
 800b07c:	612e      	str	r6, [r5, #16]
 800b07e:	4621      	mov	r1, r4
 800b080:	f7ff fdda 	bl	800ac38 <_Bfree>
 800b084:	4628      	mov	r0, r5
 800b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08e:	3301      	adds	r3, #1
 800b090:	e7c5      	b.n	800b01e <__lshift+0x4a>
 800b092:	3904      	subs	r1, #4
 800b094:	f853 2b04 	ldr.w	r2, [r3], #4
 800b098:	f841 2f04 	str.w	r2, [r1, #4]!
 800b09c:	459c      	cmp	ip, r3
 800b09e:	d8f9      	bhi.n	800b094 <__lshift+0xc0>
 800b0a0:	e7ea      	b.n	800b078 <__lshift+0xa4>
 800b0a2:	bf00      	nop
 800b0a4:	08021ccc 	.word	0x08021ccc
 800b0a8:	08021cdd 	.word	0x08021cdd

0800b0ac <__mcmp>:
 800b0ac:	690a      	ldr	r2, [r1, #16]
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	6900      	ldr	r0, [r0, #16]
 800b0b2:	1a80      	subs	r0, r0, r2
 800b0b4:	b530      	push	{r4, r5, lr}
 800b0b6:	d10e      	bne.n	800b0d6 <__mcmp+0x2a>
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	3114      	adds	r1, #20
 800b0bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0cc:	4295      	cmp	r5, r2
 800b0ce:	d003      	beq.n	800b0d8 <__mcmp+0x2c>
 800b0d0:	d205      	bcs.n	800b0de <__mcmp+0x32>
 800b0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d6:	bd30      	pop	{r4, r5, pc}
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	d3f3      	bcc.n	800b0c4 <__mcmp+0x18>
 800b0dc:	e7fb      	b.n	800b0d6 <__mcmp+0x2a>
 800b0de:	2001      	movs	r0, #1
 800b0e0:	e7f9      	b.n	800b0d6 <__mcmp+0x2a>
	...

0800b0e4 <__mdiff>:
 800b0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	4689      	mov	r9, r1
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	f7ff ffdb 	bl	800b0ac <__mcmp>
 800b0f6:	1e05      	subs	r5, r0, #0
 800b0f8:	d112      	bne.n	800b120 <__mdiff+0x3c>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f7ff fd5b 	bl	800abb8 <_Balloc>
 800b102:	4602      	mov	r2, r0
 800b104:	b928      	cbnz	r0, 800b112 <__mdiff+0x2e>
 800b106:	4b3f      	ldr	r3, [pc, #252]	@ (800b204 <__mdiff+0x120>)
 800b108:	f240 2137 	movw	r1, #567	@ 0x237
 800b10c:	483e      	ldr	r0, [pc, #248]	@ (800b208 <__mdiff+0x124>)
 800b10e:	f000 fcfd 	bl	800bb0c <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b118:	4610      	mov	r0, r2
 800b11a:	b003      	add	sp, #12
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	bfbc      	itt	lt
 800b122:	464b      	movlt	r3, r9
 800b124:	46a1      	movlt	r9, r4
 800b126:	4630      	mov	r0, r6
 800b128:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b12c:	bfba      	itte	lt
 800b12e:	461c      	movlt	r4, r3
 800b130:	2501      	movlt	r5, #1
 800b132:	2500      	movge	r5, #0
 800b134:	f7ff fd40 	bl	800abb8 <_Balloc>
 800b138:	4602      	mov	r2, r0
 800b13a:	b918      	cbnz	r0, 800b144 <__mdiff+0x60>
 800b13c:	4b31      	ldr	r3, [pc, #196]	@ (800b204 <__mdiff+0x120>)
 800b13e:	f240 2145 	movw	r1, #581	@ 0x245
 800b142:	e7e3      	b.n	800b10c <__mdiff+0x28>
 800b144:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b148:	6926      	ldr	r6, [r4, #16]
 800b14a:	60c5      	str	r5, [r0, #12]
 800b14c:	f109 0310 	add.w	r3, r9, #16
 800b150:	f109 0514 	add.w	r5, r9, #20
 800b154:	f104 0e14 	add.w	lr, r4, #20
 800b158:	f100 0b14 	add.w	fp, r0, #20
 800b15c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b160:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	46d9      	mov	r9, fp
 800b168:	f04f 0c00 	mov.w	ip, #0
 800b16c:	9b01      	ldr	r3, [sp, #4]
 800b16e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b172:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	fa1f f38a 	uxth.w	r3, sl
 800b17c:	4619      	mov	r1, r3
 800b17e:	b283      	uxth	r3, r0
 800b180:	1acb      	subs	r3, r1, r3
 800b182:	0c00      	lsrs	r0, r0, #16
 800b184:	4463      	add	r3, ip
 800b186:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b18a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b18e:	b29b      	uxth	r3, r3
 800b190:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b194:	4576      	cmp	r6, lr
 800b196:	f849 3b04 	str.w	r3, [r9], #4
 800b19a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b19e:	d8e5      	bhi.n	800b16c <__mdiff+0x88>
 800b1a0:	1b33      	subs	r3, r6, r4
 800b1a2:	3b15      	subs	r3, #21
 800b1a4:	f023 0303 	bic.w	r3, r3, #3
 800b1a8:	3415      	adds	r4, #21
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	42a6      	cmp	r6, r4
 800b1ae:	bf38      	it	cc
 800b1b0:	2304      	movcc	r3, #4
 800b1b2:	441d      	add	r5, r3
 800b1b4:	445b      	add	r3, fp
 800b1b6:	461e      	mov	r6, r3
 800b1b8:	462c      	mov	r4, r5
 800b1ba:	4544      	cmp	r4, r8
 800b1bc:	d30e      	bcc.n	800b1dc <__mdiff+0xf8>
 800b1be:	f108 0103 	add.w	r1, r8, #3
 800b1c2:	1b49      	subs	r1, r1, r5
 800b1c4:	f021 0103 	bic.w	r1, r1, #3
 800b1c8:	3d03      	subs	r5, #3
 800b1ca:	45a8      	cmp	r8, r5
 800b1cc:	bf38      	it	cc
 800b1ce:	2100      	movcc	r1, #0
 800b1d0:	440b      	add	r3, r1
 800b1d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1d6:	b191      	cbz	r1, 800b1fe <__mdiff+0x11a>
 800b1d8:	6117      	str	r7, [r2, #16]
 800b1da:	e79d      	b.n	800b118 <__mdiff+0x34>
 800b1dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1e0:	46e6      	mov	lr, ip
 800b1e2:	0c08      	lsrs	r0, r1, #16
 800b1e4:	fa1c fc81 	uxtah	ip, ip, r1
 800b1e8:	4471      	add	r1, lr
 800b1ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1ee:	b289      	uxth	r1, r1
 800b1f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1f4:	f846 1b04 	str.w	r1, [r6], #4
 800b1f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1fc:	e7dd      	b.n	800b1ba <__mdiff+0xd6>
 800b1fe:	3f01      	subs	r7, #1
 800b200:	e7e7      	b.n	800b1d2 <__mdiff+0xee>
 800b202:	bf00      	nop
 800b204:	08021ccc 	.word	0x08021ccc
 800b208:	08021cdd 	.word	0x08021cdd

0800b20c <__d2b>:
 800b20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b210:	460f      	mov	r7, r1
 800b212:	2101      	movs	r1, #1
 800b214:	ec59 8b10 	vmov	r8, r9, d0
 800b218:	4616      	mov	r6, r2
 800b21a:	f7ff fccd 	bl	800abb8 <_Balloc>
 800b21e:	4604      	mov	r4, r0
 800b220:	b930      	cbnz	r0, 800b230 <__d2b+0x24>
 800b222:	4602      	mov	r2, r0
 800b224:	4b23      	ldr	r3, [pc, #140]	@ (800b2b4 <__d2b+0xa8>)
 800b226:	4824      	ldr	r0, [pc, #144]	@ (800b2b8 <__d2b+0xac>)
 800b228:	f240 310f 	movw	r1, #783	@ 0x30f
 800b22c:	f000 fc6e 	bl	800bb0c <__assert_func>
 800b230:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b238:	b10d      	cbz	r5, 800b23e <__d2b+0x32>
 800b23a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	f1b8 0300 	subs.w	r3, r8, #0
 800b244:	d023      	beq.n	800b28e <__d2b+0x82>
 800b246:	4668      	mov	r0, sp
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	f7ff fd7c 	bl	800ad46 <__lo0bits>
 800b24e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b252:	b1d0      	cbz	r0, 800b28a <__d2b+0x7e>
 800b254:	f1c0 0320 	rsb	r3, r0, #32
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	430b      	orrs	r3, r1
 800b25e:	40c2      	lsrs	r2, r0
 800b260:	6163      	str	r3, [r4, #20]
 800b262:	9201      	str	r2, [sp, #4]
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	61a3      	str	r3, [r4, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bf0c      	ite	eq
 800b26c:	2201      	moveq	r2, #1
 800b26e:	2202      	movne	r2, #2
 800b270:	6122      	str	r2, [r4, #16]
 800b272:	b1a5      	cbz	r5, 800b29e <__d2b+0x92>
 800b274:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b278:	4405      	add	r5, r0
 800b27a:	603d      	str	r5, [r7, #0]
 800b27c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b280:	6030      	str	r0, [r6, #0]
 800b282:	4620      	mov	r0, r4
 800b284:	b003      	add	sp, #12
 800b286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b28a:	6161      	str	r1, [r4, #20]
 800b28c:	e7ea      	b.n	800b264 <__d2b+0x58>
 800b28e:	a801      	add	r0, sp, #4
 800b290:	f7ff fd59 	bl	800ad46 <__lo0bits>
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	6163      	str	r3, [r4, #20]
 800b298:	3020      	adds	r0, #32
 800b29a:	2201      	movs	r2, #1
 800b29c:	e7e8      	b.n	800b270 <__d2b+0x64>
 800b29e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2a6:	6038      	str	r0, [r7, #0]
 800b2a8:	6918      	ldr	r0, [r3, #16]
 800b2aa:	f7ff fd2d 	bl	800ad08 <__hi0bits>
 800b2ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2b2:	e7e5      	b.n	800b280 <__d2b+0x74>
 800b2b4:	08021ccc 	.word	0x08021ccc
 800b2b8:	08021cdd 	.word	0x08021cdd

0800b2bc <__ssputs_r>:
 800b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	688e      	ldr	r6, [r1, #8]
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	42be      	cmp	r6, r7
 800b2c6:	680b      	ldr	r3, [r1, #0]
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	4690      	mov	r8, r2
 800b2ce:	d82d      	bhi.n	800b32c <__ssputs_r+0x70>
 800b2d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2d8:	d026      	beq.n	800b328 <__ssputs_r+0x6c>
 800b2da:	6965      	ldr	r5, [r4, #20]
 800b2dc:	6909      	ldr	r1, [r1, #16]
 800b2de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2e2:	eba3 0901 	sub.w	r9, r3, r1
 800b2e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2ea:	1c7b      	adds	r3, r7, #1
 800b2ec:	444b      	add	r3, r9
 800b2ee:	106d      	asrs	r5, r5, #1
 800b2f0:	429d      	cmp	r5, r3
 800b2f2:	bf38      	it	cc
 800b2f4:	461d      	movcc	r5, r3
 800b2f6:	0553      	lsls	r3, r2, #21
 800b2f8:	d527      	bpl.n	800b34a <__ssputs_r+0x8e>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7ff fbd0 	bl	800aaa0 <_malloc_r>
 800b300:	4606      	mov	r6, r0
 800b302:	b360      	cbz	r0, 800b35e <__ssputs_r+0xa2>
 800b304:	6921      	ldr	r1, [r4, #16]
 800b306:	464a      	mov	r2, r9
 800b308:	f7fe fcfb 	bl	8009d02 <memcpy>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	6126      	str	r6, [r4, #16]
 800b31a:	6165      	str	r5, [r4, #20]
 800b31c:	444e      	add	r6, r9
 800b31e:	eba5 0509 	sub.w	r5, r5, r9
 800b322:	6026      	str	r6, [r4, #0]
 800b324:	60a5      	str	r5, [r4, #8]
 800b326:	463e      	mov	r6, r7
 800b328:	42be      	cmp	r6, r7
 800b32a:	d900      	bls.n	800b32e <__ssputs_r+0x72>
 800b32c:	463e      	mov	r6, r7
 800b32e:	6820      	ldr	r0, [r4, #0]
 800b330:	4632      	mov	r2, r6
 800b332:	4641      	mov	r1, r8
 800b334:	f000 fb9e 	bl	800ba74 <memmove>
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	1b9b      	subs	r3, r3, r6
 800b33c:	60a3      	str	r3, [r4, #8]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	4433      	add	r3, r6
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	2000      	movs	r0, #0
 800b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34a:	462a      	mov	r2, r5
 800b34c:	f000 fc22 	bl	800bb94 <_realloc_r>
 800b350:	4606      	mov	r6, r0
 800b352:	2800      	cmp	r0, #0
 800b354:	d1e0      	bne.n	800b318 <__ssputs_r+0x5c>
 800b356:	6921      	ldr	r1, [r4, #16]
 800b358:	4650      	mov	r0, sl
 800b35a:	f7ff fb2d 	bl	800a9b8 <_free_r>
 800b35e:	230c      	movs	r3, #12
 800b360:	f8ca 3000 	str.w	r3, [sl]
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	e7e9      	b.n	800b346 <__ssputs_r+0x8a>
	...

0800b374 <_svfiprintf_r>:
 800b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	4698      	mov	r8, r3
 800b37a:	898b      	ldrh	r3, [r1, #12]
 800b37c:	061b      	lsls	r3, r3, #24
 800b37e:	b09d      	sub	sp, #116	@ 0x74
 800b380:	4607      	mov	r7, r0
 800b382:	460d      	mov	r5, r1
 800b384:	4614      	mov	r4, r2
 800b386:	d510      	bpl.n	800b3aa <_svfiprintf_r+0x36>
 800b388:	690b      	ldr	r3, [r1, #16]
 800b38a:	b973      	cbnz	r3, 800b3aa <_svfiprintf_r+0x36>
 800b38c:	2140      	movs	r1, #64	@ 0x40
 800b38e:	f7ff fb87 	bl	800aaa0 <_malloc_r>
 800b392:	6028      	str	r0, [r5, #0]
 800b394:	6128      	str	r0, [r5, #16]
 800b396:	b930      	cbnz	r0, 800b3a6 <_svfiprintf_r+0x32>
 800b398:	230c      	movs	r3, #12
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	b01d      	add	sp, #116	@ 0x74
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	2340      	movs	r3, #64	@ 0x40
 800b3a8:	616b      	str	r3, [r5, #20]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ae:	2320      	movs	r3, #32
 800b3b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b8:	2330      	movs	r3, #48	@ 0x30
 800b3ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b558 <_svfiprintf_r+0x1e4>
 800b3be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3c2:	f04f 0901 	mov.w	r9, #1
 800b3c6:	4623      	mov	r3, r4
 800b3c8:	469a      	mov	sl, r3
 800b3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3ce:	b10a      	cbz	r2, 800b3d4 <_svfiprintf_r+0x60>
 800b3d0:	2a25      	cmp	r2, #37	@ 0x25
 800b3d2:	d1f9      	bne.n	800b3c8 <_svfiprintf_r+0x54>
 800b3d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b3d8:	d00b      	beq.n	800b3f2 <_svfiprintf_r+0x7e>
 800b3da:	465b      	mov	r3, fp
 800b3dc:	4622      	mov	r2, r4
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7ff ff6b 	bl	800b2bc <__ssputs_r>
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	f000 80a7 	beq.w	800b53a <_svfiprintf_r+0x1c6>
 800b3ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3ee:	445a      	add	r2, fp
 800b3f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 809f 	beq.w	800b53a <_svfiprintf_r+0x1c6>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b406:	f10a 0a01 	add.w	sl, sl, #1
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	9307      	str	r3, [sp, #28]
 800b40e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b412:	931a      	str	r3, [sp, #104]	@ 0x68
 800b414:	4654      	mov	r4, sl
 800b416:	2205      	movs	r2, #5
 800b418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41c:	484e      	ldr	r0, [pc, #312]	@ (800b558 <_svfiprintf_r+0x1e4>)
 800b41e:	f7f4 fedf 	bl	80001e0 <memchr>
 800b422:	9a04      	ldr	r2, [sp, #16]
 800b424:	b9d8      	cbnz	r0, 800b45e <_svfiprintf_r+0xea>
 800b426:	06d0      	lsls	r0, r2, #27
 800b428:	bf44      	itt	mi
 800b42a:	2320      	movmi	r3, #32
 800b42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b430:	0711      	lsls	r1, r2, #28
 800b432:	bf44      	itt	mi
 800b434:	232b      	movmi	r3, #43	@ 0x2b
 800b436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b43a:	f89a 3000 	ldrb.w	r3, [sl]
 800b43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b440:	d015      	beq.n	800b46e <_svfiprintf_r+0xfa>
 800b442:	9a07      	ldr	r2, [sp, #28]
 800b444:	4654      	mov	r4, sl
 800b446:	2000      	movs	r0, #0
 800b448:	f04f 0c0a 	mov.w	ip, #10
 800b44c:	4621      	mov	r1, r4
 800b44e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b452:	3b30      	subs	r3, #48	@ 0x30
 800b454:	2b09      	cmp	r3, #9
 800b456:	d94b      	bls.n	800b4f0 <_svfiprintf_r+0x17c>
 800b458:	b1b0      	cbz	r0, 800b488 <_svfiprintf_r+0x114>
 800b45a:	9207      	str	r2, [sp, #28]
 800b45c:	e014      	b.n	800b488 <_svfiprintf_r+0x114>
 800b45e:	eba0 0308 	sub.w	r3, r0, r8
 800b462:	fa09 f303 	lsl.w	r3, r9, r3
 800b466:	4313      	orrs	r3, r2
 800b468:	9304      	str	r3, [sp, #16]
 800b46a:	46a2      	mov	sl, r4
 800b46c:	e7d2      	b.n	800b414 <_svfiprintf_r+0xa0>
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	1d19      	adds	r1, r3, #4
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	9103      	str	r1, [sp, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfbb      	ittet	lt
 800b47a:	425b      	neglt	r3, r3
 800b47c:	f042 0202 	orrlt.w	r2, r2, #2
 800b480:	9307      	strge	r3, [sp, #28]
 800b482:	9307      	strlt	r3, [sp, #28]
 800b484:	bfb8      	it	lt
 800b486:	9204      	strlt	r2, [sp, #16]
 800b488:	7823      	ldrb	r3, [r4, #0]
 800b48a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b48c:	d10a      	bne.n	800b4a4 <_svfiprintf_r+0x130>
 800b48e:	7863      	ldrb	r3, [r4, #1]
 800b490:	2b2a      	cmp	r3, #42	@ 0x2a
 800b492:	d132      	bne.n	800b4fa <_svfiprintf_r+0x186>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	9203      	str	r2, [sp, #12]
 800b49c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4a0:	3402      	adds	r4, #2
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b568 <_svfiprintf_r+0x1f4>
 800b4a8:	7821      	ldrb	r1, [r4, #0]
 800b4aa:	2203      	movs	r2, #3
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	f7f4 fe97 	bl	80001e0 <memchr>
 800b4b2:	b138      	cbz	r0, 800b4c4 <_svfiprintf_r+0x150>
 800b4b4:	9b04      	ldr	r3, [sp, #16]
 800b4b6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ba:	2240      	movs	r2, #64	@ 0x40
 800b4bc:	4082      	lsls	r2, r0
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	3401      	adds	r4, #1
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c8:	4824      	ldr	r0, [pc, #144]	@ (800b55c <_svfiprintf_r+0x1e8>)
 800b4ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4ce:	2206      	movs	r2, #6
 800b4d0:	f7f4 fe86 	bl	80001e0 <memchr>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d036      	beq.n	800b546 <_svfiprintf_r+0x1d2>
 800b4d8:	4b21      	ldr	r3, [pc, #132]	@ (800b560 <_svfiprintf_r+0x1ec>)
 800b4da:	bb1b      	cbnz	r3, 800b524 <_svfiprintf_r+0x1b0>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	3307      	adds	r3, #7
 800b4e0:	f023 0307 	bic.w	r3, r3, #7
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	9303      	str	r3, [sp, #12]
 800b4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ea:	4433      	add	r3, r6
 800b4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ee:	e76a      	b.n	800b3c6 <_svfiprintf_r+0x52>
 800b4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	e7a8      	b.n	800b44c <_svfiprintf_r+0xd8>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	4619      	mov	r1, r3
 800b502:	f04f 0c0a 	mov.w	ip, #10
 800b506:	4620      	mov	r0, r4
 800b508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b50c:	3a30      	subs	r2, #48	@ 0x30
 800b50e:	2a09      	cmp	r2, #9
 800b510:	d903      	bls.n	800b51a <_svfiprintf_r+0x1a6>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0c6      	beq.n	800b4a4 <_svfiprintf_r+0x130>
 800b516:	9105      	str	r1, [sp, #20]
 800b518:	e7c4      	b.n	800b4a4 <_svfiprintf_r+0x130>
 800b51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51e:	4604      	mov	r4, r0
 800b520:	2301      	movs	r3, #1
 800b522:	e7f0      	b.n	800b506 <_svfiprintf_r+0x192>
 800b524:	ab03      	add	r3, sp, #12
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	462a      	mov	r2, r5
 800b52a:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <_svfiprintf_r+0x1f0>)
 800b52c:	a904      	add	r1, sp, #16
 800b52e:	4638      	mov	r0, r7
 800b530:	f7fd fd7e 	bl	8009030 <_printf_float>
 800b534:	1c42      	adds	r2, r0, #1
 800b536:	4606      	mov	r6, r0
 800b538:	d1d6      	bne.n	800b4e8 <_svfiprintf_r+0x174>
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	065b      	lsls	r3, r3, #25
 800b53e:	f53f af2d 	bmi.w	800b39c <_svfiprintf_r+0x28>
 800b542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b544:	e72c      	b.n	800b3a0 <_svfiprintf_r+0x2c>
 800b546:	ab03      	add	r3, sp, #12
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	462a      	mov	r2, r5
 800b54c:	4b05      	ldr	r3, [pc, #20]	@ (800b564 <_svfiprintf_r+0x1f0>)
 800b54e:	a904      	add	r1, sp, #16
 800b550:	4638      	mov	r0, r7
 800b552:	f7fe f805 	bl	8009560 <_printf_i>
 800b556:	e7ed      	b.n	800b534 <_svfiprintf_r+0x1c0>
 800b558:	08021e38 	.word	0x08021e38
 800b55c:	08021e42 	.word	0x08021e42
 800b560:	08009031 	.word	0x08009031
 800b564:	0800b2bd 	.word	0x0800b2bd
 800b568:	08021e3e 	.word	0x08021e3e

0800b56c <__sfputc_r>:
 800b56c:	6893      	ldr	r3, [r2, #8]
 800b56e:	3b01      	subs	r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	b410      	push	{r4}
 800b574:	6093      	str	r3, [r2, #8]
 800b576:	da08      	bge.n	800b58a <__sfputc_r+0x1e>
 800b578:	6994      	ldr	r4, [r2, #24]
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	db01      	blt.n	800b582 <__sfputc_r+0x16>
 800b57e:	290a      	cmp	r1, #10
 800b580:	d103      	bne.n	800b58a <__sfputc_r+0x1e>
 800b582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b586:	f7fe baa8 	b.w	8009ada <__swbuf_r>
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	1c58      	adds	r0, r3, #1
 800b58e:	6010      	str	r0, [r2, #0]
 800b590:	7019      	strb	r1, [r3, #0]
 800b592:	4608      	mov	r0, r1
 800b594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <__sfputs_r>:
 800b59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59c:	4606      	mov	r6, r0
 800b59e:	460f      	mov	r7, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	18d5      	adds	r5, r2, r3
 800b5a4:	42ac      	cmp	r4, r5
 800b5a6:	d101      	bne.n	800b5ac <__sfputs_r+0x12>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e007      	b.n	800b5bc <__sfputs_r+0x22>
 800b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b0:	463a      	mov	r2, r7
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ffda 	bl	800b56c <__sfputc_r>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d1f3      	bne.n	800b5a4 <__sfputs_r+0xa>
 800b5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5c0 <_vfiprintf_r>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	460d      	mov	r5, r1
 800b5c6:	b09d      	sub	sp, #116	@ 0x74
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	4698      	mov	r8, r3
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	b118      	cbz	r0, 800b5d8 <_vfiprintf_r+0x18>
 800b5d0:	6a03      	ldr	r3, [r0, #32]
 800b5d2:	b90b      	cbnz	r3, 800b5d8 <_vfiprintf_r+0x18>
 800b5d4:	f7fe f970 	bl	80098b8 <__sinit>
 800b5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5da:	07d9      	lsls	r1, r3, #31
 800b5dc:	d405      	bmi.n	800b5ea <_vfiprintf_r+0x2a>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	059a      	lsls	r2, r3, #22
 800b5e2:	d402      	bmi.n	800b5ea <_vfiprintf_r+0x2a>
 800b5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e6:	f7fe fb8a 	bl	8009cfe <__retarget_lock_acquire_recursive>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	071b      	lsls	r3, r3, #28
 800b5ee:	d501      	bpl.n	800b5f4 <_vfiprintf_r+0x34>
 800b5f0:	692b      	ldr	r3, [r5, #16]
 800b5f2:	b99b      	cbnz	r3, 800b61c <_vfiprintf_r+0x5c>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	f7fe faae 	bl	8009b58 <__swsetup_r>
 800b5fc:	b170      	cbz	r0, 800b61c <_vfiprintf_r+0x5c>
 800b5fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b600:	07dc      	lsls	r4, r3, #31
 800b602:	d504      	bpl.n	800b60e <_vfiprintf_r+0x4e>
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	b01d      	add	sp, #116	@ 0x74
 800b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	0598      	lsls	r0, r3, #22
 800b612:	d4f7      	bmi.n	800b604 <_vfiprintf_r+0x44>
 800b614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b616:	f7fe fb73 	bl	8009d00 <__retarget_lock_release_recursive>
 800b61a:	e7f3      	b.n	800b604 <_vfiprintf_r+0x44>
 800b61c:	2300      	movs	r3, #0
 800b61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b620:	2320      	movs	r3, #32
 800b622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b626:	f8cd 800c 	str.w	r8, [sp, #12]
 800b62a:	2330      	movs	r3, #48	@ 0x30
 800b62c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7dc <_vfiprintf_r+0x21c>
 800b630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b634:	f04f 0901 	mov.w	r9, #1
 800b638:	4623      	mov	r3, r4
 800b63a:	469a      	mov	sl, r3
 800b63c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b640:	b10a      	cbz	r2, 800b646 <_vfiprintf_r+0x86>
 800b642:	2a25      	cmp	r2, #37	@ 0x25
 800b644:	d1f9      	bne.n	800b63a <_vfiprintf_r+0x7a>
 800b646:	ebba 0b04 	subs.w	fp, sl, r4
 800b64a:	d00b      	beq.n	800b664 <_vfiprintf_r+0xa4>
 800b64c:	465b      	mov	r3, fp
 800b64e:	4622      	mov	r2, r4
 800b650:	4629      	mov	r1, r5
 800b652:	4630      	mov	r0, r6
 800b654:	f7ff ffa1 	bl	800b59a <__sfputs_r>
 800b658:	3001      	adds	r0, #1
 800b65a:	f000 80a7 	beq.w	800b7ac <_vfiprintf_r+0x1ec>
 800b65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b660:	445a      	add	r2, fp
 800b662:	9209      	str	r2, [sp, #36]	@ 0x24
 800b664:	f89a 3000 	ldrb.w	r3, [sl]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 809f 	beq.w	800b7ac <_vfiprintf_r+0x1ec>
 800b66e:	2300      	movs	r3, #0
 800b670:	f04f 32ff 	mov.w	r2, #4294967295
 800b674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b678:	f10a 0a01 	add.w	sl, sl, #1
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	9307      	str	r3, [sp, #28]
 800b680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b684:	931a      	str	r3, [sp, #104]	@ 0x68
 800b686:	4654      	mov	r4, sl
 800b688:	2205      	movs	r2, #5
 800b68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68e:	4853      	ldr	r0, [pc, #332]	@ (800b7dc <_vfiprintf_r+0x21c>)
 800b690:	f7f4 fda6 	bl	80001e0 <memchr>
 800b694:	9a04      	ldr	r2, [sp, #16]
 800b696:	b9d8      	cbnz	r0, 800b6d0 <_vfiprintf_r+0x110>
 800b698:	06d1      	lsls	r1, r2, #27
 800b69a:	bf44      	itt	mi
 800b69c:	2320      	movmi	r3, #32
 800b69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a2:	0713      	lsls	r3, r2, #28
 800b6a4:	bf44      	itt	mi
 800b6a6:	232b      	movmi	r3, #43	@ 0x2b
 800b6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6b2:	d015      	beq.n	800b6e0 <_vfiprintf_r+0x120>
 800b6b4:	9a07      	ldr	r2, [sp, #28]
 800b6b6:	4654      	mov	r4, sl
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f04f 0c0a 	mov.w	ip, #10
 800b6be:	4621      	mov	r1, r4
 800b6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6c4:	3b30      	subs	r3, #48	@ 0x30
 800b6c6:	2b09      	cmp	r3, #9
 800b6c8:	d94b      	bls.n	800b762 <_vfiprintf_r+0x1a2>
 800b6ca:	b1b0      	cbz	r0, 800b6fa <_vfiprintf_r+0x13a>
 800b6cc:	9207      	str	r2, [sp, #28]
 800b6ce:	e014      	b.n	800b6fa <_vfiprintf_r+0x13a>
 800b6d0:	eba0 0308 	sub.w	r3, r0, r8
 800b6d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	9304      	str	r3, [sp, #16]
 800b6dc:	46a2      	mov	sl, r4
 800b6de:	e7d2      	b.n	800b686 <_vfiprintf_r+0xc6>
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	1d19      	adds	r1, r3, #4
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	9103      	str	r1, [sp, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bfbb      	ittet	lt
 800b6ec:	425b      	neglt	r3, r3
 800b6ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b6f2:	9307      	strge	r3, [sp, #28]
 800b6f4:	9307      	strlt	r3, [sp, #28]
 800b6f6:	bfb8      	it	lt
 800b6f8:	9204      	strlt	r2, [sp, #16]
 800b6fa:	7823      	ldrb	r3, [r4, #0]
 800b6fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6fe:	d10a      	bne.n	800b716 <_vfiprintf_r+0x156>
 800b700:	7863      	ldrb	r3, [r4, #1]
 800b702:	2b2a      	cmp	r3, #42	@ 0x2a
 800b704:	d132      	bne.n	800b76c <_vfiprintf_r+0x1ac>
 800b706:	9b03      	ldr	r3, [sp, #12]
 800b708:	1d1a      	adds	r2, r3, #4
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	9203      	str	r2, [sp, #12]
 800b70e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b712:	3402      	adds	r4, #2
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7ec <_vfiprintf_r+0x22c>
 800b71a:	7821      	ldrb	r1, [r4, #0]
 800b71c:	2203      	movs	r2, #3
 800b71e:	4650      	mov	r0, sl
 800b720:	f7f4 fd5e 	bl	80001e0 <memchr>
 800b724:	b138      	cbz	r0, 800b736 <_vfiprintf_r+0x176>
 800b726:	9b04      	ldr	r3, [sp, #16]
 800b728:	eba0 000a 	sub.w	r0, r0, sl
 800b72c:	2240      	movs	r2, #64	@ 0x40
 800b72e:	4082      	lsls	r2, r0
 800b730:	4313      	orrs	r3, r2
 800b732:	3401      	adds	r4, #1
 800b734:	9304      	str	r3, [sp, #16]
 800b736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73a:	4829      	ldr	r0, [pc, #164]	@ (800b7e0 <_vfiprintf_r+0x220>)
 800b73c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b740:	2206      	movs	r2, #6
 800b742:	f7f4 fd4d 	bl	80001e0 <memchr>
 800b746:	2800      	cmp	r0, #0
 800b748:	d03f      	beq.n	800b7ca <_vfiprintf_r+0x20a>
 800b74a:	4b26      	ldr	r3, [pc, #152]	@ (800b7e4 <_vfiprintf_r+0x224>)
 800b74c:	bb1b      	cbnz	r3, 800b796 <_vfiprintf_r+0x1d6>
 800b74e:	9b03      	ldr	r3, [sp, #12]
 800b750:	3307      	adds	r3, #7
 800b752:	f023 0307 	bic.w	r3, r3, #7
 800b756:	3308      	adds	r3, #8
 800b758:	9303      	str	r3, [sp, #12]
 800b75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75c:	443b      	add	r3, r7
 800b75e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b760:	e76a      	b.n	800b638 <_vfiprintf_r+0x78>
 800b762:	fb0c 3202 	mla	r2, ip, r2, r3
 800b766:	460c      	mov	r4, r1
 800b768:	2001      	movs	r0, #1
 800b76a:	e7a8      	b.n	800b6be <_vfiprintf_r+0xfe>
 800b76c:	2300      	movs	r3, #0
 800b76e:	3401      	adds	r4, #1
 800b770:	9305      	str	r3, [sp, #20]
 800b772:	4619      	mov	r1, r3
 800b774:	f04f 0c0a 	mov.w	ip, #10
 800b778:	4620      	mov	r0, r4
 800b77a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b77e:	3a30      	subs	r2, #48	@ 0x30
 800b780:	2a09      	cmp	r2, #9
 800b782:	d903      	bls.n	800b78c <_vfiprintf_r+0x1cc>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0c6      	beq.n	800b716 <_vfiprintf_r+0x156>
 800b788:	9105      	str	r1, [sp, #20]
 800b78a:	e7c4      	b.n	800b716 <_vfiprintf_r+0x156>
 800b78c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b790:	4604      	mov	r4, r0
 800b792:	2301      	movs	r3, #1
 800b794:	e7f0      	b.n	800b778 <_vfiprintf_r+0x1b8>
 800b796:	ab03      	add	r3, sp, #12
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	462a      	mov	r2, r5
 800b79c:	4b12      	ldr	r3, [pc, #72]	@ (800b7e8 <_vfiprintf_r+0x228>)
 800b79e:	a904      	add	r1, sp, #16
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7fd fc45 	bl	8009030 <_printf_float>
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	1c78      	adds	r0, r7, #1
 800b7aa:	d1d6      	bne.n	800b75a <_vfiprintf_r+0x19a>
 800b7ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7ae:	07d9      	lsls	r1, r3, #31
 800b7b0:	d405      	bmi.n	800b7be <_vfiprintf_r+0x1fe>
 800b7b2:	89ab      	ldrh	r3, [r5, #12]
 800b7b4:	059a      	lsls	r2, r3, #22
 800b7b6:	d402      	bmi.n	800b7be <_vfiprintf_r+0x1fe>
 800b7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ba:	f7fe faa1 	bl	8009d00 <__retarget_lock_release_recursive>
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	065b      	lsls	r3, r3, #25
 800b7c2:	f53f af1f 	bmi.w	800b604 <_vfiprintf_r+0x44>
 800b7c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7c8:	e71e      	b.n	800b608 <_vfiprintf_r+0x48>
 800b7ca:	ab03      	add	r3, sp, #12
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	4b05      	ldr	r3, [pc, #20]	@ (800b7e8 <_vfiprintf_r+0x228>)
 800b7d2:	a904      	add	r1, sp, #16
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7fd fec3 	bl	8009560 <_printf_i>
 800b7da:	e7e4      	b.n	800b7a6 <_vfiprintf_r+0x1e6>
 800b7dc:	08021e38 	.word	0x08021e38
 800b7e0:	08021e42 	.word	0x08021e42
 800b7e4:	08009031 	.word	0x08009031
 800b7e8:	0800b59b 	.word	0x0800b59b
 800b7ec:	08021e3e 	.word	0x08021e3e

0800b7f0 <__sflush_r>:
 800b7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	0716      	lsls	r6, r2, #28
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	d454      	bmi.n	800b8aa <__sflush_r+0xba>
 800b800:	684b      	ldr	r3, [r1, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	dc02      	bgt.n	800b80c <__sflush_r+0x1c>
 800b806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dd48      	ble.n	800b89e <__sflush_r+0xae>
 800b80c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b80e:	2e00      	cmp	r6, #0
 800b810:	d045      	beq.n	800b89e <__sflush_r+0xae>
 800b812:	2300      	movs	r3, #0
 800b814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b818:	682f      	ldr	r7, [r5, #0]
 800b81a:	6a21      	ldr	r1, [r4, #32]
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	d030      	beq.n	800b882 <__sflush_r+0x92>
 800b820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	0759      	lsls	r1, r3, #29
 800b826:	d505      	bpl.n	800b834 <__sflush_r+0x44>
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	1ad2      	subs	r2, r2, r3
 800b82c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b82e:	b10b      	cbz	r3, 800b834 <__sflush_r+0x44>
 800b830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b832:	1ad2      	subs	r2, r2, r3
 800b834:	2300      	movs	r3, #0
 800b836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b838:	6a21      	ldr	r1, [r4, #32]
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b0      	blx	r6
 800b83e:	1c43      	adds	r3, r0, #1
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	d106      	bne.n	800b852 <__sflush_r+0x62>
 800b844:	6829      	ldr	r1, [r5, #0]
 800b846:	291d      	cmp	r1, #29
 800b848:	d82b      	bhi.n	800b8a2 <__sflush_r+0xb2>
 800b84a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8f4 <__sflush_r+0x104>)
 800b84c:	410a      	asrs	r2, r1
 800b84e:	07d6      	lsls	r6, r2, #31
 800b850:	d427      	bmi.n	800b8a2 <__sflush_r+0xb2>
 800b852:	2200      	movs	r2, #0
 800b854:	6062      	str	r2, [r4, #4]
 800b856:	04d9      	lsls	r1, r3, #19
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	d504      	bpl.n	800b868 <__sflush_r+0x78>
 800b85e:	1c42      	adds	r2, r0, #1
 800b860:	d101      	bne.n	800b866 <__sflush_r+0x76>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b903      	cbnz	r3, 800b868 <__sflush_r+0x78>
 800b866:	6560      	str	r0, [r4, #84]	@ 0x54
 800b868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b86a:	602f      	str	r7, [r5, #0]
 800b86c:	b1b9      	cbz	r1, 800b89e <__sflush_r+0xae>
 800b86e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b872:	4299      	cmp	r1, r3
 800b874:	d002      	beq.n	800b87c <__sflush_r+0x8c>
 800b876:	4628      	mov	r0, r5
 800b878:	f7ff f89e 	bl	800a9b8 <_free_r>
 800b87c:	2300      	movs	r3, #0
 800b87e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b880:	e00d      	b.n	800b89e <__sflush_r+0xae>
 800b882:	2301      	movs	r3, #1
 800b884:	4628      	mov	r0, r5
 800b886:	47b0      	blx	r6
 800b888:	4602      	mov	r2, r0
 800b88a:	1c50      	adds	r0, r2, #1
 800b88c:	d1c9      	bne.n	800b822 <__sflush_r+0x32>
 800b88e:	682b      	ldr	r3, [r5, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0c6      	beq.n	800b822 <__sflush_r+0x32>
 800b894:	2b1d      	cmp	r3, #29
 800b896:	d001      	beq.n	800b89c <__sflush_r+0xac>
 800b898:	2b16      	cmp	r3, #22
 800b89a:	d11e      	bne.n	800b8da <__sflush_r+0xea>
 800b89c:	602f      	str	r7, [r5, #0]
 800b89e:	2000      	movs	r0, #0
 800b8a0:	e022      	b.n	800b8e8 <__sflush_r+0xf8>
 800b8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8a6:	b21b      	sxth	r3, r3
 800b8a8:	e01b      	b.n	800b8e2 <__sflush_r+0xf2>
 800b8aa:	690f      	ldr	r7, [r1, #16]
 800b8ac:	2f00      	cmp	r7, #0
 800b8ae:	d0f6      	beq.n	800b89e <__sflush_r+0xae>
 800b8b0:	0793      	lsls	r3, r2, #30
 800b8b2:	680e      	ldr	r6, [r1, #0]
 800b8b4:	bf08      	it	eq
 800b8b6:	694b      	ldreq	r3, [r1, #20]
 800b8b8:	600f      	str	r7, [r1, #0]
 800b8ba:	bf18      	it	ne
 800b8bc:	2300      	movne	r3, #0
 800b8be:	eba6 0807 	sub.w	r8, r6, r7
 800b8c2:	608b      	str	r3, [r1, #8]
 800b8c4:	f1b8 0f00 	cmp.w	r8, #0
 800b8c8:	dde9      	ble.n	800b89e <__sflush_r+0xae>
 800b8ca:	6a21      	ldr	r1, [r4, #32]
 800b8cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8ce:	4643      	mov	r3, r8
 800b8d0:	463a      	mov	r2, r7
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b0      	blx	r6
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	dc08      	bgt.n	800b8ec <__sflush_r+0xfc>
 800b8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ec:	4407      	add	r7, r0
 800b8ee:	eba8 0800 	sub.w	r8, r8, r0
 800b8f2:	e7e7      	b.n	800b8c4 <__sflush_r+0xd4>
 800b8f4:	dfbffffe 	.word	0xdfbffffe

0800b8f8 <_fflush_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	690b      	ldr	r3, [r1, #16]
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	b913      	cbnz	r3, 800b908 <_fflush_r+0x10>
 800b902:	2500      	movs	r5, #0
 800b904:	4628      	mov	r0, r5
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	b118      	cbz	r0, 800b912 <_fflush_r+0x1a>
 800b90a:	6a03      	ldr	r3, [r0, #32]
 800b90c:	b90b      	cbnz	r3, 800b912 <_fflush_r+0x1a>
 800b90e:	f7fd ffd3 	bl	80098b8 <__sinit>
 800b912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0f3      	beq.n	800b902 <_fflush_r+0xa>
 800b91a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b91c:	07d0      	lsls	r0, r2, #31
 800b91e:	d404      	bmi.n	800b92a <_fflush_r+0x32>
 800b920:	0599      	lsls	r1, r3, #22
 800b922:	d402      	bmi.n	800b92a <_fflush_r+0x32>
 800b924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b926:	f7fe f9ea 	bl	8009cfe <__retarget_lock_acquire_recursive>
 800b92a:	4628      	mov	r0, r5
 800b92c:	4621      	mov	r1, r4
 800b92e:	f7ff ff5f 	bl	800b7f0 <__sflush_r>
 800b932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b934:	07da      	lsls	r2, r3, #31
 800b936:	4605      	mov	r5, r0
 800b938:	d4e4      	bmi.n	800b904 <_fflush_r+0xc>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	059b      	lsls	r3, r3, #22
 800b93e:	d4e1      	bmi.n	800b904 <_fflush_r+0xc>
 800b940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b942:	f7fe f9dd 	bl	8009d00 <__retarget_lock_release_recursive>
 800b946:	e7dd      	b.n	800b904 <_fflush_r+0xc>

0800b948 <__swhatbuf_r>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	460c      	mov	r4, r1
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	2900      	cmp	r1, #0
 800b952:	b096      	sub	sp, #88	@ 0x58
 800b954:	4615      	mov	r5, r2
 800b956:	461e      	mov	r6, r3
 800b958:	da0d      	bge.n	800b976 <__swhatbuf_r+0x2e>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b960:	f04f 0100 	mov.w	r1, #0
 800b964:	bf14      	ite	ne
 800b966:	2340      	movne	r3, #64	@ 0x40
 800b968:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b96c:	2000      	movs	r0, #0
 800b96e:	6031      	str	r1, [r6, #0]
 800b970:	602b      	str	r3, [r5, #0]
 800b972:	b016      	add	sp, #88	@ 0x58
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	466a      	mov	r2, sp
 800b978:	f000 f896 	bl	800baa8 <_fstat_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	dbec      	blt.n	800b95a <__swhatbuf_r+0x12>
 800b980:	9901      	ldr	r1, [sp, #4]
 800b982:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b986:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b98a:	4259      	negs	r1, r3
 800b98c:	4159      	adcs	r1, r3
 800b98e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b992:	e7eb      	b.n	800b96c <__swhatbuf_r+0x24>

0800b994 <__smakebuf_r>:
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b998:	079d      	lsls	r5, r3, #30
 800b99a:	4606      	mov	r6, r0
 800b99c:	460c      	mov	r4, r1
 800b99e:	d507      	bpl.n	800b9b0 <__smakebuf_r+0x1c>
 800b9a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	6163      	str	r3, [r4, #20]
 800b9ac:	b003      	add	sp, #12
 800b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b0:	ab01      	add	r3, sp, #4
 800b9b2:	466a      	mov	r2, sp
 800b9b4:	f7ff ffc8 	bl	800b948 <__swhatbuf_r>
 800b9b8:	9f00      	ldr	r7, [sp, #0]
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	4639      	mov	r1, r7
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f7ff f86e 	bl	800aaa0 <_malloc_r>
 800b9c4:	b948      	cbnz	r0, 800b9da <__smakebuf_r+0x46>
 800b9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ca:	059a      	lsls	r2, r3, #22
 800b9cc:	d4ee      	bmi.n	800b9ac <__smakebuf_r+0x18>
 800b9ce:	f023 0303 	bic.w	r3, r3, #3
 800b9d2:	f043 0302 	orr.w	r3, r3, #2
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	e7e2      	b.n	800b9a0 <__smakebuf_r+0xc>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	6020      	str	r0, [r4, #0]
 800b9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9ea:	b15b      	cbz	r3, 800ba04 <__smakebuf_r+0x70>
 800b9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f000 f86b 	bl	800bacc <_isatty_r>
 800b9f6:	b128      	cbz	r0, 800ba04 <__smakebuf_r+0x70>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	431d      	orrs	r5, r3
 800ba08:	81a5      	strh	r5, [r4, #12]
 800ba0a:	e7cf      	b.n	800b9ac <__smakebuf_r+0x18>

0800ba0c <_putc_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	460d      	mov	r5, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	4606      	mov	r6, r0
 800ba14:	b118      	cbz	r0, 800ba1e <_putc_r+0x12>
 800ba16:	6a03      	ldr	r3, [r0, #32]
 800ba18:	b90b      	cbnz	r3, 800ba1e <_putc_r+0x12>
 800ba1a:	f7fd ff4d 	bl	80098b8 <__sinit>
 800ba1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba20:	07d8      	lsls	r0, r3, #31
 800ba22:	d405      	bmi.n	800ba30 <_putc_r+0x24>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	0599      	lsls	r1, r3, #22
 800ba28:	d402      	bmi.n	800ba30 <_putc_r+0x24>
 800ba2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba2c:	f7fe f967 	bl	8009cfe <__retarget_lock_acquire_recursive>
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	60a3      	str	r3, [r4, #8]
 800ba38:	da05      	bge.n	800ba46 <_putc_r+0x3a>
 800ba3a:	69a2      	ldr	r2, [r4, #24]
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	db12      	blt.n	800ba66 <_putc_r+0x5a>
 800ba40:	b2eb      	uxtb	r3, r5
 800ba42:	2b0a      	cmp	r3, #10
 800ba44:	d00f      	beq.n	800ba66 <_putc_r+0x5a>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	6022      	str	r2, [r4, #0]
 800ba4c:	701d      	strb	r5, [r3, #0]
 800ba4e:	b2ed      	uxtb	r5, r5
 800ba50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba52:	07da      	lsls	r2, r3, #31
 800ba54:	d405      	bmi.n	800ba62 <_putc_r+0x56>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	059b      	lsls	r3, r3, #22
 800ba5a:	d402      	bmi.n	800ba62 <_putc_r+0x56>
 800ba5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba5e:	f7fe f94f 	bl	8009d00 <__retarget_lock_release_recursive>
 800ba62:	4628      	mov	r0, r5
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
 800ba66:	4629      	mov	r1, r5
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7fe f835 	bl	8009ada <__swbuf_r>
 800ba70:	4605      	mov	r5, r0
 800ba72:	e7ed      	b.n	800ba50 <_putc_r+0x44>

0800ba74 <memmove>:
 800ba74:	4288      	cmp	r0, r1
 800ba76:	b510      	push	{r4, lr}
 800ba78:	eb01 0402 	add.w	r4, r1, r2
 800ba7c:	d902      	bls.n	800ba84 <memmove+0x10>
 800ba7e:	4284      	cmp	r4, r0
 800ba80:	4623      	mov	r3, r4
 800ba82:	d807      	bhi.n	800ba94 <memmove+0x20>
 800ba84:	1e43      	subs	r3, r0, #1
 800ba86:	42a1      	cmp	r1, r4
 800ba88:	d008      	beq.n	800ba9c <memmove+0x28>
 800ba8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba92:	e7f8      	b.n	800ba86 <memmove+0x12>
 800ba94:	4402      	add	r2, r0
 800ba96:	4601      	mov	r1, r0
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	d100      	bne.n	800ba9e <memmove+0x2a>
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baa6:	e7f7      	b.n	800ba98 <memmove+0x24>

0800baa8 <_fstat_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	@ (800bac8 <_fstat_r+0x20>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	4611      	mov	r1, r2
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	f7f7 f921 	bl	8002cfc <_fstat>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d102      	bne.n	800bac4 <_fstat_r+0x1c>
 800babe:	682b      	ldr	r3, [r5, #0]
 800bac0:	b103      	cbz	r3, 800bac4 <_fstat_r+0x1c>
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	20001df8 	.word	0x20001df8

0800bacc <_isatty_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d06      	ldr	r5, [pc, #24]	@ (800bae8 <_isatty_r+0x1c>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7f7 f920 	bl	8002d1c <_isatty>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_isatty_r+0x1a>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_isatty_r+0x1a>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	20001df8 	.word	0x20001df8

0800baec <_sbrk_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d06      	ldr	r5, [pc, #24]	@ (800bb08 <_sbrk_r+0x1c>)
 800baf0:	2300      	movs	r3, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	602b      	str	r3, [r5, #0]
 800baf8:	f7f7 f928 	bl	8002d4c <_sbrk>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_sbrk_r+0x1a>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_sbrk_r+0x1a>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20001df8 	.word	0x20001df8

0800bb0c <__assert_func>:
 800bb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb0e:	4614      	mov	r4, r2
 800bb10:	461a      	mov	r2, r3
 800bb12:	4b09      	ldr	r3, [pc, #36]	@ (800bb38 <__assert_func+0x2c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4605      	mov	r5, r0
 800bb18:	68d8      	ldr	r0, [r3, #12]
 800bb1a:	b954      	cbnz	r4, 800bb32 <__assert_func+0x26>
 800bb1c:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <__assert_func+0x30>)
 800bb1e:	461c      	mov	r4, r3
 800bb20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb24:	9100      	str	r1, [sp, #0]
 800bb26:	462b      	mov	r3, r5
 800bb28:	4905      	ldr	r1, [pc, #20]	@ (800bb40 <__assert_func+0x34>)
 800bb2a:	f000 f86f 	bl	800bc0c <fiprintf>
 800bb2e:	f000 f87f 	bl	800bc30 <abort>
 800bb32:	4b04      	ldr	r3, [pc, #16]	@ (800bb44 <__assert_func+0x38>)
 800bb34:	e7f4      	b.n	800bb20 <__assert_func+0x14>
 800bb36:	bf00      	nop
 800bb38:	20000054 	.word	0x20000054
 800bb3c:	08021e8e 	.word	0x08021e8e
 800bb40:	08021e60 	.word	0x08021e60
 800bb44:	08021e53 	.word	0x08021e53

0800bb48 <_calloc_r>:
 800bb48:	b570      	push	{r4, r5, r6, lr}
 800bb4a:	fba1 5402 	umull	r5, r4, r1, r2
 800bb4e:	b93c      	cbnz	r4, 800bb60 <_calloc_r+0x18>
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7fe ffa5 	bl	800aaa0 <_malloc_r>
 800bb56:	4606      	mov	r6, r0
 800bb58:	b928      	cbnz	r0, 800bb66 <_calloc_r+0x1e>
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	220c      	movs	r2, #12
 800bb62:	6002      	str	r2, [r0, #0]
 800bb64:	e7f9      	b.n	800bb5a <_calloc_r+0x12>
 800bb66:	462a      	mov	r2, r5
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f7fe f84b 	bl	8009c04 <memset>
 800bb6e:	e7f5      	b.n	800bb5c <_calloc_r+0x14>

0800bb70 <__ascii_mbtowc>:
 800bb70:	b082      	sub	sp, #8
 800bb72:	b901      	cbnz	r1, 800bb76 <__ascii_mbtowc+0x6>
 800bb74:	a901      	add	r1, sp, #4
 800bb76:	b142      	cbz	r2, 800bb8a <__ascii_mbtowc+0x1a>
 800bb78:	b14b      	cbz	r3, 800bb8e <__ascii_mbtowc+0x1e>
 800bb7a:	7813      	ldrb	r3, [r2, #0]
 800bb7c:	600b      	str	r3, [r1, #0]
 800bb7e:	7812      	ldrb	r2, [r2, #0]
 800bb80:	1e10      	subs	r0, r2, #0
 800bb82:	bf18      	it	ne
 800bb84:	2001      	movne	r0, #1
 800bb86:	b002      	add	sp, #8
 800bb88:	4770      	bx	lr
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	e7fb      	b.n	800bb86 <__ascii_mbtowc+0x16>
 800bb8e:	f06f 0001 	mvn.w	r0, #1
 800bb92:	e7f8      	b.n	800bb86 <__ascii_mbtowc+0x16>

0800bb94 <_realloc_r>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4615      	mov	r5, r2
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	b921      	cbnz	r1, 800bbaa <_realloc_r+0x16>
 800bba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	4611      	mov	r1, r2
 800bba6:	f7fe bf7b 	b.w	800aaa0 <_malloc_r>
 800bbaa:	b92a      	cbnz	r2, 800bbb8 <_realloc_r+0x24>
 800bbac:	f7fe ff04 	bl	800a9b8 <_free_r>
 800bbb0:	2400      	movs	r4, #0
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	f000 f841 	bl	800bc3e <_malloc_usable_size_r>
 800bbbc:	4285      	cmp	r5, r0
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	d802      	bhi.n	800bbc8 <_realloc_r+0x34>
 800bbc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbc6:	d8f4      	bhi.n	800bbb2 <_realloc_r+0x1e>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4640      	mov	r0, r8
 800bbcc:	f7fe ff68 	bl	800aaa0 <_malloc_r>
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0ec      	beq.n	800bbb0 <_realloc_r+0x1c>
 800bbd6:	42b5      	cmp	r5, r6
 800bbd8:	462a      	mov	r2, r5
 800bbda:	4621      	mov	r1, r4
 800bbdc:	bf28      	it	cs
 800bbde:	4632      	movcs	r2, r6
 800bbe0:	f7fe f88f 	bl	8009d02 <memcpy>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7fe fee6 	bl	800a9b8 <_free_r>
 800bbec:	463c      	mov	r4, r7
 800bbee:	e7e0      	b.n	800bbb2 <_realloc_r+0x1e>

0800bbf0 <__ascii_wctomb>:
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	4608      	mov	r0, r1
 800bbf4:	b141      	cbz	r1, 800bc08 <__ascii_wctomb+0x18>
 800bbf6:	2aff      	cmp	r2, #255	@ 0xff
 800bbf8:	d904      	bls.n	800bc04 <__ascii_wctomb+0x14>
 800bbfa:	228a      	movs	r2, #138	@ 0x8a
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bc02:	4770      	bx	lr
 800bc04:	700a      	strb	r2, [r1, #0]
 800bc06:	2001      	movs	r0, #1
 800bc08:	4770      	bx	lr
	...

0800bc0c <fiprintf>:
 800bc0c:	b40e      	push	{r1, r2, r3}
 800bc0e:	b503      	push	{r0, r1, lr}
 800bc10:	4601      	mov	r1, r0
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	4805      	ldr	r0, [pc, #20]	@ (800bc2c <fiprintf+0x20>)
 800bc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	f7ff fccf 	bl	800b5c0 <_vfiprintf_r>
 800bc22:	b002      	add	sp, #8
 800bc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc28:	b003      	add	sp, #12
 800bc2a:	4770      	bx	lr
 800bc2c:	20000054 	.word	0x20000054

0800bc30 <abort>:
 800bc30:	b508      	push	{r3, lr}
 800bc32:	2006      	movs	r0, #6
 800bc34:	f000 f834 	bl	800bca0 <raise>
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f7f7 f80f 	bl	8002c5c <_exit>

0800bc3e <_malloc_usable_size_r>:
 800bc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc42:	1f18      	subs	r0, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bfbc      	itt	lt
 800bc48:	580b      	ldrlt	r3, [r1, r0]
 800bc4a:	18c0      	addlt	r0, r0, r3
 800bc4c:	4770      	bx	lr

0800bc4e <_raise_r>:
 800bc4e:	291f      	cmp	r1, #31
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4605      	mov	r5, r0
 800bc54:	460c      	mov	r4, r1
 800bc56:	d904      	bls.n	800bc62 <_raise_r+0x14>
 800bc58:	2316      	movs	r3, #22
 800bc5a:	6003      	str	r3, [r0, #0]
 800bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc64:	b112      	cbz	r2, 800bc6c <_raise_r+0x1e>
 800bc66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc6a:	b94b      	cbnz	r3, 800bc80 <_raise_r+0x32>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f000 f831 	bl	800bcd4 <_getpid_r>
 800bc72:	4622      	mov	r2, r4
 800bc74:	4601      	mov	r1, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc7c:	f000 b818 	b.w	800bcb0 <_kill_r>
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d00a      	beq.n	800bc9a <_raise_r+0x4c>
 800bc84:	1c59      	adds	r1, r3, #1
 800bc86:	d103      	bne.n	800bc90 <_raise_r+0x42>
 800bc88:	2316      	movs	r3, #22
 800bc8a:	6003      	str	r3, [r0, #0]
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	e7e7      	b.n	800bc60 <_raise_r+0x12>
 800bc90:	2100      	movs	r1, #0
 800bc92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc96:	4620      	mov	r0, r4
 800bc98:	4798      	blx	r3
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e7e0      	b.n	800bc60 <_raise_r+0x12>
	...

0800bca0 <raise>:
 800bca0:	4b02      	ldr	r3, [pc, #8]	@ (800bcac <raise+0xc>)
 800bca2:	4601      	mov	r1, r0
 800bca4:	6818      	ldr	r0, [r3, #0]
 800bca6:	f7ff bfd2 	b.w	800bc4e <_raise_r>
 800bcaa:	bf00      	nop
 800bcac:	20000054 	.word	0x20000054

0800bcb0 <_kill_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	@ (800bcd0 <_kill_r+0x20>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	4611      	mov	r1, r2
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	f7f6 ffbd 	bl	8002c3c <_kill>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	d102      	bne.n	800bccc <_kill_r+0x1c>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	b103      	cbz	r3, 800bccc <_kill_r+0x1c>
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	20001df8 	.word	0x20001df8

0800bcd4 <_getpid_r>:
 800bcd4:	f7f6 bfaa 	b.w	8002c2c <_getpid>

0800bcd8 <atan2>:
 800bcd8:	f000 b802 	b.w	800bce0 <__ieee754_atan2>
 800bcdc:	0000      	movs	r0, r0
	...

0800bce0 <__ieee754_atan2>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	ec57 6b11 	vmov	r6, r7, d1
 800bce8:	4273      	negs	r3, r6
 800bcea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800be68 <__ieee754_atan2+0x188>
 800bcee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800bcf2:	4333      	orrs	r3, r6
 800bcf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bcf8:	4543      	cmp	r3, r8
 800bcfa:	ec51 0b10 	vmov	r0, r1, d0
 800bcfe:	4635      	mov	r5, r6
 800bd00:	d809      	bhi.n	800bd16 <__ieee754_atan2+0x36>
 800bd02:	4244      	negs	r4, r0
 800bd04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd08:	4304      	orrs	r4, r0
 800bd0a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bd0e:	4544      	cmp	r4, r8
 800bd10:	468e      	mov	lr, r1
 800bd12:	4681      	mov	r9, r0
 800bd14:	d907      	bls.n	800bd26 <__ieee754_atan2+0x46>
 800bd16:	4632      	mov	r2, r6
 800bd18:	463b      	mov	r3, r7
 800bd1a:	f7f4 fabf 	bl	800029c <__adddf3>
 800bd1e:	ec41 0b10 	vmov	d0, r0, r1
 800bd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd26:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800bd2a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800bd2e:	4334      	orrs	r4, r6
 800bd30:	d103      	bne.n	800bd3a <__ieee754_atan2+0x5a>
 800bd32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd36:	f000 b89b 	b.w	800be70 <atan>
 800bd3a:	17bc      	asrs	r4, r7, #30
 800bd3c:	f004 0402 	and.w	r4, r4, #2
 800bd40:	ea53 0909 	orrs.w	r9, r3, r9
 800bd44:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bd48:	d107      	bne.n	800bd5a <__ieee754_atan2+0x7a>
 800bd4a:	2c02      	cmp	r4, #2
 800bd4c:	d05f      	beq.n	800be0e <__ieee754_atan2+0x12e>
 800bd4e:	2c03      	cmp	r4, #3
 800bd50:	d1e5      	bne.n	800bd1e <__ieee754_atan2+0x3e>
 800bd52:	a141      	add	r1, pc, #260	@ (adr r1, 800be58 <__ieee754_atan2+0x178>)
 800bd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd58:	e7e1      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800bd5a:	4315      	orrs	r5, r2
 800bd5c:	d106      	bne.n	800bd6c <__ieee754_atan2+0x8c>
 800bd5e:	f1be 0f00 	cmp.w	lr, #0
 800bd62:	da5f      	bge.n	800be24 <__ieee754_atan2+0x144>
 800bd64:	a13e      	add	r1, pc, #248	@ (adr r1, 800be60 <__ieee754_atan2+0x180>)
 800bd66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd6a:	e7d8      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800bd6c:	4542      	cmp	r2, r8
 800bd6e:	d10f      	bne.n	800bd90 <__ieee754_atan2+0xb0>
 800bd70:	4293      	cmp	r3, r2
 800bd72:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd76:	d107      	bne.n	800bd88 <__ieee754_atan2+0xa8>
 800bd78:	2c02      	cmp	r4, #2
 800bd7a:	d84c      	bhi.n	800be16 <__ieee754_atan2+0x136>
 800bd7c:	4b34      	ldr	r3, [pc, #208]	@ (800be50 <__ieee754_atan2+0x170>)
 800bd7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd86:	e7ca      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800bd88:	2c02      	cmp	r4, #2
 800bd8a:	d848      	bhi.n	800be1e <__ieee754_atan2+0x13e>
 800bd8c:	4b31      	ldr	r3, [pc, #196]	@ (800be54 <__ieee754_atan2+0x174>)
 800bd8e:	e7f6      	b.n	800bd7e <__ieee754_atan2+0x9e>
 800bd90:	4543      	cmp	r3, r8
 800bd92:	d0e4      	beq.n	800bd5e <__ieee754_atan2+0x7e>
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800bd9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd9e:	da1e      	bge.n	800bdde <__ieee754_atan2+0xfe>
 800bda0:	2f00      	cmp	r7, #0
 800bda2:	da01      	bge.n	800bda8 <__ieee754_atan2+0xc8>
 800bda4:	323c      	adds	r2, #60	@ 0x3c
 800bda6:	db1e      	blt.n	800bde6 <__ieee754_atan2+0x106>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fd56 	bl	800085c <__aeabi_ddiv>
 800bdb0:	ec41 0b10 	vmov	d0, r0, r1
 800bdb4:	f000 f9f4 	bl	800c1a0 <fabs>
 800bdb8:	f000 f85a 	bl	800be70 <atan>
 800bdbc:	ec51 0b10 	vmov	r0, r1, d0
 800bdc0:	2c01      	cmp	r4, #1
 800bdc2:	d013      	beq.n	800bdec <__ieee754_atan2+0x10c>
 800bdc4:	2c02      	cmp	r4, #2
 800bdc6:	d015      	beq.n	800bdf4 <__ieee754_atan2+0x114>
 800bdc8:	2c00      	cmp	r4, #0
 800bdca:	d0a8      	beq.n	800bd1e <__ieee754_atan2+0x3e>
 800bdcc:	a318      	add	r3, pc, #96	@ (adr r3, 800be30 <__ieee754_atan2+0x150>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fa61 	bl	8000298 <__aeabi_dsub>
 800bdd6:	a318      	add	r3, pc, #96	@ (adr r3, 800be38 <__ieee754_atan2+0x158>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	e014      	b.n	800be08 <__ieee754_atan2+0x128>
 800bdde:	a118      	add	r1, pc, #96	@ (adr r1, 800be40 <__ieee754_atan2+0x160>)
 800bde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde4:	e7ec      	b.n	800bdc0 <__ieee754_atan2+0xe0>
 800bde6:	2000      	movs	r0, #0
 800bde8:	2100      	movs	r1, #0
 800bdea:	e7e9      	b.n	800bdc0 <__ieee754_atan2+0xe0>
 800bdec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	e794      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800bdf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800be30 <__ieee754_atan2+0x150>)
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f7f4 fa4d 	bl	8000298 <__aeabi_dsub>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	a10d      	add	r1, pc, #52	@ (adr r1, 800be38 <__ieee754_atan2+0x158>)
 800be04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be08:	f7f4 fa46 	bl	8000298 <__aeabi_dsub>
 800be0c:	e787      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800be0e:	a10a      	add	r1, pc, #40	@ (adr r1, 800be38 <__ieee754_atan2+0x158>)
 800be10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be14:	e783      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800be16:	a10c      	add	r1, pc, #48	@ (adr r1, 800be48 <__ieee754_atan2+0x168>)
 800be18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be1c:	e77f      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800be1e:	2000      	movs	r0, #0
 800be20:	2100      	movs	r1, #0
 800be22:	e77c      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800be24:	a106      	add	r1, pc, #24	@ (adr r1, 800be40 <__ieee754_atan2+0x160>)
 800be26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be2a:	e778      	b.n	800bd1e <__ieee754_atan2+0x3e>
 800be2c:	f3af 8000 	nop.w
 800be30:	33145c07 	.word	0x33145c07
 800be34:	3ca1a626 	.word	0x3ca1a626
 800be38:	54442d18 	.word	0x54442d18
 800be3c:	400921fb 	.word	0x400921fb
 800be40:	54442d18 	.word	0x54442d18
 800be44:	3ff921fb 	.word	0x3ff921fb
 800be48:	54442d18 	.word	0x54442d18
 800be4c:	3fe921fb 	.word	0x3fe921fb
 800be50:	08021fa8 	.word	0x08021fa8
 800be54:	08021f90 	.word	0x08021f90
 800be58:	54442d18 	.word	0x54442d18
 800be5c:	c00921fb 	.word	0xc00921fb
 800be60:	54442d18 	.word	0x54442d18
 800be64:	bff921fb 	.word	0xbff921fb
 800be68:	7ff00000 	.word	0x7ff00000
 800be6c:	00000000 	.word	0x00000000

0800be70 <atan>:
 800be70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	ec55 4b10 	vmov	r4, r5, d0
 800be78:	4bbf      	ldr	r3, [pc, #764]	@ (800c178 <atan+0x308>)
 800be7a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800be7e:	429e      	cmp	r6, r3
 800be80:	46ab      	mov	fp, r5
 800be82:	d918      	bls.n	800beb6 <atan+0x46>
 800be84:	4bbd      	ldr	r3, [pc, #756]	@ (800c17c <atan+0x30c>)
 800be86:	429e      	cmp	r6, r3
 800be88:	d801      	bhi.n	800be8e <atan+0x1e>
 800be8a:	d109      	bne.n	800bea0 <atan+0x30>
 800be8c:	b144      	cbz	r4, 800bea0 <atan+0x30>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	4620      	mov	r0, r4
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 fa01 	bl	800029c <__adddf3>
 800be9a:	4604      	mov	r4, r0
 800be9c:	460d      	mov	r5, r1
 800be9e:	e006      	b.n	800beae <atan+0x3e>
 800bea0:	f1bb 0f00 	cmp.w	fp, #0
 800bea4:	f340 812b 	ble.w	800c0fe <atan+0x28e>
 800bea8:	a597      	add	r5, pc, #604	@ (adr r5, 800c108 <atan+0x298>)
 800beaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800beae:	ec45 4b10 	vmov	d0, r4, r5
 800beb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb6:	4bb2      	ldr	r3, [pc, #712]	@ (800c180 <atan+0x310>)
 800beb8:	429e      	cmp	r6, r3
 800beba:	d813      	bhi.n	800bee4 <atan+0x74>
 800bebc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bec0:	429e      	cmp	r6, r3
 800bec2:	d80c      	bhi.n	800bede <atan+0x6e>
 800bec4:	a392      	add	r3, pc, #584	@ (adr r3, 800c110 <atan+0x2a0>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	4620      	mov	r0, r4
 800becc:	4629      	mov	r1, r5
 800bece:	f7f4 f9e5 	bl	800029c <__adddf3>
 800bed2:	4bac      	ldr	r3, [pc, #688]	@ (800c184 <atan+0x314>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	f7f4 fe27 	bl	8000b28 <__aeabi_dcmpgt>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d1e7      	bne.n	800beae <atan+0x3e>
 800bede:	f04f 3aff 	mov.w	sl, #4294967295
 800bee2:	e029      	b.n	800bf38 <atan+0xc8>
 800bee4:	f000 f95c 	bl	800c1a0 <fabs>
 800bee8:	4ba7      	ldr	r3, [pc, #668]	@ (800c188 <atan+0x318>)
 800beea:	429e      	cmp	r6, r3
 800beec:	ec55 4b10 	vmov	r4, r5, d0
 800bef0:	f200 80bc 	bhi.w	800c06c <atan+0x1fc>
 800bef4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bef8:	429e      	cmp	r6, r3
 800befa:	f200 809e 	bhi.w	800c03a <atan+0x1ca>
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	4620      	mov	r0, r4
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7f4 f9c9 	bl	800029c <__adddf3>
 800bf0a:	4b9e      	ldr	r3, [pc, #632]	@ (800c184 <atan+0x314>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f7f4 f9c3 	bl	8000298 <__aeabi_dsub>
 800bf12:	2200      	movs	r2, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 f9bc 	bl	800029c <__adddf3>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4630      	mov	r0, r6
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	f7f4 fc96 	bl	800085c <__aeabi_ddiv>
 800bf30:	f04f 0a00 	mov.w	sl, #0
 800bf34:	4604      	mov	r4, r0
 800bf36:	460d      	mov	r5, r1
 800bf38:	4622      	mov	r2, r4
 800bf3a:	462b      	mov	r3, r5
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fb62 	bl	8000608 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4680      	mov	r8, r0
 800bf4a:	4689      	mov	r9, r1
 800bf4c:	f7f4 fb5c 	bl	8000608 <__aeabi_dmul>
 800bf50:	a371      	add	r3, pc, #452	@ (adr r3, 800c118 <atan+0x2a8>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	4606      	mov	r6, r0
 800bf58:	460f      	mov	r7, r1
 800bf5a:	f7f4 fb55 	bl	8000608 <__aeabi_dmul>
 800bf5e:	a370      	add	r3, pc, #448	@ (adr r3, 800c120 <atan+0x2b0>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7f4 f99a 	bl	800029c <__adddf3>
 800bf68:	4632      	mov	r2, r6
 800bf6a:	463b      	mov	r3, r7
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	a36d      	add	r3, pc, #436	@ (adr r3, 800c128 <atan+0x2b8>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 f991 	bl	800029c <__adddf3>
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	f7f4 fb43 	bl	8000608 <__aeabi_dmul>
 800bf82:	a36b      	add	r3, pc, #428	@ (adr r3, 800c130 <atan+0x2c0>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 f988 	bl	800029c <__adddf3>
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	463b      	mov	r3, r7
 800bf90:	f7f4 fb3a 	bl	8000608 <__aeabi_dmul>
 800bf94:	a368      	add	r3, pc, #416	@ (adr r3, 800c138 <atan+0x2c8>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 f97f 	bl	800029c <__adddf3>
 800bf9e:	4632      	mov	r2, r6
 800bfa0:	463b      	mov	r3, r7
 800bfa2:	f7f4 fb31 	bl	8000608 <__aeabi_dmul>
 800bfa6:	a366      	add	r3, pc, #408	@ (adr r3, 800c140 <atan+0x2d0>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f976 	bl	800029c <__adddf3>
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	464b      	mov	r3, r9
 800bfb4:	f7f4 fb28 	bl	8000608 <__aeabi_dmul>
 800bfb8:	a363      	add	r3, pc, #396	@ (adr r3, 800c148 <atan+0x2d8>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	4680      	mov	r8, r0
 800bfc0:	4689      	mov	r9, r1
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	f7f4 fb1f 	bl	8000608 <__aeabi_dmul>
 800bfca:	a361      	add	r3, pc, #388	@ (adr r3, 800c150 <atan+0x2e0>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f962 	bl	8000298 <__aeabi_dsub>
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	463b      	mov	r3, r7
 800bfd8:	f7f4 fb16 	bl	8000608 <__aeabi_dmul>
 800bfdc:	a35e      	add	r3, pc, #376	@ (adr r3, 800c158 <atan+0x2e8>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f959 	bl	8000298 <__aeabi_dsub>
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	f7f4 fb0d 	bl	8000608 <__aeabi_dmul>
 800bfee:	a35c      	add	r3, pc, #368	@ (adr r3, 800c160 <atan+0x2f0>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 f950 	bl	8000298 <__aeabi_dsub>
 800bff8:	4632      	mov	r2, r6
 800bffa:	463b      	mov	r3, r7
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	a359      	add	r3, pc, #356	@ (adr r3, 800c168 <atan+0x2f8>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f7f4 f947 	bl	8000298 <__aeabi_dsub>
 800c00a:	4632      	mov	r2, r6
 800c00c:	463b      	mov	r3, r7
 800c00e:	f7f4 fafb 	bl	8000608 <__aeabi_dmul>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4640      	mov	r0, r8
 800c018:	4649      	mov	r1, r9
 800c01a:	f7f4 f93f 	bl	800029c <__adddf3>
 800c01e:	4622      	mov	r2, r4
 800c020:	462b      	mov	r3, r5
 800c022:	f7f4 faf1 	bl	8000608 <__aeabi_dmul>
 800c026:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	d148      	bne.n	800c0c2 <atan+0x252>
 800c030:	4620      	mov	r0, r4
 800c032:	4629      	mov	r1, r5
 800c034:	f7f4 f930 	bl	8000298 <__aeabi_dsub>
 800c038:	e72f      	b.n	800be9a <atan+0x2a>
 800c03a:	4b52      	ldr	r3, [pc, #328]	@ (800c184 <atan+0x314>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 f929 	bl	8000298 <__aeabi_dsub>
 800c046:	4b4f      	ldr	r3, [pc, #316]	@ (800c184 <atan+0x314>)
 800c048:	4606      	mov	r6, r0
 800c04a:	460f      	mov	r7, r1
 800c04c:	2200      	movs	r2, #0
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 f923 	bl	800029c <__adddf3>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4630      	mov	r0, r6
 800c05c:	4639      	mov	r1, r7
 800c05e:	f7f4 fbfd 	bl	800085c <__aeabi_ddiv>
 800c062:	f04f 0a01 	mov.w	sl, #1
 800c066:	4604      	mov	r4, r0
 800c068:	460d      	mov	r5, r1
 800c06a:	e765      	b.n	800bf38 <atan+0xc8>
 800c06c:	4b47      	ldr	r3, [pc, #284]	@ (800c18c <atan+0x31c>)
 800c06e:	429e      	cmp	r6, r3
 800c070:	d21c      	bcs.n	800c0ac <atan+0x23c>
 800c072:	4b47      	ldr	r3, [pc, #284]	@ (800c190 <atan+0x320>)
 800c074:	2200      	movs	r2, #0
 800c076:	4620      	mov	r0, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 f90d 	bl	8000298 <__aeabi_dsub>
 800c07e:	4b44      	ldr	r3, [pc, #272]	@ (800c190 <atan+0x320>)
 800c080:	4606      	mov	r6, r0
 800c082:	460f      	mov	r7, r1
 800c084:	2200      	movs	r2, #0
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fabd 	bl	8000608 <__aeabi_dmul>
 800c08e:	4b3d      	ldr	r3, [pc, #244]	@ (800c184 <atan+0x314>)
 800c090:	2200      	movs	r2, #0
 800c092:	f7f4 f903 	bl	800029c <__adddf3>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 fbdd 	bl	800085c <__aeabi_ddiv>
 800c0a2:	f04f 0a02 	mov.w	sl, #2
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	e745      	b.n	800bf38 <atan+0xc8>
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	462b      	mov	r3, r5
 800c0b0:	4938      	ldr	r1, [pc, #224]	@ (800c194 <atan+0x324>)
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f7f4 fbd2 	bl	800085c <__aeabi_ddiv>
 800c0b8:	f04f 0a03 	mov.w	sl, #3
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	e73a      	b.n	800bf38 <atan+0xc8>
 800c0c2:	4b35      	ldr	r3, [pc, #212]	@ (800c198 <atan+0x328>)
 800c0c4:	4e35      	ldr	r6, [pc, #212]	@ (800c19c <atan+0x32c>)
 800c0c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 f8e3 	bl	8000298 <__aeabi_dsub>
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	462b      	mov	r3, r5
 800c0d6:	f7f4 f8df 	bl	8000298 <__aeabi_dsub>
 800c0da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c0e6:	f7f4 f8d7 	bl	8000298 <__aeabi_dsub>
 800c0ea:	f1bb 0f00 	cmp.w	fp, #0
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	f6bf aedc 	bge.w	800beae <atan+0x3e>
 800c0f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0fa:	461d      	mov	r5, r3
 800c0fc:	e6d7      	b.n	800beae <atan+0x3e>
 800c0fe:	a51c      	add	r5, pc, #112	@ (adr r5, 800c170 <atan+0x300>)
 800c100:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c104:	e6d3      	b.n	800beae <atan+0x3e>
 800c106:	bf00      	nop
 800c108:	54442d18 	.word	0x54442d18
 800c10c:	3ff921fb 	.word	0x3ff921fb
 800c110:	8800759c 	.word	0x8800759c
 800c114:	7e37e43c 	.word	0x7e37e43c
 800c118:	e322da11 	.word	0xe322da11
 800c11c:	3f90ad3a 	.word	0x3f90ad3a
 800c120:	24760deb 	.word	0x24760deb
 800c124:	3fa97b4b 	.word	0x3fa97b4b
 800c128:	a0d03d51 	.word	0xa0d03d51
 800c12c:	3fb10d66 	.word	0x3fb10d66
 800c130:	c54c206e 	.word	0xc54c206e
 800c134:	3fb745cd 	.word	0x3fb745cd
 800c138:	920083ff 	.word	0x920083ff
 800c13c:	3fc24924 	.word	0x3fc24924
 800c140:	5555550d 	.word	0x5555550d
 800c144:	3fd55555 	.word	0x3fd55555
 800c148:	2c6a6c2f 	.word	0x2c6a6c2f
 800c14c:	bfa2b444 	.word	0xbfa2b444
 800c150:	52defd9a 	.word	0x52defd9a
 800c154:	3fadde2d 	.word	0x3fadde2d
 800c158:	af749a6d 	.word	0xaf749a6d
 800c15c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c160:	fe231671 	.word	0xfe231671
 800c164:	3fbc71c6 	.word	0x3fbc71c6
 800c168:	9998ebc4 	.word	0x9998ebc4
 800c16c:	3fc99999 	.word	0x3fc99999
 800c170:	54442d18 	.word	0x54442d18
 800c174:	bff921fb 	.word	0xbff921fb
 800c178:	440fffff 	.word	0x440fffff
 800c17c:	7ff00000 	.word	0x7ff00000
 800c180:	3fdbffff 	.word	0x3fdbffff
 800c184:	3ff00000 	.word	0x3ff00000
 800c188:	3ff2ffff 	.word	0x3ff2ffff
 800c18c:	40038000 	.word	0x40038000
 800c190:	3ff80000 	.word	0x3ff80000
 800c194:	bff00000 	.word	0xbff00000
 800c198:	08021fc0 	.word	0x08021fc0
 800c19c:	08021fe0 	.word	0x08021fe0

0800c1a0 <fabs>:
 800c1a0:	ec51 0b10 	vmov	r0, r1, d0
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1aa:	ec43 2b10 	vmov	d0, r2, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_init>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr

0800c1bc <_fini>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	bf00      	nop
 800c1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c2:	bc08      	pop	{r3}
 800c1c4:	469e      	mov	lr, r3
 800c1c6:	4770      	bx	lr
